<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SampSharp.GameMode</name>
    </assembly>
    <members>
        <member name="T:SampSharp.GameMode.API.DefaultNative">
            <summary>
            The default implementation of a native method.
            </summary>
            <seealso cref="T:SampSharp.GameMode.API.INative" />
        </member>
        <member name="P:SampSharp.GameMode.API.DefaultNative.Handle">
            <summary>
                Gets the handle of this native.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.DefaultNative.Name">
            <summary>
                Gets the name of the native function.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.DefaultNative.ParameterTypes">
            <summary>
                Gets the parameter types.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.DefaultNative.Invoke(System.Object[])">
            <summary>
                Invokes the native with the specified arguments.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.DefaultNative.InvokeFloat(System.Object[])">
            <summary>
                Invokes the native with the specified arguments and returns the return value as a float.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The return value of the native as a float.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.DefaultNative.InvokeBool(System.Object[])">
            <summary>
                Invokes the native with the specified arguments and returns the return value as a bool.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The return value of the native as a bool.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.DefaultNative.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeObjects.NativeNotImplementedException">
            <summary>
                An exception to throw in the body of methods which should be generated by a proxy factory.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeNotImplementedException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeNotImplementedException" /> class.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeObjects.NativeILGenerator">
            <summary>
            Represents a native method IL generator.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.#ctor(SampSharp.GameMode.API.INative,System.Type[],System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeILGenerator"/> class.
            </summary>
            <param name="native">The native.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="returnType">Type of the return value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if native, parameterTypes or returnType is null.</exception>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.ParameterTypes">
            <summary>
            Gets the parameter types.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.Native">
            <summary>
            Gets the native.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.ReturnType">
            <summary>
            Gets the type of the return value.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.GetHandleInvokerMethod">
            <summary>
            Gets the handle invoker method.
            </summary>
            <returns>The handle invoker method.</returns>
            <exception cref="T:System.Exception">Thrown if unsupported return type of method or native invoker is missing.</exception>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.GenerateArgsArray(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the arguments array.
            </summary>
            <param name="il">The il generator.</param>
            <returns>The local for the arguments array.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.NativeArgIndexToMethodArgIndex(System.Int32)">
            <summary>
            Returns the native argument index for the specified method argument index.
            </summary>
            <param name="index">The method argument index.</param>
            <returns>The native argument index for the specified method argument index.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.GeneratePassTrough(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generates the pass trough for input arguments.
            </summary>
            <param name="il">The il generator.</param>
            <param name="argsLocal">The arguments local.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.GenerateHandleInvoker(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generates the handle invoker.
            </summary>
            <param name="il">The il generator.</param>
            <param name="argsLocal">The arguments local.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.GeneratePassBack(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generates the pass back for output arguments.
            </summary>
            <param name="il">The il generator.</param>
            <param name="argsLocal">The arguments local.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.GenerateReturn(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the return statement.
            </summary>
            <param name="il">The il generator.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeILGenerator.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL code with the speicifed il generator.
            </summary>
            <param name="il">The il generator.</param>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute">
            <summary>
                Indicates a method should be proxied by the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeObjectILGenerator" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute" /> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute.#ctor(System.Int32[])">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute" /> class.
            </summary>
            <param name="lengths">The lengths of special arguments.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute.#ctor(System.Boolean,System.Int32[])">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute" /> class.
            </summary>
            <param name="ignoreIdentifiers">if set to <c>true</c> identifiers are ignored.</param>
            <param name="lengths">The lengths.</param>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute.Function">
            <summary>
                Gets or sets the function name.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute.IgnoreIdentifiers">
            <summary>
                Gets a value indicating whether to ignore identifiers.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativeMethodAttribute.Lengths">
            <summary>
                Gets the lengths of special arguments.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeObjects.NativeObjectIdentifiersAttribute">
            <summary>
            Specifies the identifiers properties for a native object class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeObjectIdentifiersAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeObjectIdentifiersAttribute"/> class.
            </summary>
            <param name="identifiers">The identifiers of the native object.</param>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativeObjectIdentifiersAttribute.Identifiers">
            <summary>
            Gets or sets the identifiers of the native object.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeObjects.NativeObjectILGenerator">
            <summary>
            A generator for native object instances.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeObjectILGenerator.#ctor(SampSharp.GameMode.API.INative,System.Type,System.String[],System.Type[],System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeObjectILGenerator"/> class.
            </summary>
            <param name="native">The native.</param>
            <param name="nativeObjectType">Type of the native object.</param>
            <param name="identifiers">The identifiers.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="returnType">Type of the return.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if nativeObjectType or idnetifiers is null.</exception>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeObjectILGenerator.NativeArgIndexToMethodArgIndex(System.Int32)">
            <summary>
            Returns the native argument index for the specified method argument index.
            </summary>
            <param name="index">The method argument index.</param>
            <returns>The native argument index for the specified method argument index.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeObjectILGenerator.GeneratePassTrough(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generates the pass trough for input arguments.
            </summary>
            <param name="il">The il generator.</param>
            <param name="argsLocal">The arguments local.</param>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeObjects.NativeObjectProxyFactory">
            <summary>
            Contains logic for creating natove object proxies.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeObjectProxyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativeObjectProxyFactory"/> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeObjectProxyFactory.CreateInstance``1(System.Object[])">
            <summary>
            Creates a proxy instance of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to create a proxy of.</typeparam>
            <param name="arguments">The arguments.</param>
            <returns>The proxy instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativeObjectProxyFactory.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates a proxy instance of  the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to create a proxy of.</param>
            <param name="arguments">The arguments.</param>
            <returns>The proxy isntance</returns>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeObjects.NativeObjectSingleton`1">
            <summary>
                Provides a singleton <see cref="P:SampSharp.GameMode.API.NativeObjects.NativeObjectSingleton`1.Instance"/> property containing a single instance of the specified native object type.
            </summary>
            <typeparam name="T">The native object type.</typeparam>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativeObjectSingleton`1.Instance">
            <summary>
                Gets the singleton instance of native object <typeparamref name="T" />.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute">
            <summary>
                Indicates a property represents a native setter/getter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute" /> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute" /> class.
            </summary>
            <param name="ignoreIdentifiers">if set to <c>true</c> identifiers are ignored.</param>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute.SetFunction">
            <summary>
                Gets or sets the set function.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute.SetLengths">
            <summary>
                Gets or sets the set lengths.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute.GetFunction">
            <summary>
                Gets or sets the get function.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute.GetLengths">
            <summary>
                Gets or sets the get lengths.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.NativeObjects.NativePropertyAttribute.IgnoreIdentifiers">
            <summary>
                Gets a value indicating whether to ignore identifiers.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.API.DefaultNativeLoader">
            <summary>
                Represents the default SA-MP natives loader.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.DefaultNativeLoader.Load(System.String,System.Int32[],System.Type[])">
            <summary>
                Loads a native with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="sizes">The references to the parameter which contains the size of array parameters.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>
                The loaded native.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.API.DefaultNativeLoader.Get(System.Int32)">
            <summary>
            Gets the native with the specified handle.
            </summary>
            <param name="handle">The handle of the native.</param>
            <returns>The native.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.DefaultNativeLoader.Exists(System.String)">
            <summary>
                Checks whether a native with the specified <paramref name="name" /> exists.
            </summary>
            <param name="name">The name.</param>
            <returns>
                True if a native with the specified name exists; False otherwise.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.API.Extension">
            <summary>
                Contains methods for registering SampSharp extensions and represents a simple base class for extensions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.Extension.Register``1(``0)">
            <summary>
                Registers an extension to the plugin and loads its natives.
            </summary>
            <param name="extension">The extension to register.</param>
            <returns>
                True on success, False otherwise.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.API.Extension.LoadServices(SampSharp.GameMode.BaseMode)">
            <summary>
                Loads services provided by this extensions.
            </summary>
            <param name="gameMode">The game mode.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.Extension.LoadControllers(SampSharp.GameMode.BaseMode,SampSharp.GameMode.Controllers.ControllerCollection)">
            <summary>
                Loads controllers provided by this extensions.
            </summary>
            <param name="gameMode">The game mode.</param>
            <param name="controllerCollection">The controller collection.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.Extension.PostLoad(SampSharp.GameMode.BaseMode)">
            <summary>
                Performs post-load actions.
            </summary>
            <param name="gameMode">The game mode.</param>
        </member>
        <member name="T:SampSharp.GameMode.API.IExtension">
            <summary>
            Contains methods defining a SampSharp extension.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.IExtension.LoadServices(SampSharp.GameMode.BaseMode)">
            <summary>
                Loads services provided by this extensions.
            </summary>
            <param name="gameMode">The game mode.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.IExtension.LoadControllers(SampSharp.GameMode.BaseMode,SampSharp.GameMode.Controllers.ControllerCollection)">
            <summary>
                Loads controllers provided by this extensions.
            </summary>
            <param name="gameMode">The game mode.</param>
            <param name="controllerCollection">The controller collection.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.IExtension.PostLoad(SampSharp.GameMode.BaseMode)">
            <summary>
                Performs post-load actions.
            </summary>
            <param name="gameMode">The game mode.</param>
        </member>
        <member name="T:SampSharp.GameMode.API.INative">
            <summary>
                Contains the definition of a native.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.INative.Handle">
            <summary>
                Gets the handle of this native.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.INative.Name">
            <summary>
                Gets the name of the native function.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.INative.ParameterTypes">
            <summary>
                Gets the parameter types.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.INative.Invoke(System.Object[])">
            <summary>
                Invokes the native with the specified arguments.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.INative.InvokeFloat(System.Object[])">
            <summary>
                Invokes the native with the specified arguments and returns the return value as a float.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The return value of the native as a float.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.INative.InvokeBool(System.Object[])">
            <summary>
                Invokes the native with the specified arguments and returns the return value as a bool.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The return value of the native as a bool.</returns>
        </member>
        <member name="T:SampSharp.GameMode.API.INativeLoader">
            <summary>
                Contains the functionality of a native function loader.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.INativeLoader.Load(System.String,System.Int32[],System.Type[])">
            <summary>
                Loads a native with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="sizes">The references to the parameter which contains the size of array parameters.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The loaded native.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.INativeLoader.Get(System.Int32)">
            <summary>
                Gets the native with the specified handle.
            </summary>
            <param name="handle">The handle of the native.</param>
            <returns>The native.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.INativeLoader.Exists(System.String)">
            <summary>
                Checks whether a native with the specified <paramref name="name" /> exists.
            </summary>
            <param name="name">The name.</param>
            <returns>True if a native with the specified name exists; False otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.API.NativeHandleInvokers">
            <summary>
                Contains simple wrapper methods for invoking handles of natives with a set of arguments.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeHandleInvokers.InvokeHandleAsFloat(System.Int32,System.Object[])">
            <summary>
                Invokes the native <see cref="!:handle" /> with the specified <see cref="!:args" />.
            </summary>
            <param name="handle">The handle.</param>
            <param name="args">The arguments.</param>
            <returns>The return value as a float.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeHandleInvokers.InvokeHandleAsBool(System.Int32,System.Object[])">
            <summary>
                Invokes the native <see cref="!:handle" /> with the specified <see cref="!:args" />.
            </summary>
            <param name="handle">The handle.</param>
            <param name="args">The arguments.</param>
            <returns>The return value as a boolean.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeHandleInvokers.InvokeHandleAsVoid(System.Int32,System.Object[])">
            <summary>
                Invokes the native <see cref="!:handle" /> with the specified <see cref="!:args" />.
            </summary>
            <param name="handle">The handle.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:SampSharp.GameMode.API.NativeHandleInvokers.InvokeHandle(System.Int32,System.Object[])">
            <summary>
                Invokes the native <see cref="!:handle" /> with the specified <see cref="!:args" />.
            </summary>
            <param name="handle">The handle.</param>
            <param name="args">The arguments.</param>
            <returns>The return value.</returns>
        </member>
        <member name="T:SampSharp.GameMode.API.SampSharpExtensionAttribute">
            <summary>
                Specifies the extension to load from this assembly.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.SampSharpExtensionAttribute.#ctor(System.Type,System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.API.SampSharpExtensionAttribute" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="loadBeforeAssembliesOfType">
                Types of assemblies to load before this extension (extensions this extension
                has references to and requires to load before).
            </param>
        </member>
        <member name="P:SampSharp.GameMode.API.SampSharpExtensionAttribute.Type">
            <summary>
                Gets the type of the extension.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.SampSharpExtensionAttribute.LoadBeforeAssemblies">
            <summary>
                Gets the assemblies to load before this extension.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.API.Native">
            <summary>
                Represents a native function.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.API.Native.NativeLoader">
            <summary>
                Gets or sets the native loader.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.Native.Exists(System.String)">
            <summary>
                Checks whether a native with the specified <paramref name="name" /> exists.
            </summary>
            <param name="name">The name.</param>
            <returns>True if a native with the specified name exists; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.Native.Load(System.String,System.Type[])">
            <summary>
                Loads a native with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The loaded native.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.Native.Load(System.String,System.Int32[],System.Type[])">
            <summary>
                Loads a native with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="sizes">The references to the parameter which contains the size of array parameters.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The loaded native.</returns>
        </member>
        <member name="M:SampSharp.GameMode.API.Native.Get(System.Int32)">
            <summary>
                Gets the native with the specified handle.
            </summary>
            <param name="handle">The handle of the native.</param>
            <returns>The native.</returns>
        </member>
        <member name="T:SampSharp.GameMode.API.ParameterLengthAttribute">
            <summary>
                Contains an index property for defining which parameter of a callback contains the length of the parameter this
                attribute is attached to.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.API.ParameterLengthAttribute.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the ParameterLengthAttribute class.
            </summary>
            <param name="index">
                The index of the parameter which contains the length of the parameter this attribute is attached
                to.
            </param>
        </member>
        <member name="P:SampSharp.GameMode.API.ParameterLengthAttribute.Index">
            <summary>
                Gets the index of the parameter which contains the length of the parameter this attribute is attached to.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.BaseMode">
            <summary>
                Base class for a SA-MP game mode.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.Initialized">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnInitialized(System.EventArgs)" /> callback is being called.
                This callback is triggered when the gamemode starts.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.Exited">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnExited(System.EventArgs)" /> callback is being called.
                This callback is called when a gamemode ends.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerConnected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerConnected(SampSharp.GameMode.World.BasePlayer,System.EventArgs)" /> callback is being called.
                This callback is called when a player connects to the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerDisconnected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnected(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DisconnectEventArgs)" /> callback is being called.
                This callback is called when a player disconnects from the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerCleanup">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerCleanup(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DisconnectEventArgs)" /> callback is being called.
                This callback is called after a player has disconnected.
            </summary>
            <remarks>
                Because <see cref="T:SampSharp.GameMode.World.BasePlayer" /> probably is the first listener of this event,
                the <see cref="T:SampSharp.GameMode.World.BasePlayer" /> object is already disposed before any other listeners are called.
                It is better to either use the <see cref="E:SampSharp.GameMode.BaseMode.PlayerDisconnected" /> event or <see cref="E:SampSharp.GameMode.World.BasePlayer.Cleanup" />
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerSpawned">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSpawned(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.SpawnEventArgs)" /> callback is being called.
                This callback is called when a player spawns.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerDied">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDied(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DeathEventArgs)" /> callback is being called.
                This callback is triggered when the gamemode starts.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleSpawned">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleSpawned(SampSharp.GameMode.World.BaseVehicle,System.EventArgs)" /> callback is being called.
                This callback is called when a vehicle respawns.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleDied">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleDied(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                This callback is called when a vehicle is destroyed - either by exploding or becoming submerged in water.
            </summary>
            <remarks>
                This callback will also be called when a vehicle enters water, but the vehicle can be saved from destruction by
                teleportation or driving out (if only partially submerged). The callback won't be called a second time, and the
                vehicle may disappear when the driver exits, or after a short time.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerText">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerText(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.TextEventArgs)" /> callback is being called.
                Called when a player sends a chat message.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerCommandText">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerCommandText(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.CommandTextEventArgs)" /> callback is being called.
                This callback is called when a player enters a command into the client chat window, e.g. /help.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerRequestClass">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestClass(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.RequestClassEventArgs)" /> callback is being called.
                Called when a player changes class at class selection (and when class selection first appears).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEnterVehicle">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterVehicle(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EnterVehicleEventArgs)" /> callback is being called.
                This callback is called when a player starts to enter a vehicle, meaning the player is not in vehicle yet at the
                time this callback is called.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerExitVehicle">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerExitVehicle(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PlayerVehicleEventArgs)" /> callback is being called.
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as setting
                <see cref="P:SampSharp.GameMode.World.BasePlayer.Position" />.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerStateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStateChanged(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.StateEventArgs)" /> callback is being called.
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as setting
                <see cref="P:SampSharp.GameMode.World.BasePlayer.Position" />.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEnterCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterCheckpoint(SampSharp.GameMode.World.BasePlayer,System.EventArgs)" /> callback is being called.
                This callback is called when a player enters the checkpoint set for that player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerLeaveCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveCheckpoint(SampSharp.GameMode.World.BasePlayer,System.EventArgs)" /> callback is being called.
                This callback is called when a player leaves the checkpoint set for that player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEnterRaceCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterRaceCheckpoint(SampSharp.GameMode.World.BasePlayer,System.EventArgs)" /> callback is being called.
                This callback is called when a player enters a race checkpoint.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerLeaveRaceCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveRaceCheckpoint(SampSharp.GameMode.World.BasePlayer,System.EventArgs)" /> callback is being called.
                This callback is called when a player leaves the race checkpoint.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.RconCommand">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnRconCommand(SampSharp.GameMode.Events.RconEventArgs)" /> callback is being called.
                This callback is called when a command is sent through the server console, remote RCON, or via the in-game /rcon
                command.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerRequestSpawn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestSpawn(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.RequestSpawnEventArgs)" /> callback is being called.
                Called when a player attempts to spawn via class selection.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.ObjectMoved">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnObjectMoved(SampSharp.GameMode.World.GlobalObject,System.EventArgs)" /> callback is being called.
                This callback is called when an object is moved using <see cref="M:SampSharp.GameMode.World.GlobalObject.Move(SampSharp.GameMode.Vector3,System.Single)" /> or
                <see cref="M:SampSharp.GameMode.World.GlobalObject.Move(SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Vector3)" /> (when it stops moving).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerObjectMoved">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerObjectMoved(SampSharp.GameMode.World.PlayerObject,System.EventArgs)" /> callback is being called.
                This callback is called when an object is moved using <see cref="M:SampSharp.GameMode.World.PlayerObject.Move(SampSharp.GameMode.Vector3,System.Single)" /> or
                <see cref="M:SampSharp.GameMode.World.PlayerObject.Move(SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Vector3)" /> (when it stops moving).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerPickUpPickup">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerPickUpPickup(SampSharp.GameMode.World.Pickup,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                Called when a player picks up a pickup created with <see cref="T:SampSharp.GameMode.World.Pickup" />.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleMod">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleMod(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.VehicleModEventArgs)" /> callback is being called.
                This callback is called when a vehicle is modded.
            </summary>
            <remarks>
                This callback is not called by <see cref="M:SampSharp.GameMode.World.BaseVehicle.AddComponent(System.Int32)" />.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEnterExitModShop">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterExitModShop(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EnterModShopEventArgs)" /> callback is being called.
                This callback is called when a player enters or exits a mod shop.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehiclePaintjobApplied">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehiclePaintjobApplied(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.VehiclePaintjobEventArgs)" /> callback is being called.
                Called when a player changes the paintjob of their vehicle (in a modshop).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleResprayed">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleResprayed(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.VehicleResprayedEventArgs)" /> callback is being called.
                The callback name is deceptive, this callback is called when a player exits a mod shop, regardless of whether the
                vehicle's colors were changed, and is NEVER called for pay 'n' spray garages.
            </summary>
            <remarks>
                Misleadingly, this callback is not called for pay 'n' spray (only modshops).
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleDamageStatusUpdated">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleDamageStatusUpdated(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                This callback is called when a vehicle element such as doors, tires, panels, or lights get damaged.
            </summary>
            <remarks>
                This does not include vehicle health changes.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.UnoccupiedVehicleUpdated">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnUnoccupiedVehicleUpdated(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs)" /> callback is being called.
                This callback is called everytime an unoccupied vehicle updates the server with their status.
            </summary>
            <remarks>
                This callback is called very frequently per second per unoccupied vehicle. You should refrain from implementing
                intensive calculations or intensive file writing/reading operations in this callback.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerSelectedMenuRow">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectedMenuRow(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.MenuRowEventArgs)" /> callback is being called.
                This callback is called when a player selects an item from a menu.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerExitedMenu">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerExitedMenu(SampSharp.GameMode.World.BasePlayer,System.EventArgs)" /> callback is being called.
                Called when a player exits a menu.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerInteriorChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerInteriorChanged(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.InteriorChangedEventArgs)" /> callback is being called.
                Called when a player changes interior.
            </summary>
            <remarks>
                This is also called when <see cref="P:SampSharp.GameMode.World.BasePlayer.Interior" /> is set.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerKeyStateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerKeyStateChanged(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.KeyStateChangedEventArgs)" /> callback is being called.
                This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not
                trigger this callback.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.RconLoginAttempt">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnRconLoginAttempt(SampSharp.GameMode.Events.RconLoginAttemptEventArgs)" /> callback is being called.
                This callback is called when someone tries to login to RCON, succesful or not.
            </summary>
            <remarks>
                This callback is only called when /rcon login is used.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerUpdate">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerUpdate(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PlayerUpdateEventArgs)" /> callback is being called.
                This callback is called everytime a client/player updates the server with their status.
            </summary>
            <remarks>
                This callback is called very frequently per second per player, only use it when you know what it's meant for.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerStreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStreamIn(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                This callback is called when a player is streamed by some other player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerStreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStreamOut(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                This callback is called when a player is streamed out from some other player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleStreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleStreamIn(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                Called when a vehicle is streamed to a player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleStreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleStreamOut(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                This callback is called when a vehicle is streamed out from some player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.TrailerUpdate">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnTrailerUpdate(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.TrailerEventArgs)" /> callback is being called.
                This callback is called when a player sent a trailer update.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.DialogResponse">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnDialogResponse(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DialogResponseEventArgs)" /> callback is being called.
                This callback is called when a player responds to a dialog shown using <see cref="T:SampSharp.GameMode.Display.Dialog" /> by
                either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style dialog).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerTakeDamage">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerTakeDamage(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DamageEventArgs)" /> callback is being called.
                This callback is called when a player takes damage.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerGiveDamage">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerGiveDamage(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DamageEventArgs)" /> callback is being called.
                This callback is called when a player gives damage to another player.
            </summary>
            <remarks>
                One thing you can do with GiveDamage is detect when other players report that they have damaged a certain player,
                and that player hasn't taken any health loss. You can flag those players as suspicious.
                You can also set all players to the same team (so they don't take damage from other players) and process all health
                loss from other players manually.
                You might have a server where players get a wanted level if they attack Cop players (or some specific class). In
                that case you might trust GiveDamage over TakeDamage.
                There should be a lot you can do with it. You just have to keep in mind the levels of trust between clients. In
                most cases it's better to trust the client who is being damaged to report their health/armour (TakeDamage). SA-MP
                normally does this. GiveDamage provides some extra information which may be useful when you require a different
                level of trust.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerClickMap">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickMap(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PositionEventArgs)" /> callback is being called.
                This callback is called when a player places a target/waypoint on the pause menu map (by right-clicking).
            </summary>
            <remarks>
                The Z value provided is only an estimate; you may find it useful to use a plugin like the MapAndreas plugin to get
                a more accurate Z coordinate (or for teleportation; use <see cref="M:SampSharp.GameMode.World.BasePlayer.SetPositionFindZ(SampSharp.GameMode.Vector3)" />).
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerClickTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickTextDrawEventArgs)" /> callback is being called.
                This callback is called when a player clicks on a textdraw or cancels the select mode(ESC).
            </summary>
            <remarks>
                The clickable area is defined by <see cref="P:SampSharp.GameMode.Display.TextDraw.Width" /> and <see cref="P:SampSharp.GameMode.Display.TextDraw.Height" />.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerClickPlayerTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayerTextDraw(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs)" /> callback is
                being
                called.
                This callback is called when a player clicks on a player-textdraw. It is not called when player cancels the select
                mode (ESC) - however, <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickTextDrawEventArgs)" /> is.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerClickPlayer">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayer(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickPlayerEventArgs)" /> callback is being called.
                Called when a player double-clicks on a player on the scoreboard.
            </summary>
            <remarks>
                There is currently only one 'source' (<see cref="F:SampSharp.GameMode.Definitions.PlayerClickSource.Scoreboard" />). The existence of this argument
                suggests that more sources may be supported in the future.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEditGlobalObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditGlobalObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EditGlobalObjectEventArgs)" /> callback is being
                called.
                This callback is called when a player ends global object edition mode.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEditPlayerObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditPlayerObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EditPlayerObjectEventArgs)" /> callback is being
                called.
                This callback is called when a player ends player object edition mode.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEditAttachedObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditAttachedObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EditAttachedObjectEventArgs)" /> callback is being
                called.
                This callback is called when a player ends attached object edition mode.
            </summary>
            <remarks>
                Editions should be discarded if response was '0' (cancelled). This must be done by storing the offsets etc. in an
                array BEFORE using EditAttachedObject.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerSelectGlobalObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectGlobalObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.SelectGlobalObjectEventArgs)" /> callback is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.World.GlobalObject.Select(SampSharp.GameMode.World.BasePlayer)" /> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerSelectPlayerObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectPlayerObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.SelectPlayerObjectEventArgs)" /> callback is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.World.PlayerObject.Select(SampSharp.GameMode.World.BasePlayer)" /> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerWeaponShot">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerWeaponShot(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.WeaponShotEventArgs)" /> callback is being called.
                This callback is called when a player fires a shot from a weapon.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.IncomingConnection">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnIncomingConnection(SampSharp.GameMode.Events.ConnectionEventArgs)" /> callback is being called.
                This callback is called when an IP address attempts a connection to the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerGiveDamageActor">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerGiveDamageActor(SampSharp.GameMode.World.Actor,SampSharp.GameMode.Events.DamageEventArgs)" /> callback is being called.
                This callback is called when a player gives damage to an actor.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleSirenStateChange">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleSirenStateChange(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.SirenStateEventArgs)" /> callback is being called.
                This callback is called when a vehicle's siren is toggled.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.ActorStreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnActorStreamIn(SampSharp.GameMode.World.Actor,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                This callback is called when an actor is streamed in by a player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.ActorStreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnActorStreamOut(SampSharp.GameMode.World.Actor,SampSharp.GameMode.Events.PlayerEventArgs)" /> callback is being called.
                This callback is called when an actor is streamed out by a player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.Tick">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnTick(System.EventArgs)" /> callback is being called. This callback is called every
                tick(50 times per second).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.TimerTick">
            <summary>
                Occurs when a timer ticks.
                This callback is called when a timer ticks.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.CallbackException">
            <summary>
                Occurs when a callback throws an exception.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnInitialized(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.Initialized" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnExited(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.Exited" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerConnected(SampSharp.GameMode.World.BasePlayer,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerConnected" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnected(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DisconnectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerDisconnected" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DisconnectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerCleanup(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DisconnectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerCleanup" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DisconnectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerSpawned(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.SpawnEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSpawned" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerDied(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DeathEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerDied" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DeathEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleSpawned(SampSharp.GameMode.World.BaseVehicle,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehicleSpawned" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleDied(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehicleDied" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerText(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.TextEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerText" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.TextEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerCommandText(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.CommandTextEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerCommandText" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.TextEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerRequestClass(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.RequestClassEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerRequestClass" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.RequestClassEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEnterVehicle(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EnterVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterVehicle" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EnterVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerExitVehicle(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerExitVehicle" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerStateChanged(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.StateEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerStateChanged" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.StateEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEnterCheckpoint(SampSharp.GameMode.World.BasePlayer,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterCheckpoint" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveCheckpoint(SampSharp.GameMode.World.BasePlayer,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerLeaveCheckpoint" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEnterRaceCheckpoint(SampSharp.GameMode.World.BasePlayer,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterRaceCheckpoint" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveRaceCheckpoint(SampSharp.GameMode.World.BasePlayer,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerLeaveRaceCheckpoint" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnRconCommand(SampSharp.GameMode.Events.RconEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.RconCommand" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.RconEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerRequestSpawn(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.RequestSpawnEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerRequestSpawn" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnObjectMoved(SampSharp.GameMode.World.GlobalObject,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.ObjectMoved" /> event.
            </summary>
            <param name="globalObject">The global-object triggering the event.</param>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerObjectMoved(SampSharp.GameMode.World.PlayerObject,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerObjectMoved" /> event.
            </summary>
            <param name="playerObject">The player-object triggering the event.</param>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerPickUpPickup(SampSharp.GameMode.World.Pickup,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerPickUpPickup" /> event.
            </summary>
            <param name="pickup">The pickup triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleMod(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.VehicleModEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehicleMod" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleModEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEnterExitModShop(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EnterModShopEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterExitModShop" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EnterModShopEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehiclePaintjobApplied(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.VehiclePaintjobEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehiclePaintjobApplied" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehiclePaintjobEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleResprayed(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.VehicleResprayedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehicleResprayed" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleResprayedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleDamageStatusUpdated(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehicleDamageStatusUpdated" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnUnoccupiedVehicleUpdated(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.UnoccupiedVehicleUpdated" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerSelectedMenuRow(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.MenuRowEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSelectedMenuRow" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.MenuRowEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerExitedMenu(SampSharp.GameMode.World.BasePlayer,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerExitedMenu" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerInteriorChanged(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.InteriorChangedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerInteriorChanged" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.InteriorChangedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerKeyStateChanged(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.KeyStateChangedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerKeyStateChanged" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.KeyStateChangedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnRconLoginAttempt(SampSharp.GameMode.Events.RconLoginAttemptEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.RconLoginAttempt" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.RconLoginAttemptEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerUpdate(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PlayerUpdateEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerUpdate" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerStreamIn(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerStreamIn" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerStreamOut(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerStreamOut" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleStreamIn(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehicleStreamIn" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleStreamOut(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehicleStreamOut" /> event.
            </summary>
            <param name="vehicle">The vehicle triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnTrailerUpdate(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.TrailerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.TrailerUpdate" /> event.
            </summary>
            <param name="trailer">The trailer triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnDialogResponse(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DialogResponseEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.DialogResponse" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DialogResponseEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerTakeDamage(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DamageEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerTakeDamage" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DamageEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerGiveDamage(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.DamageEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerGiveDamage" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DamageEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerClickMap(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.PositionEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickMap" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PositionEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickTextDraw" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ClickTextDrawEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayerTextDraw(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickPlayerTextDraw" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ClickTextDrawEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayer(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickPlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickPlayer" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ClickPlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEditGlobalObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EditGlobalObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEditGlobalObject" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EditGlobalObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEditPlayerObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EditPlayerObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEditPlayerObject" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EditPlayerObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEditAttachedObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.EditAttachedObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEditAttachedObject" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EditAttachedObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerSelectGlobalObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.SelectGlobalObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSelectGlobalObject" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerSelectPlayerObject(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.SelectPlayerObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSelectPlayerObject" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.SelectPlayerObjectEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerWeaponShot(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.WeaponShotEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerWeaponShot" /> event.
            </summary>
            <param name="player">The player triggering the event.</param>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.WeaponShotEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnIncomingConnection(SampSharp.GameMode.Events.ConnectionEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.IncomingConnection" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ConnectionEventArgs" /> that contains the event dEventArgsata. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleSirenStateChange(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Events.SirenStateEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.VehicleSirenStateChange" /> event.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.SirenStateEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnActorStreamIn(SampSharp.GameMode.World.Actor,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.ActorStreamIn" /> event.
            </summary>
            <param name="actor">The actor.</param>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnActorStreamOut(SampSharp.GameMode.World.Actor,SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.ActorStreamOut" /> event.
            </summary>
            <param name="actor">The actor.</param>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerGiveDamageActor(SampSharp.GameMode.World.Actor,SampSharp.GameMode.Events.DamageEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.PlayerGiveDamageActor" /> event.
            </summary>
            <param name="actor">The actor.</param>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.DamageEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnTick(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.BaseMode.Tick" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnCallbackException(SampSharp.GameMode.Events.ExceptionEventArgs)">
            <summary>
                Raises the <see cref="E:CallbackException" /> event.
            </summary>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.ExceptionEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:SampSharp.GameMode.BaseMode.Gravity">
            <summary>
                Gets or sets the gravity.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.DisableNameTagLOS">
            <summary>
                Disables the name tag line of sight test.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SetGameModeText(System.String)">
            <summary>
                Set the name of the game mode, which appears in the server browser.
            </summary>
            <param name="text">GameMode name.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.ShowPlayerMarkers(SampSharp.GameMode.Definitions.PlayerMarkersMode)">
            <summary>
                A function that can be used in <see cref="M:SampSharp.GameMode.BaseMode.OnInitialized(System.EventArgs)" /> to enable or disable the players markers,
                which would normally be shown on the radar. If you want to change the marker settings at some other point in the
                gamemode, have a look at <see cref="M:SampSharp.GameMode.World.BasePlayer.SetPlayerMarker(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.SAMP.Color)" /> which does exactly that.
            </summary>
            <param name="mode">The mode you want to use.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.ShowNameTags(System.Boolean)">
            <summary>
                Toggle the drawing of player name tags, health bars and armor bars above players.
            </summary>
            <param name="show">False to disable, True to enable.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.UsePlayerPedAnimations">
            <summary>
                Uses standard player walking animation (animation of CJ) instead of custom animations for every skin (e.g. skating
                for skater skins).
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.EnableVehicleFriendlyFire">
            <summary>
                Enable friendly fire for team vehicles.
            </summary>
            <remarks>
                Players will be unable to damage teammates' vehicles (<see cref="P:SampSharp.GameMode.World.BasePlayer.Team" /> must be used!)
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SetNameTagDrawDistance(System.Single)">
            <summary>
                Set the maximum distance to display the names of players.
            </summary>
            <param name="distance">The distance to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.DisableInteriorEnterExits">
            <summary>
                Disable all the interior entrances and exits in the game (the yellow arrows at doors).
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SetTeamCount(System.Int32)">
            <summary>
                This function is used to change the amount of teams used in the game mode. It has no obvious way of being used, but
                can help to indicate the number of teams used for better (more effective) internal handling. This function should
                only be used in the <see cref="M:SampSharp.GameMode.BaseMode.OnInitialized(System.EventArgs)" /> callback.
            </summary>
            <remarks>
                You can pass 2 billion here if you like, this function has no effect at all.
            </remarks>
            <param name="count">Number of teams the gamemode knows.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawn point of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawn weapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawn weapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawn weapon.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawn point of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawn weapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawn weapon.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawn point of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <param name="weapon">The spawn-weapon for the player.</param>
            <param name="weaponAmmo">The amount of ammunition for the spawn weapon.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawn point of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,System.Int32,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the first spawn weapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawn weapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawn weapon.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,System.Int32,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the first spawn weapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawn weapon.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,System.Int32,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <param name="weapon">The spawn-weapon for the player.</param>
            <param name="weaponAmmo">The amount of ammunition for the spawn weapon.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,System.Int32,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.EnableStuntBonusForAll(System.Boolean)">
            <summary>
                Enables or disables stunt bonuses for all players.
            </summary>
            <param name="enable">True to enable stunt bonuses, False to disable.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.LimitGlobalChatRadius(System.Single)">
            <summary>
                Set a radius limitation for the chat. Only players at a certain distance from the player will see their message in
                the chat. Also changes the distance at which a player can see other players on the map at the same distance.
            </summary>
            <param name="chatRadius">Radius limit.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.LimitPlayerMarkerRadius(System.Single)">
            <summary>
                Set the player marker radius.
            </summary>
            <param name="markerRadius">The radius that markers will show at.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.ManualVehicleEngineAndLights">
            <summary>
                Use this function before any player connects (<see cref="M:SampSharp.GameMode.BaseMode.OnInitialized(System.EventArgs)" />) to tell all clients that the
                script will control vehicle engines and lights. This prevents the game automatically turning the engine on/off when
                players enter/exit vehicles and headlights automatically coming on when it is dark.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.Exit">
            <summary>
                Ends and restarts the game mode.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AllowInteriorWeapons(System.Boolean)">
            <summary>
                Toggle whether the usage of weapons in interiors is allowed or not.
            </summary>
            <param name="allow">True to enable weapons in interiors (enabled by default), False to disable weapons in interiors.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.EnableTirePopping(System.Boolean)">
            <summary>
                With this function you can enable or disable tire popping.
            </summary>
            <param name="enable">True to enable, False to disable tire popping.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SendRconCommand(System.String)">
            <summary>
                Sends an RCON command.
            </summary>
            <param name="command">The RCON command to be executed.</param>
        </member>
        <member name="P:SampSharp.GameMode.BaseMode.Instance">
            <summary>
                Gets the instance.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.BaseMode" /> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SampSharp.GameMode.BaseMode"/> class.
            </summary>
            <param name="redirectConsole">If true, all console output will be redirected to the server log.</param>
        </member>
        <member name="P:SampSharp.GameMode.BaseMode.Controllers">
            <summary>
                Gets the collection of controllers loaded.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.BaseMode.Services">
            <summary>
                Gets the <see cref="T:SampSharp.GameMode.GameModeServiceContainer" /> holding all the service providers attached to the game mode.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AutoloadControllersForAssembly(System.Reflection.Assembly)">
            <summary>
            Autoloads the controllers in the specified assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.LoadControllers(SampSharp.GameMode.Controllers.ControllerCollection)">
            <summary>
                Loads all controllers into the given ControllerCollection.
            </summary>
            <param name="controllers">The collection to load the default controllers into.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.ActorController">
            <summary>
                A controller processing all actor actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ActorController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this <see cref="T:SampSharp.GameMode.Controllers.IEventListener" /> wants to listen to.
            </summary>
            <param name="gameMode">An instance of the <see cref="T:SampSharp.GameMode.BaseMode" /> currently running.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ActorController.RegisterTypes">
            <summary>
                Registers types this <see cref="T:SampSharp.GameMode.Controllers.ITypeProvider" /> requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.CommandController">
            <summary>
                A controller processing all commands.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Controllers.CommandController.CommandsManager">
            <summary>
                Gets or sets the commands manager.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.CommandController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this <see cref="T:SampSharp.GameMode.Controllers.GlobalObjectController" /> wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.CommandController.RegisterServices(SampSharp.GameMode.BaseMode,SampSharp.GameMode.GameModeServiceContainer)">
            <summary>
                Registers the services this controller provides.
            </summary>
            <param name="gameMode">The game mode.</param>
            <param name="serviceContainer">The service container.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.ControllerAttribute">
            <summary>
            Indicates the controller this attribute was attached to should automatically be loaded.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.ControllerCollection">
            <summary>
                Represents a list of <see cref="T:SampSharp.GameMode.Controllers.IController" /> instances.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for this collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for this collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Add(SampSharp.GameMode.Controllers.IController)">
            <summary>
                Adds a <see cref="T:SampSharp.GameMode.Controllers.IController" /> to this collection.
            </summary>
            <param name="controller">The <see cref="T:SampSharp.GameMode.Controllers.IController" /> to add to this collection.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Override(SampSharp.GameMode.Controllers.IController)">
            <summary>
                Adds a <see cref="T:SampSharp.GameMode.Controllers.IController" /> to this collection and remove controllers it overrides.
            </summary>
            <param name="controller">The <see cref="T:SampSharp.GameMode.Controllers.IController" /> to add to this collection.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Remove(SampSharp.GameMode.Controllers.IController)">
            <summary>
                Removes a <see cref="T:SampSharp.GameMode.Controllers.IController" /> from this collection.
            </summary>
            <param name="controller">The <see cref="T:SampSharp.GameMode.Controllers.IController" /> to remove from this collection.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Remove``1">
            <summary>
                Removes all <see cref="T:SampSharp.GameMode.Controllers.IController" /> instances of the given type from this collection.
            </summary>
            <typeparam name="T">The type to remove from this collection.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Get``1">
            <summary>
                Get the first instance of <see cref="T:SampSharp.GameMode.Controllers.IController" /> of the given type.
            </summary>
            <typeparam name="T">The type of <see cref="T:SampSharp.GameMode.Controllers.IController" /> to find.</typeparam>
            <returns>The found instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.DelayController">
            <summary>
                A controller processing delays.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.DelayController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this DelayController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.DialogController">
            <summary>
                A controller processing all dialog actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.DialogController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this DialogController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.GangZoneController">
            <summary>
                A controller processing all gang zone actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GangZoneController.RegisterTypes">
            <summary>
                Registers the types.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.GlobalObjectController">
            <summary>
                A controller processing all global-object actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GlobalObjectController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this GlobalObjectController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GlobalObjectController.RegisterTypes">
            <summary>
                Registers types this GlobalObjectController requires the system to use.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GlobalObjectController.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.IController">
            <summary>
                Provides the functionality for a controller.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.IGameServiceProvider">
            <summary>
                Contains the definition of a service provider.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.IGameServiceProvider.RegisterServices(SampSharp.GameMode.BaseMode,SampSharp.GameMode.GameModeServiceContainer)">
            <summary>
                Registers the services this controller provides.
            </summary>
            <param name="gameMode">The game mode.</param>
            <param name="serviceContainer">The service container.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.ITypeProvider">
            <summary>
                Provides the functionality for an <see cref="T:SampSharp.GameMode.Controllers.IController" /> to register types.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ITypeProvider.RegisterTypes">
            <summary>
                Registers types this <see cref="T:SampSharp.GameMode.Controllers.ITypeProvider" /> requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.MenuController">
            <summary>
                A controller processing all menu actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.MenuController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this PlayerController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.PickupController">
            <summary>
                A controller processing all pickup actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PickupController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this TextDrawController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PickupController.RegisterTypes">
            <summary>
                Registers types this PickupController requires the system to use.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PickupController.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.BasePlayerController">
            <summary>
                A controller processing all player actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.BasePlayerController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this PlayerController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.BasePlayerController.RegisterTypes">
            <summary>
                Registers types this PlayerController requires the system to use.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.BasePlayerController.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.PlayerObjectController">
            <summary>
                A controller processing all player-object actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerObjectController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this PlayerObjectController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerObjectController.RegisterTypes">
            <summary>
                Registers types this PlayerObjectController requires the system to use.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerObjectController.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.PlayerTextDrawController">
            <summary>
                A controller processing all player-textdraw actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerTextDrawController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this PlayerTextDrawController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerTextDrawController.RegisterTypes">
            <summary>
                Registers types this PlayerTextDrawController requires the system to use.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerTextDrawController.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.PlayerTextLabelController">
            <summary>
                A controller processing all player text label actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerTextLabelController.RegisterTypes">
            <summary>
                Registers the types.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.SyncController">
            <summary>
                A controller processing sync requests.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Controllers.SyncController.MainThread">
            <summary>
                Gets the main thread.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.SyncController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this SyncController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.SyncController.Start">
            <summary>
                Start waiting for a tick to sync all resync requests.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.SyncController.Flush">
            <summary>
               Runs all awaiting tasks on the current thread.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.TextDrawController">
            <summary>
                A controller processing all textdraw actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TextDrawController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this TextDrawController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TextDrawController.RegisterTypes">
            <summary>
                Registers types this TextDrawController requires the system to use.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TextDrawController.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.TextLabelController">
            <summary>
                A controller processing all text label actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TextLabelController.RegisterTypes">
            <summary>
                Registers the types.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.TimerController">
            <summary>
                A controller processing all timer actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TimerController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this TimerController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.BaseVehicleController">
            <summary>
                A controller processing all vehicle actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.BaseVehicleController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this VehicleController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.BaseVehicleController.RegisterServices(SampSharp.GameMode.BaseMode,SampSharp.GameMode.GameModeServiceContainer)">
            <summary>
                Registers the services this controller provides.
            </summary>
            <param name="gameMode">The game mode.</param>
            <param name="serviceContainer">The service container.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.BaseVehicleController.RegisterTypes">
            <summary>
                Registers types this VehicleController requires the system to use.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.BaseVehicleController.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.IEventListener">
            <summary>
                Provides the functionality for an <see cref="T:SampSharp.GameMode.Controllers.IController" /> to act on events.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.IEventListener.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this <see cref="T:SampSharp.GameMode.Controllers.IEventListener" /> wants to listen to.
            </summary>
            <param name="gameMode">An instance of the <see cref="T:SampSharp.GameMode.BaseMode" /> currently running.</param>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.BodyPart">
            <summary>
                Contains all available body parts.
            </summary>
            <remarks>
                See <see href="http://wiki.sa-mp.com/wiki/BodyParts">http://wiki.sa-mp.com/wiki/BodyParts</see>.
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.Chest">
            <summary>
                The chest.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.Crotch">
            <summary>
                The crotch.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.LeftArm">
            <summary>
                The left arm.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.RightArm">
            <summary>
                The right arm.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.LeftLeg">
            <summary>
                The left leg.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.RightLeg">
            <summary>
                The right leg.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.Head">
            <summary>
                The head.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.CameraMode">
            <summary>
                Contains all camera modes.
            </summary>
            <remarks>
                See <see href="http://wiki.sa-mp.com/wiki/CameraModes">http://wiki.sa-mp.com/wiki/CameraModes</see>.
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.Invalid">
            <summary>
                Invalid mode.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.BehindCar">
            <summary>
                Camera is behind a car.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.FollowPed">
            <summary>
                Camera is behind a Ped.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.SniperAiming">
            <summary>
                Sniper view.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.RocketLauncherAiming">
            <summary>
                Rocket launcher view.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.Fixed">
            <summary>
                Camera is set to a fixed point (e.g. after setting <see cref="P:SampSharp.GameMode.World.BasePlayer.CameraPosition" />)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.FirstPerson">
            <summary>
                Camera is in first person mode (e.g. when looking from inside the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.NormalCar">
            <summary>
                Camera 'normally' behind a car.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.BehindBoat">
            <summary>
                Camera behind a boat.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.CameraWeaponAiming">
            <summary>
                Camera when aiming.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.HeatseekingRocketLauncher">
            <summary>
                Heatseeking rochet launcher view.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.AimingWeapon">
            <summary>
                Aiming a weapon.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.VehicleDriveBy">
            <summary>
                Drive by view.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.HelicopterChaseCam">
            <summary>
                Helicopter chase view.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.CheckpointType">
            <summary>
                Contains all race checkpoint types.
            </summary>
            <remarks>
                See
                <see href="http://wiki.sa-mp.com/wiki/SetPlayerRaceCheckpoint">http://wiki.sa-mp.com/wiki/SetPlayerRaceCheckpoint</see>
                .
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.Normal">
            <summary>
                Normal racecheckpoint. (Normal red cilinder)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.Finish">
            <summary>
                Finish racecheckpoint. (Finish flag in red cilinder)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.Nothing">
            <summary>
                No checkpoint.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.Air">
            <summary>
                Air racecheckpoint. (normal red circle in the air)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.AirFinish">
            <summary>
                Finish air racecheckpoint. (Finish flag in red circle in the air)
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.DialogButton">
            <summary>
                Contains all dialog buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogButton.Right">
            <summary>
                Right button of the dialog.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogButton.Left">
            <summary>
                Left button of the dialog.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.EnterExit">
            <summary>
                Contains all enter/exit garage states.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EnterExit.Exited">
            <summary>
                Has exited garage.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EnterExit.Entered">
            <summary>
                Has entered garage.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ObjectType">
            <summary>
                Contains all object types
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectType.GlobalObject">
            <summary>
                Global object.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectType.PlayerObject">
            <summary>
                Player object.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.DisconnectReason">
            <summary>
                Contains all reasons for a player to disconnect.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DisconnectReason.TimedOut">
            <summary>
                The Player timed out.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DisconnectReason.Left">
            <summary>
                The Player left. (/q(uit) or trough the menu)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DisconnectReason.Kicked">
            <summary>
                The Player was kicked or banned.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ShopName">
            <summary>
                Contains all shopnames.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.PizzaStack">
            <summary>
                The Well Stacked Pizza Co.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.BurgerShot">
            <summary>
                Burger Shot.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.CluckinBell">
            <summary>
                Cluckin' Bell.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation1">
            <summary>
                Ammunation 1.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation2">
            <summary>
                Ammunation 2.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation3">
            <summary>
                Ammunation 3.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation4">
            <summary>
                Ammunation 4.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation5">
            <summary>
                Ammunation 5.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.TextDrawAlignment">
            <summary>
                Contains all textdraw alignments.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawAlignment.Left">
            <summary>
                Align left.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawAlignment.Center">
            <summary>
                Align center.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawAlignment.Right">
            <summary>
                Align right.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.VehicleModelType">
            <summary>
                Contains all vehicle models.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Landstalker">
            <summary>
                Model of a Landstalker.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Bravura">
            <summary>
                Model of a Bravura.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Buffalo">
            <summary>
                Model of a Buffalo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Linerunner">
            <summary>
                Model of a Linerunner.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Perenniel">
            <summary>
                Model of a Perenniel.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sentinel">
            <summary>
                Model of a Sentinel.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Dumper">
            <summary>
                Model of a Dumper.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Firetruck">
            <summary>
                Model of a Firetruck.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Trashmaster">
            <summary>
                Model of a Trashmaster.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Stretch">
            <summary>
                Model of a Stretch.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Manana">
            <summary>
                Model of a Manana.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Infernus">
            <summary>
                Model of a Infernus.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Voodoo">
            <summary>
                Model of a Voodoo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Pony">
            <summary>
                Model of a Pony.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Mule">
            <summary>
                Model of a Mule.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Cheetah">
            <summary>
                Model of a Cheetah.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Ambulance">
            <summary>
                Model of a Ambulance.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Leviathan">
            <summary>
                Model of a Leviathan.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Moonbeam">
            <summary>
                Model of a Moonbeam.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Esperanto">
            <summary>
                Model of a Esperanto.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Taxi">
            <summary>
                Model of a Taxi.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Washington">
            <summary>
                Model of a Washington.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Bobcat">
            <summary>
                Model of a Bobcat.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.MrWhoopee">
            <summary>
                Model of a Mr Whoopee.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.BFInjection">
            <summary>
                Model of a BF Injection.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Hunter">
            <summary>
                Model of a Hunter.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Premier">
            <summary>
                Model of a Premier.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Enforcer">
            <summary>
                Model of a Enforcer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Securicar">
            <summary>
                Model of a Securicar.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Banshee">
            <summary>
                Model of a Banshee.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Predator">
            <summary>
                Model of a Predator.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Bus">
            <summary>
                Model of a Bus.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Rhino">
            <summary>
                Model of a Rhino.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Barracks">
            <summary>
                Model of a Barracks.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Hotknife">
            <summary>
                Model of a Hotknife.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.ArticleTrailer">
            <summary>
                Model of a Article Trailer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Previon">
            <summary>
                Model of a Previon.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Coach">
            <summary>
                Model of a Coach.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Cabbie">
            <summary>
                Model of a Cabbie.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Stallion">
            <summary>
                Model of a Stallion.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Rumpo">
            <summary>
                Model of a Rumpo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.RCBandit">
            <summary>
                Model of a RC Bandit.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Romero">
            <summary>
                Model of a Romero.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Packer">
            <summary>
                Model of a Packer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Monster">
            <summary>
                Model of a Monster.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Admiral">
            <summary>
                Model of a Admiral.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Squallo">
            <summary>
                Model of a Squallo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Seasparrow">
            <summary>
                Model of a Seasparrow.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Pizzaboy">
            <summary>
                Model of a Pizzaboy.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Tram">
            <summary>
                Model of a Tram.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.ArticleTrailer2">
            <summary>
                Model of a Article Trailer 2.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Turismo">
            <summary>
                Model of a Turismo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Speeder">
            <summary>
                Model of a Speeder.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Reefer">
            <summary>
                Model of a Reefer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Tropic">
            <summary>
                Model of a Tropic.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Flatbed">
            <summary>
                Model of a Flatbed.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Yankee">
            <summary>
                Model of a Yankee.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Caddy">
            <summary>
                Model of a Caddy.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Solair">
            <summary>
                Model of a Solair.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.TopfunVanBerkleysRC">
            <summary>
                Model of a Topfun Van Berkleys RC.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Skimmer">
            <summary>
                Model of a Skimmer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.PCJ600">
            <summary>
                Model of a PCJ-600.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Faggio">
            <summary>
                Model of a Faggio.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Freeway">
            <summary>
                Model of a Freeway.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.RCBaron">
            <summary>
                Model of a RC Baron.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.RCRaider">
            <summary>
                Model of a RC Raider.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Glendale">
            <summary>
                Model of a Glendale.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Oceanic">
            <summary>
                Model of a Oceanic.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sanchez">
            <summary>
                Model of a Sanchez.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sparrow">
            <summary>
                Model of a Sparrow.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Patriot">
            <summary>
                Model of a Patriot.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Quad">
            <summary>
                Model of a Quad.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Coastguard">
            <summary>
                Model of a Coastguard.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Dinghy">
            <summary>
                Model of a Dinghy.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Hermes">
            <summary>
                Model of a Hermes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sabre">
            <summary>
                Model of a Sabre.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Rustler">
            <summary>
                Model of a Rustler.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.ZR350">
            <summary>
                Model of a ZR350.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Walton">
            <summary>
                Model of a Walton.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Regina">
            <summary>
                Model of a Regina.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Comet">
            <summary>
                Model of a Comet.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.BMX">
            <summary>
                Model of a BMX.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Burrito">
            <summary>
                Model of a Burrito.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Camper">
            <summary>
                Model of a Camper.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Marquis">
            <summary>
                Model of a Marquis.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Baggage">
            <summary>
                Model of a Baggage.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Dozer">
            <summary>
                Model of a Dozer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Maverick">
            <summary>
                Model of a Maverick.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.SANNewsMaverick">
            <summary>
                Model of a SAN News Maverick.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Rancher">
            <summary>
                Model of a Rancher.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.FBIRancher">
            <summary>
                Model of a FBI Rancher.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Virgo">
            <summary>
                Model of a Virgo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Greenwood">
            <summary>
                Model of a Greenwood.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Jetmax">
            <summary>
                Model of a Jetmax.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.HotringRacer">
            <summary>
                Model of a Hotring Racer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sandking">
            <summary>
                Model of a Sandking.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.BlistaCompact">
            <summary>
                Model of a Blista Compact.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.PoliceMaverick">
            <summary>
                Model of a Police Maverick.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Boxville">
            <summary>
                Model of a Boxville.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Benson">
            <summary>
                Model of a Benson.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Mesa">
            <summary>
                Model of a Mesa.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.RCGoblin">
            <summary>
                Model of a RC Goblin.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.HotringRacer2">
            <summary>
                Model of a Hotring Racer 2.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.HotringRacer3">
            <summary>
                Model of a Hotring Racer 3.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.BloodringBanger">
            <summary>
                Model of a Bloodring Banger.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Rancher2">
            <summary>
                Model of a Rancher 2.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.SuperGT">
            <summary>
                Model of a Super GT.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Elegant">
            <summary>
                Model of a Elegant.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Journey">
            <summary>
                Model of a Journey.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Bike">
            <summary>
                Model of a Bike.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.MountainBike">
            <summary>
                Model of a Mountain Bike.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Beagle">
            <summary>
                Model of a Beagle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Cropduster">
            <summary>
                Model of a Cropduster.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Stuntplane">
            <summary>
                Model of a Stuntplane.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Tanker">
            <summary>
                Model of a Tanker.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Roadtrain">
            <summary>
                Model of a Roadtrain.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Nebula">
            <summary>
                Model of a Nebula.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Majestic">
            <summary>
                Model of a Majestic.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Buccaneer">
            <summary>
                Model of a Buccaneer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Shamal">
            <summary>
                Model of a Shamal.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Hydra">
            <summary>
                Model of a Hydra.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.FCR900">
            <summary>
                Model of a FCR-900.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.NRG500">
            <summary>
                Model of a NRG-500.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.HPV1000">
            <summary>
                Model of a HPV1000.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.CementTruck">
            <summary>
                Model of a Cement Truck.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Towtruck">
            <summary>
                Model of a Towtruck.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Fortune">
            <summary>
                Model of a Fortune.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Cadrona">
            <summary>
                Model of a Cadrona.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.FBITruck">
            <summary>
                Model of a FBITruck.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Willard">
            <summary>
                Model of a Willard.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Forklift">
            <summary>
                Model of a Forklift.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Tractor">
            <summary>
                Model of a Tractor.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.CombineHarvester">
            <summary>
                Model of a Combine Harvester.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Feltzer">
            <summary>
                Model of a Feltzer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Remington">
            <summary>
                Model of a Remington.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Slamvan">
            <summary>
                Model of a Slamvan.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Blade">
            <summary>
                Model of a Blade.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.FreightTrain">
            <summary>
                Model of a Freight Train.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.BrownstreakTrain">
            <summary>
                Model of a Brownstreak Train.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Vortex">
            <summary>
                Model of a Vortex.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Vincent">
            <summary>
                Model of a Vincent.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Bullet">
            <summary>
                Model of a Bullet.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Clover">
            <summary>
                Model of a Clover.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sadler">
            <summary>
                Model of a Sadler.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.FiretruckLA">
            <summary>
                Model of a Firetruck LA.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Hustler">
            <summary>
                Model of a Hustler.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Intruder">
            <summary>
                Model of a Intruder.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Primo">
            <summary>
                Model of a Primo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Cargobob">
            <summary>
                Model of a Cargobob.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Tampa">
            <summary>
                Model of a Tampa.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sunrise">
            <summary>
                Model of a Sunrise.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Merit">
            <summary>
                Model of a Merit.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.UtilityVan">
            <summary>
                Model of a Utility Van.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Nevada">
            <summary>
                Model of a Nevada.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Yosemite">
            <summary>
                Model of a Yosemite.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Windsor">
            <summary>
                Model of a Windsor.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.MonsterA">
            <summary>
                Model of a Monster A.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.MonsterB">
            <summary>
                Model of a Monster B.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Uranus">
            <summary>
                Model of a Uranus.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Jester">
            <summary>
                Model of a Jester.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sultan">
            <summary>
                Model of a Sultan.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Stratum">
            <summary>
                Model of a Stratum.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Elegy">
            <summary>
                Model of a Elegy.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Raindance">
            <summary>
                Model of a Raindance.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.RCTiger">
            <summary>
                Model of a RC Tiger.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Flash">
            <summary>
                Model of a Flash.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Tahoma">
            <summary>
                Model of a Tahoma.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Savanna">
            <summary>
                Model of a Savanna.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Bandito">
            <summary>
                Model of a Bandito.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.FreightFlatTrailerTrain">
            <summary>
                Model of a Freight Flat Trailer Train.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.StreakTrailerTrain">
            <summary>
                Model of a Streak Trailer Train.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Kart">
            <summary>
                Model of a Kart.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Mower">
            <summary>
                Model of a Mower.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Dune">
            <summary>
                Model of a Dune.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Sweeper">
            <summary>
                Model of a Sweeper.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Broadway">
            <summary>
                Model of a Broadway.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Tornado">
            <summary>
                Model of a Tornado.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.AT400">
            <summary>
                Model of a AT400.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.DFT30">
            <summary>
                Model of a DFT-30.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Huntley">
            <summary>
                Model of a Huntley.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Stafford">
            <summary>
                Model of a Stafford.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.BF400">
            <summary>
                Model of a BF400.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Newsvan">
            <summary>
                Model of a Newsvan.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Tug">
            <summary>
                Model of a Tug.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.PetrolTrailer">
            <summary>
                Model of a Petrol Trailer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Emperor">
            <summary>
                Model of a Emperor.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Wayfarer">
            <summary>
                Model of a Wayfarer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Euros">
            <summary>
                Model of a Euros.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Hotdog">
            <summary>
                Model of a Hotdog.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Club">
            <summary>
                Model of a Club.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.FreightBoxTrailerTrain">
            <summary>
                Model of a Freight Box Trailer Train.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.ArticleTrailer3">
            <summary>
                Model of a Article Trailer 3.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Andromada">
            <summary>
                Model of a Andromada.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Dodo">
            <summary>
                Model of a Dodo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.RCCam">
            <summary>
                Model of a RC Cam.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Launch">
            <summary>
                Model of a Launch.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.PoliceCarLSPD">
            <summary>
                Model of a Police Car LSPD.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.PoliceCarSFPD">
            <summary>
                Model of a Police Car SFPD.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.PoliceCarLVPD">
            <summary>
                Model of a Police Car LVPD.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.PoliceRanger">
            <summary>
                Model of a Police Ranger.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Picador">
            <summary>
                Model of a Picador.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.SWAT">
            <summary>
                Model of a SWAT Truck.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Alpha">
            <summary>
                Model of a Alpha.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Phoenix">
            <summary>
                Model of a Phoenix.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.GlendaleShit">
            <summary>
                Model of a Damaged Glendale.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.SadlerShit">
            <summary>
                Model of a Damaged Sadler.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.BaggageTrailerA">
            <summary>
                Model of a Baggage Trailer A.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.BaggageTrailerB">
            <summary>
                Model of a Baggage Trailer B.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.TugStairsTrailer">
            <summary>
                Model of a Tug Stairs Trailer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.Boxville2">
            <summary>
                Model of a Boxville 2.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.FarmTrailer">
            <summary>
                Model of a Farm Trailer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelType.UtilityTrailer">
            <summary>
                Model of a Utility Trailer.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.VehicleCategory">
            <summary>
                Contains all vehicle categories.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Airplane">
            <summary>
                Airplanes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Helicopter">
            <summary>
                Helicopters.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Bike">
            <summary>
                Bikes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Convertible">
            <summary>
                Convertibles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Industrial">
            <summary>
                Industrials.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Lowrider">
            <summary>
                Lowriders.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.OffRoad">
            <summary>
                Off Road.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.PublicService">
            <summary>
                Public Service Vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Saloon">
            <summary>
                Saloons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Sport">
            <summary>
                Sport Vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Station">
            <summary>
                Station Wagons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Boat">
            <summary>
                Boats.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Trailer">
            <summary>
                Trailers.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Unique">
            <summary>
                Unique Vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.RemoteControl">
            <summary>
                RC Vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.TrainTrailer">
            <summary>
                Train trailers.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.BulletHitType">
            <summary>
                Contains all types of things bullets can hit.
            </summary>
            <remarks>
                See <see href="http://wiki.sa-mp.com/wiki/BulletHitTypes">http://wiki.sa-mp.com/wiki/BulletHitTypes</see>.
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.None">
            <summary>
                Hit nothing.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.Player">
            <summary>
                Hit a player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.Vehicle">
            <summary>
                Hit a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.Object">
            <summary>
                Hit an GlobalObject.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.PlayerObject">
            <summary>
                Hit a PlayerObject.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.Bone">
            <summary>
                Contains every bone in a player's body.
            </summary>
            <remarks>
                See <see href="http://wiki.sa-mp.com/wiki/Bones">http://wiki.sa-mp.com/wiki/Bones</see>.
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.Spine">
            <summary>
                The spine.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.Head">
            <summary>
                The head.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.LeftUpperArm">
            <summary>
                The left upper arm.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.RightUpperArm">
            <summary>
                The right upper arm.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.LeftHand">
            <summary>
                The left hand.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.RightHand">
            <summary>
                The right hand.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.LeftThigh">
            <summary>
                The left thigh.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.RightThigh">
            <summary>
                The right thigh.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.LeftFoot">
            <summary>
                The left foot.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.RightFoot">
            <summary>
                The right foot.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.RightCalf">
            <summary>
                The right calf.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.LeftCalf">
            <summary>
                The left calf.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.LeftForearm">
            <summary>
                The left forearm.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.RightForearm">
            <summary>
                The right forearm.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.LeftClavicle">
            <summary>
                The left clavicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.RightClavicle">
            <summary>
                The right clavicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.Neck">
            <summary>
                The neck.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Bone.Jaw">
            <summary>
                The jaw.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.CameraCut">
            <summary>
                Contains all camera cut styles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraCut.Move">
            <summary>
                Move the camera from one point to another.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraCut.Cut">
            <summary>
                Teleport the camera from one point to another.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.CarModType">
            <summary>
                Contains all modification types of vehicles.
            </summary>
            <remarks>
                See <see href="http://wiki.sa-mp.com/wiki/Componentslots">http://wiki.sa-mp.com/wiki/Componentslots</see>.
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Spoiler">
            <summary>
                Car spoiler.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Hood">
            <summary>
                Car hood.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Roof">
            <summary>
                Car roof.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Sideskirt">
            <summary>
                Car sideskirts.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Lamps">
            <summary>
                Car lamps.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Nitro">
            <summary>
                Nitrogen.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Exhaust">
            <summary>
                Car exhaust.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Wheels">
            <summary>
                Car wheels.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Stereo">
            <summary>
                Car stereo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Hydraulics">
            <summary>
                Car hydraulics.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.FrontBumper">
            <summary>
                Front car bumper.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.RearBumper">
            <summary>
                Rear car bumper.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.VentRight">
            <summary>
                Right car vent.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.VentLeft">
            <summary>
                Left car vent.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.DialogStyle">
            <summary>
                Contains all dialog styles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.MessageBox">
            <summary>
                A box with a caption, text and one or two buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.Input">
            <summary>
                A box with a caption, text, an inputbox and one or two buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.List">
            <summary>
                A box with a caption, a bunch of selectable items and one or two buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.Password">
            <summary>
                A box with a caption, text, an password-inputbox and one or two buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.Tablist">
            <summary>
                A box with a caption, a bunch of selectable rows which contain a number of columns and one or two buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.TablistHeaders">
            <summary>
                A box with a caption, a bunch of selectable rows which contain a number of columns with a header and one or two
                buttons.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.EditObjectResponse">
            <summary>
                Contains all object editing responses.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EditObjectResponse.Cancel">
            <summary>
                Editing has been canceled.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EditObjectResponse.Final">
            <summary>
                The current is the final edit sate.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EditObjectResponse.Update">
            <summary>
                The current is a updated edit state.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.FightStyle">
            <summary>
                Contains all fighting styles.
            </summary>
            <remarks>
                See <see href="http://wiki.sa-mp.com/wiki/Fight_styles">http://wiki.sa-mp.com/wiki/Fight_styles</see>.
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Normal">
            <summary>
                Normal fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Boxing">
            <summary>
                Borxing fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Kungfu">
            <summary>
                Kung fu fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Kneehead">
            <summary>
                Kneehead fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Grabkick">
            <summary>
                Grabkick fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Elbow">
            <summary>
                Elbow fighting style.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.Keys">
            <summary>
                Contains all detectable keys.
            </summary>
            <remarks>
                See <see href="http://wiki.sa-mp.com/wiki/Keys">http://wiki.sa-mp.com/wiki/Keys</see>.
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Action">
            <summary>
                The action key. (Default: Tab, onfoot. ALT GR / LCTRL / NUM 0, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Crouch">
            <summary>
                The crouch key. (Default: C, onfoot, H / CAPSLOCK, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Fire">
            <summary>
                The fire key. (Default: LCTRL / LMB, onfoot. LALT, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Sprint">
            <summary>
                The sprint key. (Default: SPACE, onfoot. W, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.SecondaryAttack">
            <summary>
                Secondary attack key. (Default: ENTER, onfoot. ENTER, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Jump">
            <summary>
                Jump key. (Default: LSHIFT, onfoot)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.LookRight">
            <summary>
                Look right key. (Default: E, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Handbrake">
            <summary>
                Handbrake key. (Default: RMB, onfoot. SPACE, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Aim">
            <summary>
                Aim key. (Default: RMB, onfoot. SPACE, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.LookLeft">
            <summary>
                Look left key. (Default: Q, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Submission">
            <summary>
                Submission key. (Default: NUM 1 / MMB, onfoot. 2 / NUM +, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.LookBehind">
            <summary>
                Look behind key, look left + look right combined. (Default: NUM 1 / MMB, onfoot. 2, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Walk">
            <summary>
                Walk key. (Default: LALT, onfoot)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.AnalogUp">
            <summary>
                Analog up key. (Default: NUM 8)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.AnalogDown">
            <summary>
                Analog down key. (Default: NUM 2)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.AnalogLeft">
            <summary>
                Analog left key. (Default: NUM 4)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.AnalogRight">
            <summary>
                Analog right key. (Default: NUM 6)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Yes">
            <summary>
                Yes key. (Default: Y)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.No">
            <summary>
                No key. (Default: N)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.CtrlBack">
            <summary>
                Controll back key. (Default: H)
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.MapIconType">
            <summary>
                Contains all map icon styles.
            </summary>
            <remarks>
                See <see href="http://wiki.sa-mp.com/wiki/MapIconStyle">http://wiki.sa-mp.com/wiki/MapIconStyle</see>.
            </remarks>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.MapIconType.Local">
            <summary>
                Displays in the player's local are.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.MapIconType.Global">
            <summary>
                Displays always.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.MapIconType.LocalCheckPoint">
            <summary>
                Displays in the player's local area and has a checkpoint marker.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.MapIconType.GlobalCheckPoint">
            <summary>
                Displays always and has a checkpoint marker.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ObjectMaterialSize">
            <summary>
                Contains all object material sizes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X32X32">
            <summary>
                32 x 32
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X64X32">
            <summary>
                64 x 32
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X64X64">
            <summary>
                64 x 64
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X128X32">
            <summary>
                128 x 32
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X128X64">
            <summary>
                128 x 64
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X128X128">
            <summary>
                128 x 128
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X256X32">
            <summary>
                256 x 32
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X256X64">
            <summary>
                256 x 64
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X256X128">
            <summary>
                256 x 128
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X256X256">
            <summary>
                256 x 256
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X512X64">
            <summary>
                512 x 64
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X512X128">
            <summary>
                512 x 128
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X512X256">
            <summary>
                512 x 256
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X512X512">
            <summary>
                512 x 512
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ObjectMaterialTextAlign">
            <summary>
                Contains all object material alignments.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialTextAlign.Left">
            <summary>
                Align left.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialTextAlign.Center">
            <summary>
                Align center.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialTextAlign.Right">
            <summary>
                Align right.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerClickSource">
            <summary>
                Contains all player click sources.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerClickSource.Scoreboard">
            <summary>
                Clicked the player on the scoreboard.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerMarkersMode">
            <summary>
                Contains all PlayerMarker modes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerMarkersMode.Off">
            <summary>
                No makers.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerMarkersMode.Global">
            <summary>
                All markers.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerMarkersMode.Streamed">
            <summary>
                All markers within the streamed area.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerRecordingType">
            <summary>
                Contains all PlayerRecording types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerRecordingType.None">
            <summary>
                Nothing.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerRecordingType.Driver">
            <summary>
                As a driver.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerRecordingType.OnFoot">
            <summary>
                As a pedestrian
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerState">
            <summary>
                Contains all player states.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.None">
            <summary>
                No state.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.OnFoot">
            <summary>
                Player is on foot.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Driving">
            <summary>
                Player is driving a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Passenger">
            <summary>
                Player is in a vehicle as passenger.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.ExitVehicle">
            <summary>
                Player is exiting a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.EnterVehicleDriver">
            <summary>
                Player is entering a vehicle as driver.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.EnterVehiclePassenger">
            <summary>
                Player is entering a vehicle as passenger.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Wasted">
            <summary>
                Player is dead.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Spawned">
            <summary>
                Player has spawned.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Spectating">
            <summary>
                Player is spectating.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ServerVarType">
            <summary>
                Contains all server variable types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ServerVarType.None">
            <summary>
                Var does not exist.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ServerVarType.Int">
            <summary>
                Var as an integer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ServerVarType.String">
            <summary>
                Var is a string.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ServerVarType.Float">
            <summary>
                Var is a float.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.SpecialAction">
            <summary>
                Contains all special actions.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.None">
            <summary>
                Nothing.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Duck">
            <summary>
                Player is ducking.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Usejetpack">
            <summary>
                Player is using a jetpack.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.EnterVehicle">
            <summary>
                Player is entering a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.ExitVehicle">
            <summary>
                Player is leaving a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Dance1">
            <summary>
                Player is dancing. (Style 1)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Dance2">
            <summary>
                Player is dancing. (Style 2)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Dance3">
            <summary>
                Player is dancing. (Style 3)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Dance4">
            <summary>
                Player is dancing. (Style 4)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.HandsUp">
            <summary>
                Player is holding his hands up.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.UseCellphone">
            <summary>
                Player is using a cellphone.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Sitting">
            <summary>
                Player is sitting.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.StopUseCellphone">
            <summary>
                Player stops using a cellphone.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.DrinkBeer">
            <summary>
                Player is drinking a beer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.SmokeCiggy">
            <summary>
                Player is smokking a cigarette.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.DrinkWine">
            <summary>
                Player is drinking whine.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.DrinkSprunk">
            <summary>
                Player is drinking sprunk.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Cuffed">
            <summary>
                Player is cuffed.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Carry">
            <summary>
                PLayer is carrying.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.SpectateMode">
            <summary>
                Contains all specating modes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpectateMode.Normal">
            <summary>
                Normal spectating mode.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpectateMode.Fixed">
            <summary>
                Player is looking from a fixed point.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpectateMode.Side">
            <summary>
                Attached to the side.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.TextDrawFont">
            <summary>
                Contains all fonts.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.Diploma">
            <summary>
                Font 0, also known as Diploma.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.Normal">
            <summary>
                Font 1, also known as Normal.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.Slim">
            <summary>
                Font 2, also known as Slim.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.Pricedown">
            <summary>
                Font 3, also known as Pricedown.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.DrawSprite">
            <summary>
                Font used to draw sprites.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.PreviewModel">
            <summary>
                Font used to draw model previews.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.VehicleModelInfoType">
            <summary>
                Contains all vehiclemodel info types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.Size">
            <summary>
                Vehicle size
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.FrontSeat">
            <summary>
                Position of the front seat. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.RearSeat">
            <summary>
                Position of the rear seat. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.PetrolCap">
            <summary>
                Position of the fuel cap. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.WheelsFront">
            <summary>
                Position of the front wheels. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.WheelsRear">
            <summary>
                Position of the rear wheels. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.WheelsMiddle">
            <summary>
                Position of the middle wheels, applies to vehicles with 3 axes. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.FrontBumperZ">
            <summary>
                Height of the front bumper. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.RearBumperZ">
            <summary>
                Height of the rear bumper. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.VehicleParameterValue">
            <summary>
                Contains all vehicle param values.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleParameterValue.Unset">
            <summary>
                Value has not been set.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleParameterValue.Off">
            <summary>
                Value is off.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleParameterValue.On">
            <summary>
                Value is on.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.Weapon">
            <summary>
                Contains all weapons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.None">
            <summary>
                No weapon.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Unarmed">
            <summary>
                No weapon.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Brassknuckle">
            <summary>
                Brask knuckles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Golfclub">
            <summary>
                Golf Club.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Nitestick">
            <summary>
                Nitestick.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Knife">
            <summary>
                Knife.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Bat">
            <summary>
                Baseball Bat.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Shovel">
            <summary>
                Shovel.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Poolstick">
            <summary>
                Pool Cue.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Katana">
            <summary>
                Katana (sword).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Chainsaw">
            <summary>
                Chainsaw
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.DoubleEndedDildo">
            <summary>
                Double-ended Dildo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Dildo">
            <summary>
                Dildo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Vibrator">
            <summary>
                Vibrator.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.SilverVibrator">
            <summary>
                Silver Vibrator.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Flower">
            <summary>
                Flowers.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Cane">
            <summary>
                Cane.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Grenade">
            <summary>
                Grenade.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Teargas">
            <summary>
                Tear Gas.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Moltov">
            <summary>
                Molotov Cockail.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Colt45">
            <summary>
                9mm Colt45 pistol.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Silenced">
            <summary>
                Silenced 9mm Colt45 pistol.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Deagle">
            <summary>
                DesertEagle pistol.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Shotgun">
            <summary>
                Shotgun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Sawedoff">
            <summary>
                Sawnoff Shotgun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.CombatShotgun">
            <summary>
                Combat Shotgun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Uzi">
            <summary>
                Micro SMG/Uzi.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.MP5">
            <summary>
                MP5
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.AK47">
            <summary>
                AK-47.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.M4">
            <summary>
                M4.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Tec9">
            <summary>
                Tec-9.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Rifle">
            <summary>
                Country Rifle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Sniper">
            <summary>
                Sniper Rifle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.RocketLauncher">
            <summary>
                RPG.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.HeatSeeker">
            <summary>
                Heat Seeking Rocket.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.FlameThrower">
            <summary>
                Flamethrower.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Minigun">
            <summary>
                Minigun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.SatchelCharge">
            <summary>
                Satchel Charge.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Detonator">
            <summary>
                Detonator.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Spraycan">
            <summary>
                Spraycan.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.FireExtinguisher">
            <summary>
                Fire Extinguisher.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Camera">
            <summary>
                Camera.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.NightVisionGoggles">
            <summary>
                Night Vision Goggles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.ThermalGoggles">
            <summary>
                Thermal Goggles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Parachute">
            <summary>
                Parachute.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.FakePistol">
            <summary>
                ???
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Vehicle">
            <summary>
                Vehicle
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.HelicopterBlades">
            <summary>
                Helicopter Blades.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Explosion">
            <summary>
                Explosion.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Drown">
            <summary>
                Drowned.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Collision">
            <summary>
                Collision
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Connect">
            <summary>
                Connected. (use with deathmessages)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Disconnect">
            <summary>
                Disconnected. (use with deathmessages)
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.WeaponSkill">
            <summary>
                Contains all weapon skills types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.Pistol">
            <summary>
                Pistol skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.PistolSilenced">
            <summary>
                Silenced pistol skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.DesertEagle">
            <summary>
                Desert eagle skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.Shotgun">
            <summary>
                Shotgun skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.SawnoffShotgun">
            <summary>
                Sawn-off shotgun skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.Spas12Shotgun">
            <summary>
                Combat shotgun skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.MicroUzi">
            <summary>
                Micro uzi skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.MP5">
            <summary>
                MP5 skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.AK47">
            <summary>
                AK47 skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.M4">
            <summary>
                M4 skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.SniperRifle">
            <summary>
                Sniper rifle skills.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.WeaponState">
            <summary>
                Contains all weapon states.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.Unknown">
            <summary>
                Unknown state.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.NoBullets">
            <summary>
                Weapon is out of bullets.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.LastBullet">
            <summary>
                Last bullet in gun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.MoreBullets">
            <summary>
                More bullets in gun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.Reloading">
            <summary>
                Weapon is reloading.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.Dialog">
            <summary>
                Represents a SA:MP dialog.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.All">
            <summary>
                Gets all opened dialogs.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.Hide(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Hides all dialogs for the specified <paramref name="player" />.
            </summary>
            <param name="player">The Player to hide all dialogs from.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.GetOpenDialog(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Gets the dialog currently being shown to the specified <paramref name="player" />.
            </summary>
            <param name="player">The player whose dialog to get.</param>
            <returns>The dialog currently being shown to the specified <paramref name="player" />.</returns>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Style">
            <summary>
                Gets or sets the style.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Caption">
            <summary>
                Gets or sets the caption.
            </summary>
            <remarks>
                The length of the caption can not exceed more than 64 characters before it
                starts to cut off.
            </remarks>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Info">
            <summary>
                Gets the info displayed in the box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Button1">
            <summary>
                Gets or sets the text on the left button.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Button2">
            <summary>
                Gets or sets the text on the right button.
            </summary>
            <remarks>
                Leave it blank to hide it.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.Display.Dialog.Response">
            <summary>
                Occurs when a player responds to a dialog by either clicking a button, pressing ENTER/ESC or double-clicking a list
                item.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.Show(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Shows the dialog box to a Player.
            </summary>
            <param name="player">The Player to show the dialog to.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.ShowAsync(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Shows the dialog box to a Player asynchronously.
            </summary>
            <param name="player">The Player to show the dialog to.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.OnResponse(SampSharp.GameMode.Events.DialogResponseEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.Display.Dialog.Response" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DialogResponseEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:SampSharp.GameMode.Display.InputDialog">
            <summary>
                Represents an input dialog.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.InputDialog.#ctor(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
                Initializes a new instance of the Dialog class.
            </summary>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="message">The text to display in the main dialog. Use \n to start a new line and \t to tabulate.</param>
            <param name="isPassword">if set to <c>true</c> the input will be hidden on the user's screen.</param>
            <param name="button1">The text on the left button.</param>
            <param name="button2">The text on the right button. Leave it blank to hide it.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.InputDialog.Info">
            <summary>
                Gets the Info displayed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.InputDialog.Message">
            <summary>
                Gets or sets the message in the dialog.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.ListDialog">
            <summary>
                Represnets a list dialog.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.ListDialog.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the Dialog class.
            </summary>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="button1">The text on the left button.</param>
            <param name="button2">The text on the right button. Leave it blank to hide it.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.ListDialog.Items">
            <summary>
                Gets the list items.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.ListDialog.AddItem(System.String)">
            <summary>
            Adds the specified item to the list items.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.ListDialog.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a collection of items to the list items.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <see cref="!:items"/> is null.</exception>
        </member>
        <member name="P:SampSharp.GameMode.Display.ListDialog.Info">
            <summary>
                Gets the info displayed in the box.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.Menu">
            <summary>
                Represents a SA:MP menu.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.#ctor(System.String,SampSharp.GameMode.Vector2,System.Collections.Generic.IList{SampSharp.GameMode.Display.MenuColumn},System.Collections.Generic.IList{SampSharp.GameMode.Display.MenuRow})">
            <summary>
                Initializes a new instance of the Menu class.
            </summary>
            <param name="title">The title of the menu.</param>
            <param name="position">The position of the menu on the screen.</param>
            <param name="columns">The columns to display in the menu.</param>
            <param name="rows">The rows to display in the menu.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Id">
            <summary>
                Gets the Identity of this <see cref="T:SampSharp.GameMode.World.IIdentifiable" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="F:SampSharp.GameMode.Display.Menu.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.Menu.Max">
            <summary>
                Maximum number of menus which can exist.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Title">
            <summary>
                Gets the title.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Position">
            <summary>
                Gets the position.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Viewers">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> of <see cref="T:SampSharp.GameMode.World.BasePlayer" /> instances which are viewing this
                instance.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Columns">
            <summary>
                Gets a collection of columns.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Rows">
            <summary>
                Gets a collection of rows.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.Display.Menu.Exit">
            <summary>
                Occurs when this <see cref="T:SampSharp.GameMode.Display.Menu" /> was exited.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.Display.Menu.Response">
            <summary>
                Occurs when there has been responded to this <see cref="T:SampSharp.GameMode.Display.Menu" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.Show(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Show this <see cref="T:SampSharp.GameMode.Display.Menu" /> to the specified <paramref name="player" />.
            </summary>
            <param name="player">The player to show this menu to.</param>
            <returns>True when successful; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.Hide(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Hides this <see cref="T:SampSharp.GameMode.Display.Menu" /> for the specified <paramref name="player" />.
            </summary>
            <param name="player">The player to hide this menu for.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.HideForAll">
            <summary>
                Hides this <see cref="T:SampSharp.GameMode.Display.Menu" /> for all viewers.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.OnExit(SampSharp.GameMode.World.BasePlayer,System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.Display.Menu.Exit" /> event.
            </summary>
            <param name="player">The player.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.OnResponse(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.MenuRowEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.Display.Menu.Response" /> event.
            </summary>
            <param name="player">The player.</param>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.MenuRowEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SampSharp.GameMode.Display.MessageDialog">
            <summary>
                Represents a message dialog.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.MessageDialog.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the MessageDialog class.
            </summary>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="message">The text to display in the main dialog. Use \n to start a new line and \t to tabulate.</param>
            <param name="button1">The text on the left button.</param>
            <param name="button2">The text on the right button. Leave it blank to hide it.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.MessageDialog.Info">
            <summary>
                Gets the Info displayed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.MessageDialog.Message">
            <summary>
                Gets or sets the message in the dialog.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.PlayerTextDraw">
            <summary>
                Represents a player-textdraw.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.PlayerTextDraw.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.PlayerTextDraw.Max">
            <summary>
                Maximum number of player text draws which can exist.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.Display.PlayerTextDraw.Click">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayerTextDraw(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs)" /> is
                being called.
                This callback is called when a player clicks on a player-textdraw.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.OnClick(SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.Display.PlayerTextDraw.Click" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.#ctor(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.PlayerTextDraw" /> class.
            </summary>
            <param name="owner">The owner of the player-textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Vector2,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.PlayerTextDraw" /> class.
            </summary>
            <param name="owner">The owner of the player-textdraw.</param>
            <param name="position">The position of the player-textdraw on the screen.</param>
            <param name="text">The text of the player-textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Vector2,System.String,SampSharp.GameMode.Definitions.TextDrawFont)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.PlayerTextDraw" /> class.
            </summary>
            <param name="owner">The owner of the player-textdraw.</param>
            <param name="position">The position of the player-textdraw on the screen.</param>
            <param name="text">The text of the player-textdraw.</param>
            <param name="font">The <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont" /> of this textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Vector2,System.String,SampSharp.GameMode.Definitions.TextDrawFont,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.PlayerTextDraw" /> class.
            </summary>
            <param name="owner">The owner of the player-textdraw.</param>
            <param name="position">The position of the player-textdraw on the screen.</param>
            <param name="text">The text of the player-textdraw.</param>
            <param name="font">The <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont" /> of the player-textdraw.</param>
            <param name="foreColor">The foreground <see cref="T:SampSharp.GameMode.SAMP.Color" /> of the player-textdraw.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.IsApplyFixes">
            <summary>
                Gets or sets whether SA-MP fixes should be applied.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.AutoDestroy">
            <summary>
                Gets or sets whether the textdraw should automatically be destroyed when hidden.
            </summary>
            <remarks>The textdraw will automatically be recreated once .Show is called.</remarks>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Alignment">
            <summary>
                Gets or sets the <see cref="T:SampSharp.GameMode.Definitions.TextDrawAlignment" /> of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.BackColor">
            <summary>
                Gets or sets the background <see cref="T:SampSharp.GameMode.SAMP.Color" /> of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.ForeColor">
            <summary>
                Gets or sets the foreground <see cref="T:SampSharp.GameMode.SAMP.Color" /> of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.BoxColor">
            <summary>
                Gets or sets the box <see cref="T:SampSharp.GameMode.SAMP.Color" /> of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Font">
            <summary>
                Gets or sets the <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont" /> to use in this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.LetterSize">
            <summary>
                Gets or sets the size of the letters of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Outline">
            <summary>
                Gets or sets the outline size of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Proportional">
            <summary>
                Gets or sets whether to proporionally space the characters of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Shadow">
            <summary>
                Gets or sets the shadow-size of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Text">
            <summary>
                Gets or sets the text of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Position">
            <summary>
                Gets or sets the position of this player-textdraw on the screen.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Width">
            <summary>
                Gets or sets the width of this player-textdraw's box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Height">
            <summary>
                Gets or sets the height of this player-textdraw's box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.UseBox">
            <summary>
                Gets or sets whether to draw a box behind the player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Selectable">
            <summary>
                Gets or sets whether this player-textdraw is selectable.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewModel">
            <summary>
                Gets or sets the preview model to draw on this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewRotation">
            <summary>
                Gets or sets the rotation of this player-textdraw's preview model.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewZoom">
            <summary>
                Gets or sets the zoom level of this player-textdraw's preview model.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewPrimaryColor">
            <summary>
                Gets or sets the primary vehicle color of this player-textdraw's preview model.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewSecondaryColor">
            <summary>
                Gets or sets the secondary vehicle color of this player-textdraw's preview model.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Show">
            <summary>
                Displays this player-textdraw to the <see cref="P:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Owner" /> of this textdraw.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Hide">
            <summary>
                Hides this player-textdraw.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Refresh">
            <summary>
                Recreates this player-textdraw with all set properties. Called when changing the location on the screen.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.FixString(System.String)">
            <summary>
                Fixes a string so no SA-MP bugs will occur during application.
            </summary>
            <param name="input">The input string.</param>
            <returns>The fixed string</returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Update">
            <summary>
                Updates this textdraw on the client's screen.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.TablistDialog">
            <summary>
                Represents a tablist (table) dialog.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
                Initializes a new instance of the Dialog class.
            </summary>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="columnCount">The column count.</param>
            <param name="button1">The text on the left button.</param>
            <param name="button2">The text on the right button. Leave it blank to hide it.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
                Initializes a new instance of the Dialog class.
            </summary>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="columns">The columns.</param>
            <param name="button1">The text on the left button.</param>
            <param name="button2">The text on the right button. Leave it blank to hide it.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.TablistDialog.Info">
            <summary>
                Gets the info displayed in the box.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.Add(System.String[])">
            <summary>
                Adds a row with the specified cells.
            </summary>
            <param name="cells">The cells of the row.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">
                The <see cref="T:System.Collections.Generic.ICollection`1" /> is
                read-only.
            </exception>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">
                The <see cref="T:System.Collections.Generic.ICollection`1" /> is
                read-only.
            </exception>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
                true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />;
                otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.CopyTo(System.Collections.Generic.IEnumerable{System.String}[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
                <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source
                <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from
                <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
                true if <paramref name="item" /> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if
                <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">
                The <see cref="T:System.Collections.Generic.ICollection`1" /> is
                read-only.
            </exception>
        </member>
        <member name="P:SampSharp.GameMode.Display.TablistDialog.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
                The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:SampSharp.GameMode.Display.TablistDialog.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
                true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.IndexOf(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <returns>
                The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.Insert(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in the
                <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:SampSharp.GameMode.Display.TablistDialog.RemoveAt(System.Int32)">
            <summary>
                Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in the
                <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="P:SampSharp.GameMode.Display.TablistDialog.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <returns>
                The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in the
                <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">
                The property is set and the
                <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
        </member>
        <member name="T:SampSharp.GameMode.Display.TextDraw">
            <summary>
                Represents a textdraw.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.TextDraw.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.TextDraw.Max">
            <summary>
                Maximum number of text draws which can exist.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.Display.TextDraw.Click">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Events.ClickTextDrawEventArgs)" /> is being called.
                This callback is called when a player clicks on a textdraw or cancels the select mode(ESC).
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.OnClick(SampSharp.GameMode.Events.ClickTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.Display.TextDraw.Click" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ClickTextDrawEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.TextDraw" /> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.#ctor(SampSharp.GameMode.Vector2,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.TextDraw" /> class.
            </summary>
            <param name="position">The position of the textdraw on the screen.</param>
            <param name="text">The text of the textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.#ctor(SampSharp.GameMode.Vector2,System.String,SampSharp.GameMode.Definitions.TextDrawFont)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.TextDraw" /> class.
            </summary>
            <param name="position">The position of the textdraw on the screen.</param>
            <param name="text">The text of the textdraw.</param>
            <param name="font">The <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont" /> of the textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.#ctor(SampSharp.GameMode.Vector2,System.String,SampSharp.GameMode.Definitions.TextDrawFont,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.TextDraw" /> class.
            </summary>
            <param name="position">The position of the textdraw on the screen.</param>
            <param name="text">The text of the textdraw.</param>
            <param name="font">The <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont" /> of the textdraw.</param>
            <param name="foreColor">The foreground <see cref="T:SampSharp.GameMode.SAMP.Color" /> of the textdraw.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.IsApplyFixes">
            <summary>
                Gets or sets whether SA-MP fixes should be applied.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Alignment">
            <summary>
                Gets or sets the <see cref="T:SampSharp.GameMode.Definitions.TextDrawAlignment" /> of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.BackColor">
            <summary>
                Gets or sets the background <see cref="T:SampSharp.GameMode.SAMP.Color" /> of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.ForeColor">
            <summary>
                Gets or sets the foreground <see cref="T:SampSharp.GameMode.SAMP.Color" /> of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.BoxColor">
            <summary>
                Gets or sets the box <see cref="T:SampSharp.GameMode.SAMP.Color" /> of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Font">
            <summary>
                Gets or sets the <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont" /> to use in this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.LetterSize">
            <summary>
                Gets or sets the size of the letters of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Outline">
            <summary>
                Gets or sets the outline size of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Proportional">
            <summary>
                Gets or sets whether to proporionally space the characters of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Shadow">
            <summary>
                Gets or sets the shadow-size of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Text">
            <summary>
                Gets or sets the text of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Position">
            <summary>
                Gets or sets the position of this textdraw on the screen.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Width">
            <summary>
                Gets or sets the width of this textdraw's box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Height">
            <summary>
                Gets or sets the height of this textdraw's box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.UseBox">
            <summary>
                Gets or sets whether to draw a box behind the textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Selectable">
            <summary>
                Gets or sets whether this textdraw is selectable.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewModel">
            <summary>
                Gets or sets the previewmodel to draw on this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewRotation">
            <summary>
                Gets or sets the rotation of this textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewZoom">
            <summary>
                Gets or sets the zoom level of this textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewPrimaryColor">
            <summary>
                Gets or sets the primary vehicle color of this textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewSecondaryColor">
            <summary>
                Gets or sets the secondary vehicle color of this textdraw's previewmodel.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Show">
            <summary>
                Displays this textdraw to all players.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Show(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Display this textdraw to the given <paramref name="player" />.
            </summary>
            <param name="player">The player to display this textdraw to.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Hide">
            <summary>
                Hides this textdraw.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Hide(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Hides this textdraw for the given <paramref name="player" />.
            </summary>
            <param name="player">The player to hide this textdraw from.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Refresh">
            <summary>
                Recreates this textdraw with all set properties. Called when changing the location on the screen.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.FixString(System.String)">
            <summary>
                Fixes a string so no SA-MP bugs will occur during application.
            </summary>
            <param name="input">The input string.</param>
            <returns>The fixed string</returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.UpdateClients">
            <summary>
                Updates this textdraw on all client's screens.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.MenuColumn">
            <summary>
                Represents a column in a <see cref="T:SampSharp.GameMode.Display.Menu" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.MenuColumn.#ctor(System.String,System.Single)">
            <summary>
                Initializes a new instance of the MenuColumn class.
            </summary>
            <param name="caption">The caption of the column.</param>
            <param name="width">The width of the column.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.MenuColumn.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the menuColumn structure.
            </summary>
            <param name="width">The width of the column.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuColumn.Caption">
            <summary>
                Gets or sets the caption of this column.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuColumn.Width">
            <summary>
                Gets or sets the width if this column.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.MenuRow">
            <summary>
                Represents a row in a <see cref="T:SampSharp.GameMode.Display.Menu" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.MenuRow.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.MenuRow" /> class.
            </summary>
            <param name="column1Text">The text in the first column.</param>
            <param name="disabled">Whether this row is disabled.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.MenuRow.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.MenuRow" /> class.
            </summary>
            <param name="column1Text">The text in the text displayed in the first column.</param>
            <param name="column2Text">The text in the text displayed in the second column.</param>
            <param name="disabled">Whether this row is disabled.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuRow.Column1Text">
            <summary>
                Gets the text displayed in the first column.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuRow.Column2Text">
            <summary>
                Gets the text displayed in the second column.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuRow.Disabled">
            <summary>
                Gets whether this row is disabled.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickPlayerTextDraw" />,
                <see cref="E:SampSharp.GameMode.Display.PlayerTextDraw.Click" /> or
                <see cref="E:SampSharp.GameMode.World.BasePlayer.ClickPlayerTextDraw" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Display.PlayerTextDraw)">
            <summary>
                Initializes a new instance of the ClickPlayerTextDrawEventArgs class.
            </summary>
            <param name="player">The player.</param>
            <param name="playerTextDraw">The player text draw.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs.Player">
            <summary>
                Gets the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs.PlayerTextDraw">
            <summary>
                Gets the text draw.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.EditGlobalObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEditGlobalObject" />, <see cref="E:SampSharp.GameMode.World.BasePlayer.EditGlobalObject" /> or
                <see cref="E:SampSharp.GameMode.World.GlobalObject.Edited" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.EditGlobalObjectEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.World.GlobalObject,SampSharp.GameMode.Definitions.EditObjectResponse,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.EditGlobalObjectEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="object">The global object.</param>
            <param name="response">The response.</param>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditGlobalObjectEventArgs.Player">
            <summary>
                Gets the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditGlobalObjectEventArgs.Object">
            <summary>
                Gets the global object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditGlobalObjectEventArgs.EditObjectResponse">
            <summary>
                Gets the edit object response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditGlobalObjectEventArgs.Rotation">
            <summary>
                Gets the rotation.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.CancelableEventArgs">
            <summary>
                Provides data for events in <see cref="T:SampSharp.GameMode.SAMP.KeyHandlerSet" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.CancelableEventArgs.IsCanceled">
            <summary>
                Gets a value indicating whether this event should not be trigger events with lower priorities.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.CommandTextEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerCommandText" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.CommandText" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.CommandTextEventArgs.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.CommandTextEventArgs" /> class.
            </summary>
            <param name="text">The text sent by the player.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.CommandTextEventArgs.Text">
            <summary>
                Gets the text sent by the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.CommandTextEventArgs.Success">
            <summary>
                Gets or sets whether this command has been handled successfully.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.ExceptionEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.CallbackException" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.ExceptionEventArgs" /> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.ExceptionEventArgs.Exception">
            <summary>
                Gets the exception.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.ExceptionEventArgs.Handled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:SampSharp.GameMode.Events.ExceptionEventArgs" /> is handled.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.RequestSpawnEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerRequestSpawn" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.RequestSpawn" /> event.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.RequestSpawnEventArgs.PreventSpawning">
            <summary>
                Gets or sets whether the player is prevented from spawning.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.SirenStateEventArgs">
            <summary>
                Provided data for the x or y event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.SirenStateEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.SirenStateEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="newState">if set to <c>true</c> the siren is turned on in the new state.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.SirenStateEventArgs.NewState">
            <summary>
                Gets a value indicating whether the siren is turned on in the new state.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.SpawnEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSpawned" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.Spawned" /> event.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.SpawnEventArgs.ReturnToClassSelection">
            <summary>
                Gets or sets whether the player will be forced back to the class selection when they next spawn.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerUpdateEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerUpdate" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.Update" /> event.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerUpdateEventArgs.PreventPropagation">
            <summary>
                Gets or sets whether to stop syncing the update to other players.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.TrailerEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.TrailerUpdate" /> <see cref="E:SampSharp.GameMode.World.BaseVehicle.TrailerUpdate" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.TrailerEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.TrailerEventArgs" /> class.
            </summary>
            <param name="player">The player sending the update.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.TrailerEventArgs.Player">
            <summary>
                Gets the player sending the update.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.TrailerEventArgs.PreventPropagation">
            <summary>
                Gets or sets whether to stop the vehicle syncing its position to other players.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.DialogResponseEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.DialogResponse" />, <see cref="E:SampSharp.GameMode.World.BasePlayer.DialogResponse" /> or
                <see cref="E:SampSharp.GameMode.Display.Dialog.Response" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.DialogResponseEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                Initializes a new instance of the DialogResponseEventArgs class.
            </summary>
            <param name="player">The player.</param>
            <param name="dialogid">Id of the dialog.</param>
            <param name="response">Response of the dialog response.</param>
            <param name="listitem">List item of the dialog response.</param>
            <param name="inputtext">Input text of the dialog response.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.Player">
            <summary>
                Gets the player sending this response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.DialogId">
            <summary>
                Gets the id of dialog of this response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.DialogButton">
            <summary>
                Gets the button clicked for this response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.ListItem">
            <summary>
                Gets the index of the listitem clicked for this response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.InputText">
            <summary>
                Gets the inputtext of this response.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.ConnectionEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.IncomingConnection" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.ConnectionEventArgs.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
                Initializes a new instance of the ConnectionEventArgs class.
            </summary>
            <param name="playerid">Id of the player trying to connect.</param>
            <param name="ipAddress">Ip of the connection.</param>
            <param name="port">Port of the connection.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.ConnectionEventArgs.PlayerId">
            <summary>
                Gets the id of the player trying to connect.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.ConnectionEventArgs.IpAddress">
            <summary>
                Gets the ip of this connection.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.ConnectionEventArgs.Port">
            <summary>
                Gets the port of this connection.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerExitVehicle" />, <see cref="E:SampSharp.GameMode.World.BasePlayer.ExitVehicle" /> or
                <see cref="E:SampSharp.GameMode.World.BaseVehicle.PlayerExit" />
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerVehicleEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.World.BaseVehicle)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="vehicle">The vehicle.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerVehicleEventArgs.Vehicle">
            <summary>
                Gets the vehicle.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PositionEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickMap" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.ClickMap" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PositionEventArgs.#ctor(SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.PositionEventArgs" /> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PositionEventArgs.Position">
            <summary>
                Gets the position.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.ClickPlayerEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickPlayer" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.ClickPlayer" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.ClickPlayerEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Definitions.PlayerClickSource)">
            <summary>
                Initializes a new instance of the ClickPlayerEventArgs class.
            </summary>
            <param name="clickedPlayer">Id of the clicked player.</param>
            <param name="source">PlayerClickSource of the event.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.ClickPlayerEventArgs.ClickedPlayer">
            <summary>
                Gets the clicked player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.ClickPlayerEventArgs.PlayerClickSource">
            <summary>
                Gets the PlayerClickSource of this event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.ClickTextDrawEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickTextDraw" />, <see cref="E:SampSharp.GameMode.Display.TextDraw.Click" /> or
                <see cref="E:SampSharp.GameMode.World.BasePlayer.ClickTextDraw" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.ClickTextDrawEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Display.TextDraw)">
            <summary>
                Initializes a new instance of the ClickTextDrawEventArgs class.
            </summary>
            <param name="player">The player.</param>
            <param name="textDraw">The text draw.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.ClickTextDrawEventArgs.Player">
            <summary>
                Gets the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.ClickTextDrawEventArgs.TextDraw">
            <summary>
                Gets the text draw.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.DamageEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerTakeDamage" />, <see cref="E:SampSharp.GameMode.BaseMode.PlayerGiveDamage" />,
                <see cref="E:SampSharp.GameMode.World.BasePlayer.TakeDamage" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.GiveDamage" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.DamageEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,System.Single,SampSharp.GameMode.Definitions.Weapon,SampSharp.GameMode.Definitions.BodyPart)">
            <summary>
                Initializes a new instance of the DamageEventArgs class.
            </summary>
            <param name="otherPlayer">The other player.</param>
            <param name="amount">Amount of damage done.</param>
            <param name="weapon">Weapon used to damage another.</param>
            <param name="bodypart">BodyPart shot at.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.DamageEventArgs.OtherPlayer">
            <summary>
                Gets the other player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DamageEventArgs.Amount">
            <summary>
                Gets the amount of damage done.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DamageEventArgs.Weapon">
            <summary>
                Gets the Weapon used to damage another player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DamageEventArgs.BodyPart">
            <summary>
                Gets the BodyPart shot at.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.DeathEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerDied" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.Died" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.DeathEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Initializes a new instance of the DeathEventArgs class.
            </summary>
            <param name="killer">The killer.</param>
            <param name="reason">Reason of the death.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.DeathEventArgs.Killer">
            <summary>
                Gets the killer.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DeathEventArgs.DeathReason">
            <summary>
                Gets the reason of the death.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.DisconnectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerDisconnected" />, <see cref="E:SampSharp.GameMode.BaseMode.PlayerCleanup" />,
                <see cref="E:SampSharp.GameMode.World.BasePlayer.Disconnected" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.Cleanup" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.DisconnectEventArgs.#ctor(SampSharp.GameMode.Definitions.DisconnectReason)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.DisconnectEventArgs" /> class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.DisconnectEventArgs.Reason">
            <summary>
                Gets the reason of the disconnection.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.EditAttachedObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEditAttachedObject" /> or
                <see cref="E:SampSharp.GameMode.World.BasePlayer.EditAttachedObject" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.EditAttachedObjectEventArgs.#ctor(SampSharp.GameMode.Definitions.EditObjectResponse,System.Int32,System.Int32,SampSharp.GameMode.Definitions.Bone,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the EditAttachedObjectEventArgs class.
            </summary>
            <param name="response">EditObjectResponse.</param>
            <param name="index">Index of the attached object.</param>
            <param name="modelid">Model of the attached object.</param>
            <param name="bone">The bone the object was attached to.</param>
            <param name="offset">Offset of the attached object.</param>
            <param name="rotation">Rotation of the attached object.</param>
            <param name="scale">Scale of the attached object.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditAttachedObjectEventArgs.EditObjectResponse">
            <summary>
                Gets the EditObjectResponse.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditAttachedObjectEventArgs.Index">
            <summary>
                Gets the index of the attached  object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditAttachedObjectEventArgs.ModelId">
            <summary>
                Gets the id of the model.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditAttachedObjectEventArgs.Bone">
            <summary>
                Gets the Bone the object was attached to.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditAttachedObjectEventArgs.Offset">
            <summary>
                Gets the offset of the attached object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditAttachedObjectEventArgs.Rotation">
            <summary>
                Gets the rotation of the attached object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditAttachedObjectEventArgs.Scale">
            <summary>
                Gets the scale of the attached object.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.EditPlayerObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEditPlayerObject" />, <see cref="E:SampSharp.GameMode.World.BasePlayer.EditPlayerObject" /> or
                <see cref="E:SampSharp.GameMode.World.PlayerObject.Edited" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.EditPlayerObjectEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.World.PlayerObject,SampSharp.GameMode.Definitions.EditObjectResponse,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.EditPlayerObjectEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="object">The global object.</param>
            <param name="response">The response.</param>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditPlayerObjectEventArgs.Player">
            <summary>
                Gets the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditPlayerObjectEventArgs.Object">
            <summary>
                Gets the global object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditPlayerObjectEventArgs.EditObjectResponse">
            <summary>
                Gets the edit object response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EditPlayerObjectEventArgs.Rotation">
            <summary>
                Gets the rotation.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.EnterModShopEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterExitModShop" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.EnterExitModShop" />
                event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.EnterModShopEventArgs.#ctor(SampSharp.GameMode.Definitions.EnterExit,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.EnterModShopEventArgs" /> class.
            </summary>
            <param name="enterExit">The enter exit value.</param>
            <param name="interiorid">The interiorid.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.EnterModShopEventArgs.EnterExit">
            <summary>
                Gets a value indicating whether the player is entering or exiting.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EnterModShopEventArgs.InteriorId">
            <summary>
                Gets the interior identifier of the mod shop.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.EnterVehicleEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterVehicle" />, <see cref="E:SampSharp.GameMode.World.BasePlayer.EnterVehicle" /> or
                <see cref="E:SampSharp.GameMode.World.BaseVehicle.PlayerEnter" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.EnterVehicleEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.World.BaseVehicle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.EnterVehicleEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="vehicle">The vehicle.</param>
            <param name="isPassenger">if set to <c>true</c> the player is a passenger.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.EnterVehicleEventArgs.Player">
            <summary>
                Gets the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EnterVehicleEventArgs.Vehicle">
            <summary>
                Gets the vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.EnterVehicleEventArgs.IsPassenger">
            <summary>
                Gets a value indicating whether the <see cref="P:SampSharp.GameMode.Events.EnterVehicleEventArgs.Player" /> is passenger.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehicleDied" />, <see cref="E:SampSharp.GameMode.BaseMode.PlayerPickUpPickup" />,
                <see cref="E:SampSharp.GameMode.BaseMode.VehicleDamageStatusUpdated" />, <see cref="E:SampSharp.GameMode.BaseMode.PlayerStreamIn" />,
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerStreamOut" />, <see cref="E:SampSharp.GameMode.BaseMode.VehicleStreamIn" />,
                <see cref="E:SampSharp.GameMode.BaseMode.VehicleStreamOut" />, <see cref="E:SampSharp.GameMode.World.BasePlayer.StreamIn" />, <see cref="E:SampSharp.GameMode.World.BasePlayer.StreamOut" />,
                <see cref="E:SampSharp.GameMode.World.BaseVehicle.StreamIn" />, <see cref="E:SampSharp.GameMode.World.BaseVehicle.StreamOut" /> or <see cref="E:SampSharp.GameMode.World.Pickup.PickUp" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerEventArgs.Player">
            <summary>
                Gets the player involved.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.InteriorChangedEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerInteriorChanged" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.InteriorChanged" />
                event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.InteriorChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.InteriorChangedEventArgs" /> class.
            </summary>
            <param name="newInterior">The new interior.</param>
            <param name="oldInterior">The old interior.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.InteriorChangedEventArgs.NewInterior">
            <summary>
                Gets the new interior.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.InteriorChangedEventArgs.OldInterior">
            <summary>
                Gets the old interior.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.KeyStateChangedEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerKeyStateChanged" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.KeyStateChanged" />
                event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.KeyStateChangedEventArgs.#ctor(SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.KeyStateChangedEventArgs" /> class.
            </summary>
            <param name="newKeys">The new keys.</param>
            <param name="oldKeys">The old keys.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.KeyStateChangedEventArgs.NewKeys">
            <summary>
                Gets the new keys.
            </summary>
            <value>
                The new keys.
            </value>
        </member>
        <member name="P:SampSharp.GameMode.Events.KeyStateChangedEventArgs.OldKeys">
            <summary>
                Gets the old keys.
            </summary>
            <value>
                The old keys.
            </value>
        </member>
        <member name="T:SampSharp.GameMode.Events.RequestClassEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerRequestClass" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.RequestClass" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.RequestClassEventArgs.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the RequestClassEventArgs class.
            </summary>
            <param name="classid">The id of the class.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.RequestClassEventArgs.ClassId">
            <summary>
                Gets the id of the class.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.RequestClassEventArgs.PreventSpawning">
            <summary>
                Gets or sets whether the player is prevented from spawning.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.MenuRowEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSelectedMenuRow" />, <see cref="E:SampSharp.GameMode.World.BasePlayer.SelectedMenuRow" /> or
                <see cref="E:SampSharp.GameMode.Display.Menu.Response" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.MenuRowEventArgs.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.MenuRowEventArgs" /> class.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.MenuRowEventArgs.Row">
            <summary>
                Gets the row.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSelectGlobalObject" />,
                <see cref="E:SampSharp.GameMode.World.BasePlayer.SelectGlobalObject" />
                or <see cref="E:SampSharp.GameMode.World.GlobalObject.Selected" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.World.GlobalObject,System.Int32,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="object">The global object.</param>
            <param name="modelid">The modelid.</param>
            <param name="position">The position.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs.Player">
            <summary>
                Gets the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs.Object">
            <summary>
                Gets the global object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs.ModelId">
            <summary>
                Gets the model identifier.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.SelectPlayerObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSelectPlayerObject" />,
                <see cref="E:SampSharp.GameMode.World.BasePlayer.SelectPlayerObject" />
                or <see cref="E:SampSharp.GameMode.World.PlayerObject.Selected" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.SelectPlayerObjectEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.World.PlayerObject,System.Int32,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.SelectPlayerObjectEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="object">The player object.</param>
            <param name="modelid">The modelid.</param>
            <param name="position">The position.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.SelectPlayerObjectEventArgs.Player">
            <summary>
                Gets the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.SelectPlayerObjectEventArgs.Object">
            <summary>
                Gets the player object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.SelectPlayerObjectEventArgs.ModelId">
            <summary>
                Gets the model identifier.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.StateEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerStateChanged" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.StateChanged" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.StateEventArgs.#ctor(SampSharp.GameMode.Definitions.PlayerState,SampSharp.GameMode.Definitions.PlayerState)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.StateEventArgs" /> class.
            </summary>
            <param name="newstate">The newstate.</param>
            <param name="oldstate">The oldstate.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.StateEventArgs.NewState">
            <summary>
                Gets the new state.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.StateEventArgs.OldState">
            <summary>
                Gets the old state.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.TextEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerText" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.Text" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.TextEventArgs.#ctor(System.String)">
            <summary>
                Initializes a new instance of the TextEventArgs class.
            </summary>
            <param name="text">The text sent by the player.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.TextEventArgs.Text">
            <summary>
                Gets the text sent by the player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.TextEventArgs.SendToPlayers">
            <summary>
                Gets or sets whether this message should be sent to all players.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.RconEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.RconCommand" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.RconEventArgs.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.RconEventArgs" /> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.RconEventArgs.Command">
            <summary>
                Gets the command passed trough the rcon interface.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.RconEventArgs.Success">
            <summary>
                Gets or sets whether this command has been handled successfully.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.RconLoginAttemptEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.RconLoginAttempt" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.RconLoginAttemptEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.RconLoginAttemptEventArgs" /> class.
            </summary>
            <param name="ip">The ip.</param>
            <param name="password">The password.</param>
            <param name="success">if set to <c>true</c> this is a successful login.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.RconLoginAttemptEventArgs.IP">
            <summary>
                Gets the IP attempting to connect.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.RconLoginAttemptEventArgs.Password">
            <summary>
                Gets the password used.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.RconLoginAttemptEventArgs.SuccessfulLogin">
            <summary>
                Gets a value indicating whether this is a successful login.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.UnoccupiedVehicleUpdated" /> or
                <see cref="E:SampSharp.GameMode.World.BaseVehicle.UnoccupiedUpdate" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,System.Int32,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="passengerSeat">The passenger seat.</param>
            <param name="newPosition">The new position.</param>
            <param name="newVelocity">The new velocity.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs.PassengerSeat">
            <summary>
                Gets the passenger seat.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs.NewPosition">
            <summary>
                Gets the new position.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs.NewVelocity">
            <summary>
                Gets the new velocity.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs.PreventPropagation">
            <summary>
                Gets or sets whether to stop the vehicle syncing its position to other players.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.VehicleModEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehicleMod" /> or <see cref="E:SampSharp.GameMode.World.BaseVehicle.Mod" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.VehicleModEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.VehicleModEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="componentId">The component identifier.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.VehicleModEventArgs.ComponentId">
            <summary>
                Gets or sets the component identifier.
            </summary>
            <value>
                The component identifier.
            </value>
        </member>
        <member name="P:SampSharp.GameMode.Events.VehicleModEventArgs.PreventPropagation">
            <summary>
                Gets or sets whether to desync the mod (or an invalid mod) from propagating and / or crashing players.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.VehiclePaintjobEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehiclePaintjobApplied" /> or <see cref="E:SampSharp.GameMode.World.BaseVehicle.PaintjobApplied" />
                event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.VehiclePaintjobEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.VehiclePaintjobEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="paintjobId">The paintjob identifier.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.VehiclePaintjobEventArgs.PaintjobId">
            <summary>
                Gets the paintjob identifier.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.VehicleResprayedEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehicleResprayed" /> or <see cref="E:SampSharp.GameMode.World.BaseVehicle.Resprayed" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.VehicleResprayedEventArgs.#ctor(SampSharp.GameMode.World.BasePlayer,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.VehicleResprayedEventArgs" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.VehicleResprayedEventArgs.Color1">
            <summary>
                Gets the color1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.VehicleResprayedEventArgs.Color2">
            <summary>
                Gets the color2.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.WeaponShotEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerWeaponShot" /> or <see cref="E:SampSharp.GameMode.World.BasePlayer.WeaponShot" /> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.WeaponShotEventArgs.#ctor(SampSharp.GameMode.Definitions.Weapon,SampSharp.GameMode.Definitions.BulletHitType,System.Int32,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Events.WeaponShotEventArgs" /> class.
            </summary>
            <param name="weapon">The weapon.</param>
            <param name="hittype">The hittype.</param>
            <param name="hitid">The hitid.</param>
            <param name="position">The position.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.WeaponShotEventArgs.Weapon">
            <summary>
                Gets the weapon.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.WeaponShotEventArgs.BulletHitType">
            <summary>
                Gets the type of the bullet hit.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.WeaponShotEventArgs.HitId">
            <summary>
                Gets the hit identifier.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.WeaponShotEventArgs.PreventDamage">
            <summary>
                Gets or sets whether the bullets should be prevented from causing damage.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Factories.IVehicleFactory">
            <summary>
                Contains the definition of a vehicle factory.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Factories.IVehicleFactory.Create(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <param name="addAlarm">If true, enables the vehicle to have a siren, providing the vehicle has a horn.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Factories.IVehicleFactory.CreateStatic(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a static <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <param name="addAlarm">If true, enables the vehicle to have a siren, providing the vehicle has a horn.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Factories.IVehicleFactory.CreateStatic(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32)">
            <summary>
                Creates a static <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Factories.BaseVehicleFactory">
            <summary>
                Represents the default vehicle factory.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Factories.BaseVehicleFactory.#ctor(SampSharp.GameMode.BaseMode)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Factories.BaseVehicleFactory" /> class.
            </summary>
            <param name="gameMode">The game mode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Factories.BaseVehicleFactory.Create(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <param name="addAlarm">If true, enables the vehicle to have a siren, providing the vehicle has a horn.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Factories.BaseVehicleFactory.CreateStatic(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a static <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <param name="addAlarm">If true, enables the vehicle to have a siren, providing the vehicle has a horn.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Factories.BaseVehicleFactory.CreateStatic(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32)">
            <summary>
                Creates a static <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="P:SampSharp.GameMode.Factories.BaseVehicleFactory.GameMode">
            <summary>
                Gets the game mode.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes an asynctask method synchronously.
            </summary>
            <param name="task">The function to execute.</param>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Executes an async task method which has a <typeparamref name="T"/> return type synchronously.
            </summary>
            <typeparam name="T">The result type of the task.</typeparam>
            <param name="task">Task method to execute.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Helpers.MathHelper">
            <summary>
                Contains commonly used precalculated values and mathematical operations.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Helpers.MathHelper.E">
            <summary>
            Represents the mathematical constant e(2.71828175).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Helpers.MathHelper.Log10E">
            <summary>
            Represents the log base ten of e(0.4342945).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Helpers.MathHelper.Log2E">
            <summary>
            Represents the log base two of e(1.442695).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Helpers.MathHelper.Pi">
            <summary>
                Represents the value of pi(3.14159274).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Helpers.MathHelper.PiOver2">
            <summary>
                Represents the value of pi divided by two(1.57079637).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Helpers.MathHelper.PiOver4">
            <summary>
                Represents the value of pi divided by four(0.7853982).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Helpers.MathHelper.TwoPi">
            <summary>
                Represents the value of pi times two(6.28318548).
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
            <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
            <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
                Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
                Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Distance(System.Single,System.Single)">
            <summary>
                Calculates the absolute value of the difference of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>Distance between the two values.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position.</param>
            <param name="tangent1">Source tangent.</param>
            <param name="value2">Source position.</param>
            <param name="tangent2">Source tangent.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
                Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
            <remarks>
                This method performs the linear interpolation based on the following formula.
                <c>value1 + (value2 - value1) * amount</c>
                Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Max(System.Single,System.Single)">
            <summary>
                Returns the greater of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Max(System.Int32,System.Int32)">
            <summary>
                Returns the greater of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Min(System.Single,System.Single)">
            <summary>
                Returns the lesser of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.Min(System.Int32,System.Int32)">
            <summary>
                Returns the lesser of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
                Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.ToDegrees(System.Single)">
            <summary>
                Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
            <remarks>
                This method uses double precision internally,
                though it returns single float
                Factor = 180 / pi
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.ToRadians(System.Single)">
            <summary>
                Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
            <remarks>
                This method uses double precision internally,
                though it returns single float
                Factor = pi / 180
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.WrapAngle(System.Single)">
            <summary>
                Reduces a given angle to a value between π and -π.
            </summary>
            <param name="angle">The angle to reduce, in radians.</param>
            <returns>The new angle, in radians.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.MathHelper.IsPowerOfTwo(System.Int32)">
            <summary>
                Determines if value is powered by two.
            </summary>
            <param name="value">A value.</param>
            <returns><c>true</c> if <c>value</c> is powered by two; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Helpers.NullableHelper">
            <summary>
                Contains helper methods for nullable types.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.NullableHelper.Do``1(System.Nullable{``0},System.Action{``0})">
            <summary>
                Invokes Does the specified action when the value is set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:SampSharp.GameMode.Helpers.VehicleParameterValueHelper">
            <summary>
                Contains helper methods for <see cref="T:SampSharp.GameMode.Definitions.VehicleParameterValue" /> values.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.VehicleParameterValueHelper.ToBool(SampSharp.GameMode.Definitions.VehicleParameterValue,System.Boolean)">
            <summary>
                Converts the specified <paramref name="value" /> to a boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default (unset) value.</param>
            <returns>The resulting boolean.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.VehicleParameterValueHelper.FromBool(System.Boolean)">
            <summary>
                Converts the specified boolean <paramref name="value" /> to a <see cref="T:SampSharp.GameMode.Definitions.VehicleParameterValue" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting <see cref="T:SampSharp.GameMode.Definitions.VehicleParameterValue" />.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Helpers.LinqHelper">
            <summary>
                Contains helper methods for LINQ queries.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.LinqHelper.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the collection.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.LinqHelper.FindLastIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the last item matching an expression in an enumerable.</summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the collection.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the last matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.LinqHelper.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurrence of an item in an enumerable.</summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the collection.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.LinqHelper.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the last occurrence of an item in an enumerable.</summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the collection.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the last matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="T:SampSharp.GameMode.IService">
            <summary>
                Contains the definition of a service
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.IService.GameMode">
            <summary>
                Gets the game mode.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Matrix">
            <summary>
                Represents the right-handed 4x4 floating point matrix, which can store translation, scale and rotation information.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Matrix" /> struct.
            </summary>
            <param name="m11">The first row and first column value.</param>
            <param name="m12">The first row and second column value.</param>
            <param name="m13">The first row and third column value.</param>
            <param name="m14">The first row and fourth column value.</param>
            <param name="m21">The second row and first column value.</param>
            <param name="m22">The second row and second column value.</param>
            <param name="m23">The second row and third column value.</param>
            <param name="m24">The second row and fourth column value.</param>
            <param name="m31">The third row and first column value.</param>
            <param name="m32">The third row and second column value.</param>
            <param name="m33">The third row and third column value.</param>
            <param name="m34">The third row and fourth column value.</param>
            <param name="m41">The fourth row and first column value.</param>
            <param name="m42">The fourth row and second column value.</param>
            <param name="m43">The fourth row and third column value.</param>
            <param name="m44">The fourth row and fourth column value.</param>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.#ctor(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Matrix" /> struct.
            </summary>
            <param name="row1">The first row of the matrix.</param>
            <param name="row2">The second row of the matrix.</param>
            <param name="row3">The third row of the matrix.</param>
            <param name="row4">The fourth row of the matrix.</param>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M11">
            <summary>
                Gets the first row and first column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M12">
            <summary>
                Gets the first row and second column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M13">
            <summary>
                Gets the first row and third column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M14">
            <summary>
                Gets the first row and fourth column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M21">
            <summary>
                Gets the second row and first column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M22">
            <summary>
                Gets the second row and second column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M23">
            <summary>
                Gets the second row and third column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M24">
            <summary>
                Gets the second row and fourth column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M31">
            <summary>
                Gets the third row and first column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M32">
            <summary>
                Gets the third row and second column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M33">
            <summary>
                Gets the third row and third column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M34">
            <summary>
                Gets the third row and fourth column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M41">
            <summary>
                Gets the fourth row and first column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M42">
            <summary>
                Gets the fourth row and second column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M43">
            <summary>
                Gets the fourth row and third column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.M44">
            <summary>
                Gets the fourth row and fourth column value.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Identity">
            <summary>
                Returns the identity matrix.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Down">
            <summary>
                Gets the down vector formed from the third row -M31, -M32, -M33 elements.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Up">
            <summary>
                Gets the upper vector formed from the third row M31, M32, M33 elements.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Forward">
            <summary>
                Gets the forward vector formed from the second row M21, M22, M23 elements.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Backward">
            <summary>
                Gets the backward vector formed from the second row -M21, -M22, -M23 elements.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Left">
            <summary>
                The left vector formed from the first row -M11, -M12, -M13 elements.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Right">
            <summary>
                Gets the right vector formed from the first row M11, M12, M13 elements.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Rotation">
            <summary>
                Gets the rotation stored in this matrix.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Translation">
            <summary>
                Gets the position stored in this matrix.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Matrix.Scale">
            <summary>
                Gets the scale stored in this matrix.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.CreateFromAxisAngle(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Matrix" /> which contains the rotation moment around specified axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
            <returns>The rotation <see cref="T:SampSharp.GameMode.Matrix" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.CreateFromQuaternion(SampSharp.GameMode.Quaternion)">
            <summary>
                Creates a new rotation <see cref="T:SampSharp.GameMode.Matrix" /> from a <see cref="T:SampSharp.GameMode.Quaternion" />.
            </summary>
            <param name="quaternion"><see cref="T:SampSharp.GameMode.Quaternion" /> of rotation moment.</param>
            <returns>The rotation <see cref="T:SampSharp.GameMode.Matrix" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
                Creates a new rotation <see cref="T:SampSharp.GameMode.Matrix" /> from the specified yaw, pitch and roll values.
            </summary>
            <param name="yaw">The yaw rotation value in radians.</param>
            <param name="pitch">The pitch rotation value in radians.</param>
            <param name="roll">The roll rotation value in radians.</param>
            <returns>The rotation <see cref="T:SampSharp.GameMode.Matrix" />.</returns>
            <remarks>
                For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.CreateLookAt(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Creates a new viewing <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraTarget">Lookup vector of the camera.</param>
            <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
            <returns>The viewing <see cref="T:SampSharp.GameMode.Matrix" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.CreateRotationX(System.Single)">
            <summary>
                Creates a new rotation <see cref="T:SampSharp.GameMode.Matrix" /> around X axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:SampSharp.GameMode.Matrix" /> around X axis.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.CreateRotationY(System.Single)">
            <summary>
                Creates a new rotation <see cref="T:SampSharp.GameMode.Matrix" /> around Y axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:SampSharp.GameMode.Matrix" /> around Y axis.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.CreateRotationZ(System.Single)">
            <summary>
                Creates a new rotation <see cref="T:SampSharp.GameMode.Matrix" /> around Z axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:SampSharp.GameMode.Matrix" /> around Z axis.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.CreateTranslation(SampSharp.GameMode.Vector3)">
            <summary>
                Creates a new translation <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="position">The translation.</param>
            <returns>The translation <see cref="T:SampSharp.GameMode.Matrix" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.Determinant">
            <summary>
                Returns a determinant of this <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <returns>Determinant of this <see cref="T:SampSharp.GameMode.Matrix" /></returns>
            <remarks>
                See more about determinant here - http://en.wikipedia.org/wiki/Determinant.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.Equals(SampSharp.GameMode.Matrix)">
            <summary>
                Compares whether current instance is equal to specified <see cref="T:SampSharp.GameMode.Matrix" /> without any tolerance.
            </summary>
            <param name="other">The <see cref="T:SampSharp.GameMode.Matrix" /> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.Equals(System.Object)">
            <summary>
                Compares whether current instance is equal to specified <see cref="T:System.Object" /> without any tolerance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.Invert(SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Matrix" /> which contains inversion of the specified matrix.
            </summary>
            <param name="matrix">Source <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <returns>The inverted matrix.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.Lerp(SampSharp.GameMode.Matrix,SampSharp.GameMode.Matrix,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Matrix" /> that contains linear interpolation of the values in specified matrixes.
            </summary>
            <param name="matrix1">The first <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <param name="matrix2">The second <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>>The result of linear interpolation of the specified matrixes.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_Addition(SampSharp.GameMode.Matrix,SampSharp.GameMode.Matrix)">
            <summary>
                Adds two matrixes.
            </summary>
            <param name="matrix1">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the left of the add sign.</param>
            <param name="matrix2">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the right of the add sign.</param>
            <returns>Sum of the matrixes.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_Division(SampSharp.GameMode.Matrix,SampSharp.GameMode.Matrix)">
            <summary>
                Divides the elements of a <see cref="T:SampSharp.GameMode.Matrix" /> by the elements of another <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="matrix1">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the left of the div sign.</param>
            <param name="matrix2">Divisor <see cref="T:SampSharp.GameMode.Matrix" /> on the right of the div sign.</param>
            <returns>The result of dividing the matrixes.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_Division(SampSharp.GameMode.Matrix,System.Single)">
            <summary>
                Divides the elements of a <see cref="T:SampSharp.GameMode.Matrix" /> by a scalar.
            </summary>
            <param name="matrix">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the left of the div sign.</param>
            <param name="scalar">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a matrix by a scalar.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_Equality(SampSharp.GameMode.Matrix,SampSharp.GameMode.Matrix)">
            <summary>
                Compares whether two <see cref="T:SampSharp.GameMode.Matrix" /> instances are equal without any tolerance.
            </summary>
            <param name="matrix1">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the left of the equal sign.</param>
            <param name="matrix2">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_Inequality(SampSharp.GameMode.Matrix,SampSharp.GameMode.Matrix)">
            <summary>
                Compares whether two <see cref="T:SampSharp.GameMode.Matrix" /> instances are not equal without any tolerance.
            </summary>
            <param name="matrix1">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the left of the not equal sign.</param>
            <param name="matrix2">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_Multiply(SampSharp.GameMode.Matrix,SampSharp.GameMode.Matrix)">
            <summary>
                Multiplies two matrixes.
            </summary>
            <param name="matrix1">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the left of the mul sign.</param>
            <param name="matrix2">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the right of the mul sign.</param>
            <returns>Result of the matrix multiplication.</returns>
            <remarks>
                Using matrix multiplication algorithm - see http://en.wikipedia.org/wiki/Matrix_multiplication.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_Multiply(SampSharp.GameMode.Matrix,System.Single)">
            <summary>
                Multiplies the elements of matrix by a scalar.
            </summary>
            <param name="matrix">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the left of the mul sign.</param>
            <param name="scalar">Scalar value on the right of the mul sign.</param>
            <returns>Result of the matrix multiplication with a scalar.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_Subtraction(SampSharp.GameMode.Matrix,SampSharp.GameMode.Matrix)">
            <summary>
                Subtracts the values of one <see cref="T:SampSharp.GameMode.Matrix" /> from another <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="matrix1">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the left of the sub sign.</param>
            <param name="matrix2">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the right of the sub sign.</param>
            <returns>Result of the matrix subtraction.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.op_UnaryNegation(SampSharp.GameMode.Matrix)">
            <summary>
                Inverts values in the specified <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="matrix">Source <see cref="T:SampSharp.GameMode.Matrix" /> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Matrix.Transpose(SampSharp.GameMode.Matrix)">
            <summary>
                Swap the matrix rows and columns.
            </summary>
            <param name="matrix">The matrix for transposing operation.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Matrix" /> which contains the transposing result.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Pools.PoolContainer`1">
            <summary>
                Represents the contents of a pool.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
        </member>
        <member name="F:SampSharp.GameMode.Pools.PoolContainer`1.UnidentifiedId">
            <summary>
                The identifier of an unidentified instance.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.PoolContainer`1.UnidentifiedItems">
            <summary>
                Gets the unidentified items.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.Add(System.Int32,`0)">
            <summary>
                Adds the specified item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentException">duplicate key;key</exception>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.Get(System.Int32)">
            <summary>
                Gets the item associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The item associated with the specified key</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.Remove(System.Int32)">
            <summary>
                Removes the item associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>True on success; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.RemoveUnidentified(`0)">
            <summary>
                Removes the specified unidentified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True on success; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.Move(System.Int32,System.Int32)">
            <summary>
                Moves the item associated with the specified old key to the specified new key.
            </summary>
            <param name="oldKey">The old key.</param>
            <param name="newKey">The new key.</param>
            <exception cref="T:System.ArgumentException">unidentified id cannot be moved;oldKey or key not found;oldKey</exception>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.MoveUnidentified(`0,System.Int32)">
            <summary>
                Moves the specified unidentified item to the specified new key.
            </summary>
            <param name="item">The item.</param>
            <param name="newKey">The new key.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
            <exception cref="T:System.ArgumentException">item not found;item</exception>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.Contains(System.Int32)">
            <summary>
                Determines whether the specified key exists.
            </summary>
            <param name="key">The key.</param>
            <returns>True if the specified key exists; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.PoolContainer`1.ContainsUnidentified(`0)">
            <summary>
                Determines whether the specified unidentified item exists within this pool.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the specified unidentified item exists; False otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Pools.PooledTypeAttribute">
            <summary>
            Indicates the type is pooled.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2">
            <summary>
                Keeps track of a pool of owned and identified instances.
            </summary>
            <typeparam name="TInstance">Base type of instances to keep track of.</typeparam>
            <typeparam name="TOwner">Base type of the owner</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2" /> class.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.InstanceType">
            <summary>
                The type to initialize when adding an instance to this pool by id.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.All">
            <summary>
                Gets a collection containing all instances.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Id">
            <summary>
                Gets the identifier of this instance.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Owner">
            <summary>
                Gets the owner of this instance.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Dispose(System.Boolean)">
            <summary>
                Removes this instance from the pool.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Contains(`0)">
            <summary>
                Gets whether the given instance is present in the pool.
            </summary>
            <param name="item">The instance to check the presence of.</param>
            <returns>Whether the given instance is present in the pool.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.GetAll``1">
            <summary>
                Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> containing all instances of the given type within this
                <see cref="T:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2" />.
            </summary>
            <typeparam name="T2">The <see cref="T:System.Type" /> of instances to get.</typeparam>
            <returns>All instances of the given type within this <see cref="T:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Register``1">
            <summary>
                Registers the type to use when initializing new instances.
            </summary>
            <typeparam name="TRegister">The <see cref="T:System.Type" /> to use when initializing new instances.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Of(`1)">
            <summary>
                Gets a collection of instanced owned by the specified owner.
            </summary>
            <param name="owner">The owner.</param>
            <returns>A collection of instanced owned by the specified owner</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Register(System.Type)">
            <summary>
                Registers the type to use when initializing new instances.
            </summary>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if type is null</exception>
            <exception cref="T:System.ArgumentException">type must be of type TInstance;type</exception>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Find(`1,System.Int32)">
            <summary>
                Finds an instance with the given <paramref name="id" />".
            </summary>
            <param name="owner">The owner of the isntance to find.</param>
            <param name="id">The identity of the instance to find.</param>
            <returns>The found instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Create(`1,System.Int32)">
            <summary>
                Initializes a new instance with the given id.
            </summary>
            <param name="owner">The owner of the instance to create.</param>
            <param name="id">The identity of the instance to create.</param>
            <returns>
                The initialized instance.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Initialize">
            <summary>
                An overloadable point for initialization logic which requires the <see cref="P:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Id"/> and the <see cref="P:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Owner"/> to be set.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.FindOrCreate(`1,System.Int32)">
            <summary>
                Finds an instance with the given <paramref name="id" /> or initializes a new one.
            </summary>
            <param name="owner">The owner of the isntance to find or create.</param>
            <param name="id">The identity of the instance to find or create.</param>
            <returns>
                The found instance.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.Pools.IdentifiedPool`1">
            <summary>
                Keeps track of a pool of identifyable instances.
            </summary>
            <typeparam name="TInstance">Base type of instances to keep track of.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Pools.IdentifiedPool`1" /> class.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.IdentifiedPool`1.InstanceType">
            <summary>
                The type to initialize when adding an instance to this pool by id.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.IdentifiedPool`1.All">
            <summary>
                Gets a collection containing all instances.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.IdentifiedPool`1.Id">
            <summary>
                Gets the identifier of this instance.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Dispose(System.Boolean)">
            <summary>
                Removes this instance from the pool.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Contains(`0)">
            <summary>
                Gets whether the given instance is present in the pool.
            </summary>
            <param name="item">The instance to check the presence of.</param>
            <returns>Whether the given instance is present in the pool.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.GetAll``1">
            <summary>
                Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> containing all instances of the given type within this
                <see cref="T:SampSharp.GameMode.Pools.IdentifiedPool`1" />.
            </summary>
            <typeparam name="T2">The <see cref="T:System.Type" /> of instances to get.</typeparam>
            <returns>All instances of the given type within this <see cref="T:SampSharp.GameMode.Pools.IdentifiedPool`1" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Register``1">
            <summary>
                Registers the type to use when initializing new instances.
            </summary>
            <typeparam name="TRegister">The <see cref="T:System.Type" /> to use when initializing new instances.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Register(System.Type)">
            <summary>
                Registers the type to use when initializing new instances.
            </summary>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if type is null</exception>
            <exception cref="T:System.ArgumentException">type must be of type TInstance;type</exception>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Find(System.Int32)">
            <summary>
                Finds an instance with the given <paramref name="id" />".
            </summary>
            <param name="id">The identity of the instance to find.</param>
            <returns>The found instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Create(System.Int32)">
            <summary>
                Initializes a new instance with the given id.
            </summary>
            <param name="id">The identity of the instance to create.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Initialize">
            <summary>
                An overloadable point for initialization logic which requires the <see cref="P:SampSharp.GameMode.Pools.IdentifiedPool`1.Id"/> to be set.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.FindOrCreate(System.Int32)">
            <summary>
                Finds an instance with the given <paramref name="id" /> or initializes a new one.
            </summary>
            <param name="id">The identity of the instance to find or create.</param>
            <returns>The found instance.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Pools.Pool`1">
            <summary>
                Keeps track of a pool of instances.
            </summary>
            <typeparam name="TInstance">Base type of instances to keep track of.</typeparam>
        </member>
        <member name="F:SampSharp.GameMode.Pools.Pool`1.Instances">
            <summary>
                The instances alive in this pool.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Pools.Pool`1.Lock">
            <summary>
                A Locker for tread-saving this pool.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.Pool`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Pools.Pool`1" /> class.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.Pool`1.All">
            <summary>
                Gets a <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all instances of type.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.Pool`1.Dispose(System.Boolean)">
            <summary>
                Removes this instance from the pool.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.Pool`1.Contains(`0)">
            <summary>
                Gets whether the given instance is present in the pool.
            </summary>
            <param name="item">The instance to check the presence of.</param>
            <returns>Whether the given instance is present in the pool.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.Pool`1.GetAll``1">
            <summary>
                Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> containing all instances of the given type within this
                <see cref="T:SampSharp.GameMode.Pools.Pool`1" />.
            </summary>
            <typeparam name="T2">The <see cref="T:System.Type" /> of instances to get.</typeparam>
            <returns>All instances of the given type within this <see cref="T:SampSharp.GameMode.Pools.Pool`1" />.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Quaternion">
            <summary>
                Represents a quaternion rotation.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Quaternion.X">
            <summary>
                Gets the x-coordinate of this <see cref="T:SampSharp.GameMode.Quaternion" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Quaternion.Y">
            <summary>
                Gets the y-coordinate of this <see cref="T:SampSharp.GameMode.Quaternion" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Quaternion.Z">
            <summary>
                Gets the z-oordinate of this <see cref="T:SampSharp.GameMode.Quaternion" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Quaternion.W">
            <summary>
                Gets the rotation component of this <see cref="T:SampSharp.GameMode.Quaternion" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Constructs a quaternion with X, Y, Z and W from four values.
            </summary>
            <param name="x">The x coordinate in 3d-space.</param>
            <param name="y">The y coordinate in 3d-space.</param>
            <param name="z">The z coordinate in 3d-space.</param>
            <param name="w">The rotation component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.#ctor(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Constructs a quaternion with X, Y, Z from <see cref="T:SampSharp.GameMode.Vector3" /> and rotation component from a scalar.
            </summary>
            <param name="value">The x, y, z coordinates in 3d-space.</param>
            <param name="w">The rotation component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.#ctor(SampSharp.GameMode.Vector4)">
            <summary>
                Constructs a quaternion from <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
            <param name="value">The x, y, z coordinates in 3d-space and the rotation component.</param>
        </member>
        <member name="P:SampSharp.GameMode.Quaternion.Identity">
            <summary>
                Returns a quaternion representing no rotation.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.Concatenate(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Quaternion" /> that contains concatenation between two quaternion.
            </summary>
            <param name="value1">The first <see cref="T:SampSharp.GameMode.Quaternion" /> to concatenate.</param>
            <param name="value2">The second <see cref="T:SampSharp.GameMode.Quaternion" /> to concatenate.</param>
            <returns>The result of rotation of <paramref name="value1" /> followed by <paramref name="value2" /> rotation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.Conjugate(SampSharp.GameMode.Quaternion)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Quaternion" /> that contains conjugated version of the specified quaternion.
            </summary>
            <param name="value">The quaternion which values will be used to create the conjugated version.</param>
            <returns>The conjugate version of the specified quaternion.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.CreateFromAxisAngle(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Quaternion" /> from the specified axis and angle.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle in radians.</param>
            <returns>The new quaternion builded from axis and angle.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.CreateFromRotationMatrix(SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Quaternion" /> from the specified <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>A quaternion composed from the rotation part of the matrix.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Quaternion" /> from the specified yaw, pitch and roll angles.
            </summary>
            <param name="yaw">Yaw around the y axis in radians.</param>
            <param name="pitch">Pitch around the x axis in radians.</param>
            <param name="roll">Roll around the z axis in radians.</param>
            <returns>A new quaternion from the concatenated yaw, pitch, and roll angles.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.Dot(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion)">
            <summary>
                Returns a dot product of two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The dot product of two quaternions.</returns>
        </member>
        <member name="P:SampSharp.GameMode.Quaternion.Length">
            <summary>
                Gets the length of this <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Quaternion.LengthSquared">
            <summary>
                Gets the squared length of this <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.Lerp(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion,System.Single)">
            <summary>
                Performs a linear blend between two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:SampSharp.GameMode.Quaternion" />.</param>
            <param name="quaternion2">Source <see cref="T:SampSharp.GameMode.Quaternion" />.</param>
            <param name="amount">
                The blend amount where 0 returns <paramref name="quaternion1" /> and 1
                <paramref name="quaternion2" />.
            </param>
            <returns>The result of linear blending between two quaternions.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.Slerp(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion,System.Single)">
            <summary>
                Performs a spherical linear blend between two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:SampSharp.GameMode.Quaternion" />.</param>
            <param name="quaternion2">Source <see cref="T:SampSharp.GameMode.Quaternion" />.</param>
            <param name="amount">
                The blend amount where 0 returns <paramref name="quaternion1" /> and 1
                <paramref name="quaternion2" />.
            </param>
            <returns>The result of spherical linear blending between two quaternions.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.Normalize(SampSharp.GameMode.Quaternion)">
            <summary>
                Scales the quaternion magnitude to unit length.
            </summary>
            <param name="quaternion">Source <see cref="T:SampSharp.GameMode.Quaternion" />.</param>
            <returns>The unit length quaternion.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.ToVector4">
            <summary>
                Gets a <see cref="T:SampSharp.GameMode.Vector4" /> representation for this object.
            </summary>
            <returns>A <see cref="T:SampSharp.GameMode.Vector4" /> representation for this object.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.op_Addition(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion)">
            <summary>
                Adds two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:SampSharp.GameMode.Quaternion" /> on the left of the add sign.</param>
            <param name="quaternion2">Source <see cref="T:SampSharp.GameMode.Quaternion" /> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.op_Division(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion)">
            <summary>
                Divides a <see cref="T:SampSharp.GameMode.Quaternion" /> by the other <see cref="T:SampSharp.GameMode.Quaternion" />.
            </summary>
            <param name="quaternion1">Source <see cref="T:SampSharp.GameMode.Quaternion" /> on the left of the div sign.</param>
            <param name="quaternion2">Divisor <see cref="T:SampSharp.GameMode.Quaternion" /> on the right of the div sign.</param>
            <returns>The result of dividing the quaternions.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.op_Equality(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion)">
            <summary>
                Compares whether two <see cref="T:SampSharp.GameMode.Quaternion" /> instances are equal.
            </summary>
            <param name="quaternion1"><see cref="T:SampSharp.GameMode.Quaternion" /> instance on the left of the equal sign.</param>
            <param name="quaternion2"><see cref="T:SampSharp.GameMode.Quaternion" /> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.op_Inequality(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion)">
            <summary>
                Compares whether two <see cref="T:SampSharp.GameMode.Quaternion" /> instances are not equal.
            </summary>
            <param name="quaternion1"><see cref="T:SampSharp.GameMode.Quaternion" /> instance on the left of the not equal sign.</param>
            <param name="quaternion2"><see cref="T:SampSharp.GameMode.Quaternion" /> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.op_Multiply(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion)">
            <summary>
                Multiplies two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:SampSharp.GameMode.Quaternion" /> on the left of the mul sign.</param>
            <param name="quaternion2">Source <see cref="T:SampSharp.GameMode.Quaternion" /> on the right of the mul sign.</param>
            <returns>Result of the quaternions multiplication.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.op_Multiply(SampSharp.GameMode.Quaternion,System.Single)">
            <summary>
                Multiplies the components of quaternion by a scalar.
            </summary>
            <param name="quaternion1">Source <see cref="T:SampSharp.GameMode.Vector3" /> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the quaternion multiplication with a scalar.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.op_Subtraction(SampSharp.GameMode.Quaternion,SampSharp.GameMode.Quaternion)">
            <summary>
                Subtracts a <see cref="T:SampSharp.GameMode.Quaternion" /> from a <see cref="T:SampSharp.GameMode.Quaternion" />.
            </summary>
            <param name="quaternion1">Source <see cref="T:SampSharp.GameMode.Vector3" /> on the left of the sub sign.</param>
            <param name="quaternion2">Source <see cref="T:SampSharp.GameMode.Vector3" /> on the right of the sub sign.</param>
            <returns>Result of the quaternion subtraction.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Quaternion.op_UnaryNegation(SampSharp.GameMode.Quaternion)">
            <summary>
                Flips the sign of the all the quaternion components.
            </summary>
            <param name="quaternion">Source <see cref="T:SampSharp.GameMode.Quaternion" /> on the right of the sub sign.</param>
            <returns>The result of the quaternion negation.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.Parameters.ParameterAttribute">
            <summary>
                Indicates the type of the parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.Parameters.ParameterAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.Parameters.ParameterAttribute" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.Parameters.ParameterAttribute.Type">
            <summary>
                Gets the type.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.Parameters.CommandParameterInfo">
            <summary>
                Represents a command parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.Parameters.CommandParameterInfo.#ctor(System.String,SampSharp.GameMode.SAMP.Commands.ParameterTypes.ICommandParameterType,System.Boolean,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.Parameters.CommandParameterInfo" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="commandParameterType">Type of the command parameter.</param>
            <param name="isOptional">if set to <c>true</c> the parameter is optional.</param>
            <param name="defaultValue">The default value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if name or commandParameterType is null</exception>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.Parameters.CommandParameterInfo.CommandParameterType">
            <summary>
                Gets the type of the command parameter.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.Parameters.CommandParameterInfo.IsOptional">
            <summary>
                Gets a value indicating whether this instance is optional.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.Parameters.CommandParameterInfo.Name">
            <summary>
                Gets the name.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.Parameters.CommandParameterInfo.DefaultValue">
            <summary>
                Gets the default value.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ParameterTypes.EnumType`1">
            <summary>
                Represents an enum command parameter.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterTypes.EnumType`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.ParameterTypes.EnumType`1" /> class.
            </summary>
            <exception cref="T:System.ArgumentException">T must be an enumerated type</exception>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.ParameterTypes.EnumType`1.TestForValue">
            <summary>
                Gets or sets whether input should be matches against the enum values.
                When False, the input will only be matches against the names.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterTypes.EnumType`1.Parse(System.String@,System.Object@)">
            <summary>
                Gets the value for the occurance of this parameter type at the start of the commandText. The processed text will be
                removed from the commandText.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="output">The output.</param>
            <returns>
                true if parsed successfully; false otherwise.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ParameterTypes.FloatType">
            <summary>
                Represents a float command parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterTypes.FloatType.Parse(System.String@,System.Object@)">
            <summary>
                Gets the value for the occurance of this parameter type at the start of the commandText. The processed text will be
                removed from the commandText.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="output">The output.</param>
            <returns>
                true if parsed successfully; false otherwise.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ParameterTypes.ICommandParameterType">
            <summary>
                Contains methods for a command parameter type.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterTypes.ICommandParameterType.Parse(System.String@,System.Object@)">
            <summary>
                Gets the value for the occurance of this parameter type at the start of the commandText. The processed text will be
                removed from the commandText.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="output">The output.</param>
            <returns>true if parsed successfully; false otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ParameterTypes.IntegerType">
            <summary>
                Represents an integer command parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterTypes.IntegerType.Parse(System.String@,System.Object@)">
            <summary>
                Gets the value for the occurance of this parameter type at the start of the commandText. The processed text will be
                removed from the commandText.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="output">The output.</param>
            <returns>
                true if parsed successfully; false otherwise.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ParameterTypes.PlayerType">
            <summary>
                Represents a player command parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterTypes.PlayerType.Parse(System.String@,System.Object@)">
            <summary>
                Gets the value for the occurance of this parameter type at the start of the commandText. The processed text will be
                removed from the commandText.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="output">The output.</param>
            <returns>
                true if parsed successfully; false otherwise.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ParameterTypes.TextType">
            <summary>
                Represents a text command parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterTypes.TextType.Parse(System.String@,System.Object@)">
            <summary>
                Gets the value for the occurance of this parameter type at the start of the commandText. The processed text will be
                removed from the commandText.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="output">The output.</param>
            <returns>
                true if parsed successfully; false otherwise.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ParameterTypes.WordType">
            <summary>
                Represents a word command parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterTypes.WordType.Parse(System.String@,System.Object@)">
            <summary>
                Gets the value for the occurance of this parameter type at the start of the commandText. The processed text will be
                removed from the commandText.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="output">The output.</param>
            <returns>
                true if parsed successfully; false otherwise.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.CommandAttribute">
            <summary>
                Indicates a method is a player command.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.CommandAttribute" /> class.
            </summary>
            <param name="name">The name of the command.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandAttribute.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.CommandAttribute" /> class.
            </summary>
            <param name="names">The names of the command.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.Names">
            <summary>
                Gets the names.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.IgnoreCase">
            <summary>
                Gets or sets a value indicating whether to ignore the case of the command.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.Shortcut">
            <summary>
                Gets or sets the shortcut.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.DisplayName">
            <summary>
                Gets or sets the display name.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.UsageMessage">
            <summary>
                Gets or sets the usage message.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.PermissionChecker">
            <summary>
                Gets or sets the permission checker type.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.CommandCallableResponse">
            <summary>
            Contains the reponses available for callable commands
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.Commands.CommandCallableResponse.False">
            <summary>
                The specified parameters don't allow this command to be called.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.Commands.CommandCallableResponse.True">
            <summary>
                The specified parameters require this command to be called.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.Commands.CommandCallableResponse.Optional">
            <summary>
                The specified parameters allow this command to be called unless a different command accepts the parameters with a
                'True' response.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.CommandGroupAttribute">
            <summary>
                Indicates commands within this class or method are part of a command group.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandGroupAttribute.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.CommandGroupAttribute" /> class.
            </summary>
            <param name="paths">The relative paths of the command group.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandGroupAttribute.Paths">
            <summary>
            Gets the relative paths of the command group.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandGroupAttribute.PermissionChecker">
            <summary>
                Gets or sets the permission checker type.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.CommandPath">
            <summary>
            Represents a single path to a command.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandPath.Group">
            <summary>
                Gets the group.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandPath.Name">
            <summary>
                Gets the name.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandPath.FullName">
            <summary>
                Gets the full name.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandPath.Length">
            <summary>
                Gets the length.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandPath.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.CommandPath" /> struct.
            </summary>
            <param name="words">The words.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandPath.Matches(System.String,System.Boolean)">
            <summary>
                Matches the specified command text.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="ignoreCase">A value indicating whether to ignore the case of the command.</param>
            <returns>true if matches; false otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandPath.ToString">
            <summary>
                Returns the fully qualified type name of this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.CommandsManager">
            <summary>
                Represents the default commands manager.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.#ctor(SampSharp.GameMode.BaseMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.CommandsManager"/> class.
            </summary>
            <param name="gameMode">The game mode.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandsManager.GameMode">
            <summary>
                Gets the game mode.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.Register(SampSharp.GameMode.SAMP.Commands.CommandPath[],System.String,System.Boolean,SampSharp.GameMode.SAMP.Commands.PermissionCheckers.IPermissionChecker[],System.Reflection.MethodInfo,System.String)">
            <summary>
                Registers the specified command.
            </summary>
            <param name="commandPaths">The command paths.</param>
            <param name="displayName">The display name.</param>
            <param name="ignoreCase">if set to <c>true</c> ignore the case of the command.</param>
            <param name="permissionCheckers">The permission checkers.</param>
            <param name="method">The method.</param>
            <param name="usageMessage">The usage message.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.CreateCommand(SampSharp.GameMode.SAMP.Commands.CommandPath[],System.String,System.Boolean,SampSharp.GameMode.SAMP.Commands.PermissionCheckers.IPermissionChecker[],System.Reflection.MethodInfo,System.String)">
            <summary>
                Creates a command.
            </summary>
            <param name="commandPaths">The command paths.</param>
            <param name="displayName">The display name.</param>
            <param name="ignoreCase">if set to <c>true</c> ignore the case the command.</param>
            <param name="permissionCheckers">The permission checkers.</param>
            <param name="method">The method.</param>
            <param name="usageMessage">The usage message.</param>
            <returns>The created command</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.GetCommandForText(SampSharp.GameMode.World.BasePlayer,System.String)">
            <summary>
                Gets the command for the specified command text.
            </summary>
            <param name="player">The player.</param>
            <param name="commandText">The command text.</param>
            <returns>The found command.</returns>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandsManager.Commands">
            <summary>
                Gets a read-only collection of all registered commands.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.RegisterCommands``1">
            <summary>
                Loads all tagged commands from the assembly containing the specified type.
            </summary>
            <typeparam name="T">A type inside the assembly to load the commands form.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.RegisterCommands(System.Type)">
            <summary>
                Loads all tagged commands from the assembly containing the specified type.
            </summary>
            <param name="typeInAssembly">A type inside the assembly to load the commands form.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.RegisterCommands(System.Reflection.Assembly)">
            <summary>
                Loads all tagged commands from the specified <paramref name="assembly" />.
            </summary>
            <param name="assembly">The assembly to load the commands from.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.Register(SampSharp.GameMode.SAMP.Commands.ICommand)">
            <summary>
                Registers the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandsManager.Process(System.String,SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Processes the specified player.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="player">The player.</param>
            <returns>true if processed; false otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.DefaultCommand">
            <summary>
                Represents the default command based on a method with command attributes.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.DefaultCommand.#ctor(SampSharp.GameMode.SAMP.Commands.CommandPath[],System.String,System.Boolean,SampSharp.GameMode.SAMP.Commands.PermissionCheckers.IPermissionChecker[],System.Reflection.MethodInfo,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.DefaultCommand" /> class.
            </summary>
            <param name="names">The names.</param>
            <param name="displayName">The display name.</param>
            <param name="ignoreCase">if set to <c>true</c> ignore the case of the command.</param>
            <param name="permissionCheckers">The permission checkers.</param>
            <param name="method">The method.</param>
            <param name="usageMessage">The usage message.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DefaultCommand.Names">
            <summary>
                Gets the names.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DefaultCommand.DisplayName">
            <summary>
                Gets the display name.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DefaultCommand.IsCaseIgnored">
            <summary>
                Gets a value indicating whether this instance ignores the case of the command.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DefaultCommand.Method">
            <summary>
                Gets the method.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DefaultCommand.IsMethodMemberOfPlayer">
            <summary>
                Gets a value indicating whether this instance is method member of player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DefaultCommand.UsageMessage">
            <summary>
                Gets the usage message.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DefaultCommand.Parameters">
            <summary>
                Gets the parameters.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DefaultCommand.PermissionCheckers">
            <summary>
                Gets the permission checkers.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.DefaultCommand.IsValidCommandMethod(System.Reflection.MethodInfo)">
            <summary>
                Determines whether the specified method is a valid command method.
            </summary>
            <param name="method">The method.</param>
            <returns>true if valid; false otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.DefaultCommand.GetParameterType(System.Reflection.ParameterInfo,System.Int32,System.Int32)">
            <summary>
                Gets the type of the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns>The type of the parameter.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.DefaultCommand.SendUsageMessage(SampSharp.GameMode.World.BasePlayer)">
            <summary>
            Sends the usage message to the specified <paramref name="player"/>.
            </summary>
            <param name="player">The player.</param>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.DefaultCommand.SendPermissionDeniedMessage(SampSharp.GameMode.SAMP.Commands.PermissionCheckers.IPermissionChecker,SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Sends the permission denied message for the specified permission checker.
            </summary>
            <param name="permissionChecker">The permission checker.</param>
            <param name="player">The player.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.DefaultCommand.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.DefaultCommand.CanInvoke(SampSharp.GameMode.World.BasePlayer,System.String)">
            <summary>
                Determines whether this instance can be invoked by the specified player.
            </summary>
            <param name="player">The player.</param>
            <param name="commandText">The command text.</param>
            <returns>A value indicating whether this instance can be invoked.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.DefaultCommand.Invoke(SampSharp.GameMode.World.BasePlayer,System.String)">
            <summary>
                Invokes this command.
            </summary>
            <param name="player">The player.</param>
            <param name="commandText">The command text.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ICommand">
            <summary>
                Represents a player command.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ICommand.CanInvoke(SampSharp.GameMode.World.BasePlayer,System.String)">
            <summary>
                Determines whether this instance can be invoked by the specified player.
            </summary>
            <param name="player">The player.</param>
            <param name="commandText">The command text.</param>
            <returns>A value indicating whether this instance can be invoked.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ICommand.Invoke(SampSharp.GameMode.World.BasePlayer,System.String)">
            <summary>
                Invokes this command.
            </summary>
            <param name="player">The player.</param>
            <param name="commandText">The command text.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ICommandsManager">
            <summary>
                Contains methods for a command manager service.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.ICommandsManager.Commands">
            <summary>
                Gets a read-only collection of all registered commands.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ICommandsManager.RegisterCommands``1">
            <summary>
                Loads all tagged commands from the assembly containing the specified type.
            </summary>
            <typeparam name="T">A type inside the assembly to load the commands form.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ICommandsManager.RegisterCommands(System.Type)">
            <summary>
                Loads all tagged commands from the assembly containing the specified type.
            </summary>
            <param name="typeInAssembly">A type inside the assembly to load the commands form.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ICommandsManager.RegisterCommands(System.Reflection.Assembly)">
            <summary>
                Loads all tagged commands from the specified <paramref name="assembly" />.
            </summary>
            <param name="assembly">The assembly to load the commands from.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ICommandsManager.Register(SampSharp.GameMode.SAMP.Commands.ICommand)">
            <summary>
                Registers the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ICommandsManager.Process(System.String,SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Processes the specified player.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="player">The player.</param>
            <returns>true if processed; false otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.IPermissionChecker">
            <summary>
                Contains methods for a permission checker.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.IPermissionChecker.Message">
            <summary>
                Gets the message displayed when the player is denied permission.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.IPermissionChecker.Check(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Checks the permission for the specified player.
            </summary>
            <param name="player">The player.</param>
            <returns>true if allowed; false if denied.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.AdminChecker">
            <summary>
                Represents a permission checker for admins.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.AdminChecker.Message">
            <summary>
                Gets the message displayed when the player is denied permission.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.AdminChecker.Check(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Checks the permission for the specified player.
            </summary>
            <param name="player">The player.</param>
            <returns>true if allowed; false if denied.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.SilentAdminChecker">
            <summary>
                Represents a permission checker for admins without a permission denied message.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.SilentAdminChecker.Message">
            <summary>
                Gets the message displayed when the player is denied permission.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.PermissionCheckers.SilentAdminChecker.Check(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Checks the permission for the specified player.
            </summary>
            <param name="player">The player.</param>
            <returns>true if allowed; false if denied.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Delay">
            <summary>
                Contains methods for delaying an Action.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Delay.Action">
            <summary>
                Gets the action performed after this Delay.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Delay.Run(System.Int32,System.Action)">
            <summary>
                Runs an action after a given delay.
            </summary>
            <param name="delay">Delay in miliseconds.</param>
            <param name="action">Action to perform after the given <paramref name="delay" />.</param>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.KeyChangeHandlerSet">
            <summary>
                Contains a set of KeyHandlers for different keystates.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.KeyChangeHandlerSet.#ctor">
            <summary>
                Initializes a new instance of the KeyChangeHandlerSet class.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyChangeHandlerSet.Pressed">
            <summary>
                Gets a set of KeyHandlers which are triggered once a key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyChangeHandlerSet.Released">
            <summary>
                Gets a set of KeyHandlers which are triggered once a key has been released.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.KeyChangeHandlerSet.Handle(System.Object,SampSharp.GameMode.Events.KeyStateChangedEventArgs)">
            <summary>
                Handles a change in PlayerKeyState.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Object containing information about the event.</param>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.KeyHandlerSet">
            <summary>
                Contains a set of KeyHandlers.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.KeyHandlerSet.#ctor(System.Func{SampSharp.GameMode.Events.KeyStateChangedEventArgs,SampSharp.GameMode.Definitions.Keys,System.Boolean})">
            <summary>
                Initializes a new instance of the KeyHandlerSet class.
            </summary>
            <param name="check">The check to run in Handle before calling an EventHandler.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Action">
            <summary>
                Occurs when the Keys.Action key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Crouch">
            <summary>
                Occurs when the Keys.Crouch key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Fire">
            <summary>
                Occurs when the Keys.Fire key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Sprint">
            <summary>
                Occurs when the Keys.Sprint key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.SecondaryAttack">
            <summary>
                Occurs when the Keys.Attack key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Jump">
            <summary>
                Occurs when the Keys.Jump key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.LookRight">
            <summary>
                Occurs when the Keys.Right key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Handbrake">
            <summary>
                Occurs when the Keys.Handbrake key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Aim">
            <summary>
                Occurs when the Keys.Aim key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.LookLeft">
            <summary>
                Occurs when the Keys.Left key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Submission">
            <summary>
                Occurs when the Keys.Submission or Keys.LookBehind key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.LookBehind">
            <summary>
                Occurs when the Keys.LookBehind or Keys.Submission key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Walk">
            <summary>
                Occurs when the Keys.Walk key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.AnalogUp">
            <summary>
                Occurs when the Keys.Up key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.AnalogDown">
            <summary>
                Occurs when the Keys.Down key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.AnalogLeft">
            <summary>
                Occurs when the Keys.Left key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.AnalogRight">
            <summary>
                Occurs when the Keys.Right key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.Yes">
            <summary>
                Occurs when the Keys.Yes key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.No">
            <summary>
                Occurs when the Keys.No key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyHandlerSet.CtrlBack">
            <summary>
                Occurs when the Keys.CtrlBack key has been pressed.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.KeyHandlerSet.Handle(System.Object,SampSharp.GameMode.Events.KeyStateChangedEventArgs)">
            <summary>
                Handles a change in PlayerKeyState.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Object containing information about the event.</param>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.PrintTraceListener">
            <summary>
                TraceListener that writes to the console.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PrintTraceListener.Write(System.String)">
            <summary>
                When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PrintTraceListener.WriteLine(System.String)">
            <summary>
                When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a
                line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.PriorityKeyHandler">
            <summary>
                Contains a set priority events.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.PriorityKeyHandler.HighPriority">
            <summary>
                Occurs as first handler.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.PriorityKeyHandler.NormalPriority">
            <summary>
                Occurs as second handler, if the no <see cref="E:SampSharp.GameMode.SAMP.PriorityKeyHandler.HighPriority" /> have canceled the event.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.PriorityKeyHandler.LowPriority">
            <summary>
                Occurs as third handler, if the no <see cref="E:SampSharp.GameMode.SAMP.PriorityKeyHandler.HighPriority" /> or <see cref="E:SampSharp.GameMode.SAMP.PriorityKeyHandler.NormalPriority" /> have canceled the
                event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PriorityKeyHandler.Handle(System.Object,SampSharp.GameMode.Events.KeyStateChangedEventArgs)">
            <summary>
                Handles a change in PlayerKeyState.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Object containing information about the event.</param>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.PVarCollection">
            <summary>
                Represents a collection of player variables.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PVarCollection.#ctor(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.PVarCollection" /> class.
            </summary>
            <param name="player">The player.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.PVarCollection.Item(System.Int32)">
            <summary>
                Gets or sets the <see cref="T:System.Object" /> at the specified index.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.PVarCollection.Item(System.String)">
            <summary>
                Gets or sets the <see cref="T:System.Object" /> with the specified varname.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.PVarCollection.UpperIndex">
            <summary>
                Gets the upper index of the variables list.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PVarCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PVarCollection.Get``1(System.String)">
            <summary>
                Gets the variable with the specified varname.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="varname">The varname.</param>
            <returns>The variable with the specified varname.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PVarCollection.Exists(System.String)">
            <summary>
                Checks whether a variable with the specified varname exists.
            </summary>
            <param name="varname">The varname.</param>
            <returns>True if the variable exists; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PVarCollection.GetType(System.String)">
            <summary>
                Gets the type of the variable with the given <paramref name="varname" />.
            </summary>
            <param name="varname">The varname.</param>
            <returns>The type of the variable.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PVarCollection.NameAtIndex(System.Int32)">
            <summary>
                Gets the name at the given <paramref name="index" />.
            </summary>
            <param name="index">The index.</param>
            <returns>The name at the given index.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.PVarCollection.Delete(System.String)">
            <summary>
                Deletes the specified varname.
            </summary>
            <param name="varname">The varname.</param>
            <returns>True on success; False otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Server">
            <summary>
                Contains methods affecting the SA-MP server.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Server.MaxPlayers">
            <summary>
                Gets the maximum number of players that can join the server, as set by the server var 'maxplayers' in server.cfg.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Server.NetworkStats">
            <summary>
            Gets the network stats as a string.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Server.Config">
            <summary>
                Gets the server configuration.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Server.Variables">
            <summary>
                Gets the server variables.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.BlockIPAddress(System.String,System.TimeSpan)">
            <summary>
                Blocks an IP address from further communication with the server
                for a set amount of time (with wildcards allowed).
                Players trying to connect to the server with a blocked IP address
                will receive the generic "You are banned from this server." message.
                Players that are online on the specified IP before the block
                will timeout after a few seconds and, upon reconnect,
                will receive the same message.
            </summary>
            <param name="ip">
                The IP to block.
                <remarks>
                    Wildcards can be used with this function,
                    for example blocking the IP '6.9.*.*' will block all IPs where the first two octets are 6 and 9 respectively.
                    Any number can be in place of an asterisk.
                </remarks>
            </param>
            <param name="time">The time that the connection will be blocked for. 0 can be used for an indefinite block.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.UnBlockIPAddress(System.String)">
            <summary>
                Unblock an IP address that was previously blocked using <see cref="M:SampSharp.GameMode.SAMP.Server.BlockIPAddress(System.String,System.TimeSpan)" />.
            </summary>
            <param name="ip">The IP address to unblock</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.GetConsoleVariable``1(System.String)">
            <summary>
                Retrieve a console variable.
            </summary>
            <typeparam name="T">
                The type to which the variable should be cast. Supported types: <see cref="T:System.Int32" />,
                <see cref="T:System.Boolean" />, <see cref="T:System.String" />.
            </typeparam>
            <param name="varName">The server variable to read.</param>
            <returns>The value of the server variable.</returns>
            <exception cref="T:System.NotSupportedException"><typeparamref name="T" /> is not supported by SA-MP.</exception>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.GetTickCount">
            <summary>
                Returns the uptime of the actual server in milliseconds.
            </summary>
            <returns>Uptime of the SA:MP server(NOT the physical box).</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.SetCodepage(System.String)">
            <summary>
                Sets the currently active codepage.
            </summary>
            <param name="codepage">The name of the codepage to use.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.Print(System.String)">
            <summary>
                Prints the specified message to the console.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.SendRconCommand(System.String)">
            <summary>
                Sends an RCON command.
            </summary>
            <param name="command">The RCON command to be executed.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.ToggleDebugOutput(System.Boolean)">
            <summary>
                Toggle debug output in console.
            </summary>
            <param name="toggle">True to log debug output to console, False otherwise.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.ConnectNPC(System.String,System.String)">
            <summary>
                Connect an NPC to the server.
            </summary>
            <param name="name">The name the NPC should connect as. Must follow the same rules as normal player names.</param>
            <param name="script">The NPC script name that is located in the npcmodes folder (without the .amx extension).</param>
            <returns>
                An instance of <see cref="T:SampSharp.GameMode.World.BasePlayer" /> based on the first available player slot. If no slots are available,
                null.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.SetWeather(System.Int32)">
            <summary>
                Set the world weather for all players.
            </summary>
            <param name="weatherid">The weather to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.SetWorldTime(System.Int32)">
            <summary>
                Sets the world time to a specific hour.
            </summary>
            <param name="hour">Which time to set.</param>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.ServerConfig">
            <summary>
                Represents the server configuration file
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.ServerConfig.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.ServerConfig" /> class.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.ServerConfig.Item(System.String)">
            <summary>
                Gets the <see cref="T:System.String" /> with the specified key.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.ServerConfig.Get(System.String,System.Boolean)">
            <summary>
                Gets the configuration value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="trimSpaces">If set to <c>true</c> trim white-space characters.</param>
            <returns>
                The value.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.ServerConfig.Get(System.String,System.String,System.Boolean)">
            <summary>
                Gets the configuration value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="trimSpaces">If set to <c>true</c> trim white-space characters.</param>
            <returns>
                The value.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.ServerConfig.Set(System.String,System.String)">
            <summary>
                Sets the configuration value with the specified key to the specified value for the current session.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.SVarCollection">
            <summary>
                Represents a collection of server variables.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.SVarCollection.Item(System.Int32)">
            <summary>
                Gets or sets the <see cref="T:System.Object" /> at the specified index.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.SVarCollection.Item(System.String)">
            <summary>
                Gets or sets the <see cref="T:System.Object" /> with the specified varname.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.SVarCollection.UpperIndex">
            <summary>
                Gets the upper index of the variables list.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.SVarCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.SVarCollection.Get``1(System.String)">
            <summary>
                Gets the variable with the specified varname.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="varname">The varname.</param>
            <returns>The variable with the specified varname.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.SVarCollection.Exists(System.String)">
            <summary>
                Checks whether a variable with the specified varname exists.
            </summary>
            <param name="varname">The varname.</param>
            <returns>True if the variable exists; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.SVarCollection.GetType(System.String)">
            <summary>
                Gets the type of the variable with the given <paramref name="varname" />.
            </summary>
            <param name="varname">The varname.</param>
            <returns>The type of the variable.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.SVarCollection.NameAtIndex(System.Int32)">
            <summary>
                Gets the name at the given <paramref name="index" />.
            </summary>
            <param name="index">The index.</param>
            <returns>The name at the given index.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.SVarCollection.Delete(System.String)">
            <summary>
                Deletes the specified varname.
            </summary>
            <param name="varname">The varname.</param>
            <returns>True on success; False otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Color">
            <summary>
                Represents a hexidecimal color.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> representation of this Color.
            </summary>
            <returns>A <see cref="T:System.String" /> representation of this Color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="r">The red value of this Color.</param>
            <param name="g">The green value of this Color.</param>
            <param name="b">The blue value of this Color.</param>
            <param name="a">The alpha value of this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="r">The red value of this Color.</param>
            <param name="g">The green value of this Color.</param>
            <param name="b">The blue value of this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="r">The red value of this Color.</param>
            <param name="g">The green value of this Color.</param>
            <param name="b">The blue value of this Color.</param>
            <param name="a">The alpha value of this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="r">The red value of this Color.</param>
            <param name="g">The green value of this Color.</param>
            <param name="b">The blue value of this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="r">The red value of this Color.</param>
            <param name="g">The green value of this Color.</param>
            <param name="b">The blue value of this Color.</param>
            <param name="a">The alpha value of this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="r">The red value of this Color.</param>
            <param name="g">The green value of this Color.</param>
            <param name="b">The blue value of this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="color">The Color values to use for this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.UInt32)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="color">The Color values to use for this Color.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.AliceBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0F8FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.AntiqueWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAEBD7.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Aqua">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Aquamarine">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7FFFD4.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Azure">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0FFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Beige">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5F5DC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Bisque">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4C4.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Black">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.BlanchedAlmond">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFEBCD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Blue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF0000FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.BlueViolet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8A2BE2.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Brown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA52A2A.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.BurlyWood">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDEB887.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.CadetBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF5F9EA0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Chartreuse">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7FFF00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Chocolate">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD2691E.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Coral">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF7F50.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.CornflowerBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6495ED.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Cornsilk">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF8DC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Crimson">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDC143C.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Cyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00008B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkCyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008B8B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkGoldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB8860B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA9A9A9.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF006400.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkKhaki">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBDB76B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkMagenta">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B008B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkOliveGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF556B2F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkOrange">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF8C00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkOrchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9932CC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B0000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkSalmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE9967A.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8FBC8F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkSlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF483D8B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkSlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF2F4F4F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00CED1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkViolet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9400D3.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DeepPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF1493.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DeepSkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00BFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DimGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF696969.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DodgerBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF1E90FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Firebrick">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB22222.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.FloralWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFAF0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.ForestGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF228B22.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Fuchsia">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Gainsboro">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDCDCDC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.GhostWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF8F8FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Gold">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFD700.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Goldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDAA520.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Gray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF808080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Green">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.GreenYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFADFF2F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Honeydew">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0FFF0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.HotPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF69B4.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.IndianRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFCD5C5C.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Indigo">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4B0082.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Ivory">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFF0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Khaki">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0E68C.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Lavender">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE6E6FA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LavenderBlush">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF0F5.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LawnGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7CFC00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LemonChiffon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFACD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFADD8E6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightCoral">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF08080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightCyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE0FFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightGoldenrodYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAFAD2.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD3D3D3.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF90EE90.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFB6C1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSalmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFA07A.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF20B2AA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF87CEFA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF778899.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSteelBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB0C4DE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFE0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Lime">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FF00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LimeGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF32CD32.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Linen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAF0E6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Magenta">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Maroon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF800000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumAquamarine">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF66CDAA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF0000CD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumOrchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBA55D3.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumPurple">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9370DB.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF3CB371.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumSlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7B68EE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumSpringGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FA9A.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF48D1CC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumVioletRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFC71585.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MidnightBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF191970.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MintCream">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5FFFA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MistyRose">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4E1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Moccasin">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4B5.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.NavajoWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFDEAD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Navy">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF000080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.OldLace">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFDF5E6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Olive">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF808000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.OliveDrab">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6B8E23.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Orange">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFA500.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.OrangeRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF4500.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Orchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDA70D6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PaleGoldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFEEE8AA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PaleGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF98FB98.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PaleTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFAFEEEE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PaleVioletRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDB7093.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PapayaWhip">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFEFD5.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PeachPuff">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFDAB9.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Peru">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFCD853F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Pink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFC0CB.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Plum">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDDA0DD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PowderBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB0E0E6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Purple">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF800080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Red">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF0000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.RosyBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBC8F8F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.RoyalBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4169E1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SaddleBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B4513.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Salmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFA8072.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SandyBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF4A460.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF2E8B57.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SeaShell">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF5EE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Sienna">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA0522D.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Silver">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFC0C0C0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF87CEEB.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6A5ACD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF708090.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Snow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFAFA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SpringGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FF7F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SteelBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4682B4.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Tan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD2B48C.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Teal">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Thistle">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD8BFD8.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Tomato">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF6347.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Transparent">
            <summary>
                Gets a system-defined color.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Turquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF40E0D0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Violet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFEE82EE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Wheat">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5DEB3.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.White">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.WhiteSmoke">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5F5F5.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Yellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFF00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.YellowGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9ACD32.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.R">
            <summary>
                Gets the red value of this Color.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.G">
            <summary>
                Gets the green value of this Color.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.B">
            <summary>
                Gets the blue value of this Color.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.A">
            <summary>
                Gets the alpha value of this Color.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.ToInteger(SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns an Integer representation of this Color.
            </summary>
            <param name="colorFormat">The ColorFormat to use in the conversion.</param>
            <returns>An Integer representation of this Color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.FromInteger(System.UInt32,SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns an Color representation of this Integer.
            </summary>
            <param name="color">The color to convert.</param>
            <param name="colorFormat">The ColorFormat to use in the conversion.</param>
            <returns>An Color representation of this Integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.FromInteger(System.Int32,SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns an Color representation of the specified integer.
            </summary>
            <param name="color">The color to convert.</param>
            <param name="colorFormat">The ColorFormat to use in the conversion.</param>
            <returns>A Color representation of the input.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.FromString(System.String,SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns an Color representation of the specified string.
            </summary>
            <param name="input">The color to convert.</param>
            <param name="colorFormat">The ColorFormat to use in the conversion.</param>
            <returns>A Color representation of the input.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.ToString(SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns a <see cref="T:System.String" /> representation of this Color.
            </summary>
            <param name="colorFormat">The format to use to convert the color to a string.</param>
            <returns>A <see cref="T:System.String" /> representation of this Color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.Lerp(SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color,System.Single)">
            <summary>
                Performs linear interpolation of <see cref="T:SampSharp.GameMode.SAMP.Color" />.
            </summary>
            <param name="value1">Source <see cref="T:SampSharp.GameMode.SAMP.Color" />.</param>
            <param name="value2">Destination <see cref="T:SampSharp.GameMode.SAMP.Color" />.</param>
            <param name="amount">Interpolation factor.</param>
            <returns>Interpolated <see cref="T:SampSharp.GameMode.SAMP.Color" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.Darken(System.Single)">
            <summary>
                Returns this color darkened specified <paramref name="amount" />.
            </summary>
            <param name="amount">The amount.</param>
            <returns>The darkened color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.Lighten(System.Single)">
            <summary>
                Returns this color lightened specified <paramref name="amount" />.
            </summary>
            <param name="amount">The amount.</param>
            <returns>The lightened color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.op_Implicit(SampSharp.GameMode.SAMP.Color)~System.Int32">
            <summary>
                Cast a Color to an integer.
            </summary>
            <param name="value">The Color to cast to an integer.</param>
            <returns>The resulting integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.op_Implicit(System.Int32)~SampSharp.GameMode.SAMP.Color">
            <summary>
                Cast an integer to a Color.
            </summary>
            <param name="value">The integer to cast to a Color.</param>
            <returns>The resulting Color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.op_Implicit(System.UInt32)~SampSharp.GameMode.SAMP.Color">
            <summary>
                Cast an unsigned integer to a Color.
            </summary>
            <param name="value">The unsigned integer to cast to a Color.</param>
            <returns>The resulting Color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.op_Equality(SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="a">The left color.</param>
            <param name="b">The right color.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.op_Inequality(SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="a">The left color.</param>
            <param name="b">The right color.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.op_Multiply(SampSharp.GameMode.SAMP.Color,System.Single)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="value">The value.</param>
            <param name="scale">The scale.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.op_Explicit(SampSharp.GameMode.SAMP.Color)~SampSharp.GameMode.Vector3">
            <summary>
                Performs an explicit conversion from <see cref="T:SampSharp.GameMode.SAMP.Color" /> to <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.Equals(SampSharp.GameMode.SAMP.Color)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="other" /> and this instance represent the same value; otherwise, false.
            </returns>
            <param name="other">Another object to compare to. </param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.Equals(System.Object)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.ColorFormat">
            <summary>
                Contains different formats of String representations of Color instances.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.ColorFormat.RGBA">
            <summary>
                {RRGGBBAA}
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.ColorFormat.ARGB">
            <summary>
                {AARRGGBB}
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.ColorFormat.RGB">
            <summary>
                {RRGGBB}
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Timer">
            <summary>
                Represents a SA:MP timer.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.#ctor(System.Double,System.Boolean)">
            <summary>
                Initializes a new instance of the Timer class and starts the timer.
            </summary>
            <param name="interval">The interval in miliseconds.</param>
            <param name="isRepeating">Whether to IsRepeating the timer (True); or stop after the first Tick(False).</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.#ctor(System.Double,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the Timer class.
            </summary>
            <param name="interval">The interval in miliseconds.</param>
            <param name="isRepeating">Whether to IsRepeating the timer (True); or stop after the first Tick(False).</param>
            <param name="running">Whether the timer is running.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.#ctor(System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the Timer class and starts the timer.
            </summary>
            <param name="interval">The interval in miliseconds.</param>
            <param name="isRepeating">Whether to IsRepeating the timer (True); or stop after the first Tick(False).</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the Timer class.
            </summary>
            <param name="interval">The interval in miliseconds.</param>
            <param name="isRepeating">Whether to IsRepeating the timer (True); or stop after the first Tick(False).</param>
            <param name="running">Whether the timer is running.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
                Initializes a new instance of the Timer class and starts the timer.
            </summary>
            <param name="interval">The interval.</param>
            <param name="isRepeating">Whether to IsRepeating the timer (True); or stop after the first Tick(False).</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.#ctor(System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the Timer class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="isRepeating">Whether to IsRepeating the timer (True); or stop after the first Tick(False).</param>
            <param name="running">Whether the timer is running.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.Interval">
            <summary>
                Gets or sets the interval of this <see cref="T:SampSharp.GameMode.SAMP.Timer" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.IsRepeating">
            <summary>
                Gets or sets whether this Timer is a repeating  <see cref="T:SampSharp.GameMode.SAMP.Timer" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.IsRunning">
            <summary>
                Gets or sets whether this Timer is running.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.Tag">
            <summary>
                Gets or sets a tag containing about this Timer.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.Id">
            <summary>
                Gets the ID of this Timer.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.Dispose(System.Boolean)">
            <summary>
                Removes this instance from the pool.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.Timer.Tick">
            <summary>
                Occurs when the interval has elapsed.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.OnTick(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.SAMP.Timer.Tick" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.Restart">
            <summary>
                Restarts this Timer.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Service">
            <summary>
                Defines the base implementation for the <see cref="T:SampSharp.GameMode.IService" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Service.#ctor(SampSharp.GameMode.BaseMode)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Service" /> class.
            </summary>
            <param name="gameMode">The game mode.</param>
        </member>
        <member name="P:SampSharp.GameMode.Service.GameMode">
            <summary>
                Gets the game mode.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.GameModeServiceContainer">
            <summary>
                A collection of game mode services.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.GameModeServiceContainer.GetService(System.Type)">
            <summary>
                Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
                A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type
                <paramref name="serviceType" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">serviceType</exception>
        </member>
        <member name="M:SampSharp.GameMode.GameModeServiceContainer.AddService(System.Type,SampSharp.GameMode.IService)">
            <summary>
                Adds the service of the specified <paramref name="serviceType" />.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="service">The service.</param>
            <exception cref="T:System.ArgumentNullException">
                serviceType
                or
                service
            </exception>
            <exception cref="T:System.ArgumentException">serviceType must be of type IService</exception>
        </member>
        <member name="M:SampSharp.GameMode.GameModeServiceContainer.AddService``1(``0)">
            <summary>
                Adds the service of the specified <typeparamref name="TServiceType" />.
            </summary>
            <param name="service">The service.</param>
            <typeparam name="TServiceType">Type of the service.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                serviceType
                or
                service
            </exception>
            <exception cref="T:System.ArgumentException">serviceType must be of type IService</exception>
        </member>
        <member name="M:SampSharp.GameMode.GameModeServiceContainer.GetService``1">
            <summary>
                Gets the service object of the specified type.
            </summary>
            <typeparam name="TServiceType">The type of service object to get.</typeparam>
            <returns>
                A service object of type <typeparamref name="TServiceType" />.-or- null if there is no service object of type
                <typeparamref name="TServiceType" />
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.Tools.ASyncWaiter`2">
            <summary>
                Contains methods for awaiting calls.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Tools.ASyncWaiter`2.Result(`0)">
            <summary>
                Waits for the <see cref="M:SampSharp.GameMode.Tools.ASyncWaiter`2.Fire(`0,`1)" /> to be called with the specified <paramref name="key" />.
            </summary>
            <param name="key">The key.</param>
            <returns>The arguments passed to the <see cref="M:SampSharp.GameMode.Tools.ASyncWaiter`2.Fire(`0,`1)" /> method.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.ASyncWaiter`2.Fire(`0,`1)">
            <summary>
                Fires the task with the given <paramref name="key" />.
            </summary>
            <param name="key">The key.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:SampSharp.GameMode.Tools.ASyncWaiter`2.Cancel(`0)">
            <summary>
                Cancels the task for the specified <paramref name="key" />.
            </summary>
            <param name="key">The key of the task to cancel.</param>
        </member>
        <member name="T:SampSharp.GameMode.Tools.MapAndreas">
            <summary>
                Contains methods for reading SA height map files.
            </summary>
            <remarks>
                If MapAndreas 1.2(.1) is loaded, the plugin will be used instead of
                the managed logic. This is to save your precious resources. Most of
                this logic has been copied from MapAndreas v1.2 released at
                http://forum.sa-mp.com/showthread.php?t=275492
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Load(SampSharp.GameMode.Tools.MapAndreasMode)">
            <summary>
                Loads the map data into the memory.
            </summary>
            <param name="mode">
                The <see cref="T:SampSharp.GameMode.Tools.MapAndreasMode" /> to load with.
            </param>
            <exception cref="T:System.IO.FileLoadException">
                Thrown if the file couldn't be
                loaded.
            </exception>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Unload">
            <summary>
                Unloads the map data from the memory.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Find(System.Single,System.Single)">
            <summary>
                Finds highest Z point (ground level) for the provided point.
            </summary>
            <param name="x">X-coordinate of the point.</param>
            <param name="y">Y-coordinate of the point.</param>
            <returns>Ground level at the given point.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Find(SampSharp.GameMode.Vector3)">
            <summary>
                Finds highest Z point (ground level) for the provided point.
            </summary>
            <param name="point">The point to look at.</param>
            <returns>Ground level at the given point.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Find(SampSharp.GameMode.Vector3@)">
            <summary>
                Finds highest Z point (ground level) for the provided point.
            </summary>
            <param name="point">The point to move to ground level.</param>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.FindAverage(System.Single,System.Single)">
            <summary>
                Calculates a linear approximation of the ground level at the provided point.
            </summary>
            <param name="x">X-coordinate of the point.</param>
            <param name="y">Y-coordinate of the point.</param>
            <returns>A approximation of the ground level at the given point.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.FindAverage(SampSharp.GameMode.Vector3)">
            <summary>
                Calculates a linear approximation of the ground level at the provided point.
            </summary>
            <param name="point">The point to look at.</param>
            <returns>A approximation of the ground level at the given point.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.FindAverage(SampSharp.GameMode.Vector3@)">
            <summary>
                Calculates a linear approximation of the ground level at the provided point.
            </summary>
            <param name="point">The point to move to the approximate ground level.</param>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.SetZ(System.Single,System.Single,System.Single)">
            <summary>
                Set the highest Z point at the provided point.
            </summary>
            <param name="x">X-coordinate of the point.</param>
            <param name="y">Y-coordinate of the point.</param>
            <param name="z">Z-coordinate of the hight at the provided point.</param>
            <returns>True on success; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.SetZ(SampSharp.GameMode.Vector3)">
            <summary>
                Set the highest Z point at the provided point.
            </summary>
            <param name="point">The point with the new Z-coordinate.</param>
            <returns>True on success; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Save(System.String)">
            <summary>
                Saves the current height map to the provided file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:SampSharp.GameMode.Tools.Sync">
            <summary>
                Contains methods to run an action on the main thread from a different thread.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Tools.Sync.IsRequired">
            <summary>
                Gets a value indicating whether a sync is required before calling natives.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Sync.Run(System.Action)">
            <summary>
                Run a function on the main thread.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Sync.RunSync(System.Action)">
            <summary>
                Run a function on the main thread synchronously and await its result.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Sync.RunSync``1(System.Func{``0})">
            <summary>
                Run a function on the main thread synchronously and await its result.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Sync.RunAsync(System.Action)">
            <summary>
                Run a function on the main  thread.
            </summary>
            <param name="action">The action the run</param>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Sync.RunAsync``1(System.Func{``0})">
            <summary>
                Run a function on the main thread.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that the action encapsulates.</typeparam>
            <param name="action">The action to run.</param>
            <returns>The return value of the method that the action encapsulates.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Tools.Disposable">
            <summary>
                Defines methods to release allocated resources and to check whether this resource has been disposed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Tools.Disposable.IsDisposed">
            <summary>
                Gets whether this resource has been disposed.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Disposable.Dispose">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Disposable.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:SampSharp.GameMode.Tools.Disposable" /> class.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.Tools.Disposable.Disposed">
            <summary>
                Occurs when this isntance has been disposed.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Disposable.AssertNotDisposed">
            <summary>
                Checks whether this instance has been disposed. If it has, it throws an exception.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed.</exception>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Disposable.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="T:SampSharp.GameMode.Tools.KeyUtils">
            <summary>
                Contains methods to check for keypresses.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.HasPressed(SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys" /> have been pressed.
            </summary>
            <param name="newKeys">New <see cref="T:SampSharp.GameMode.Definitions.Keys" />.</param>
            <param name="oldKeys">Old <see cref="T:SampSharp.GameMode.Definitions.Keys" />.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys" /> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys" /> have been pressed.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.HasPressed(SampSharp.GameMode.Events.KeyStateChangedEventArgs,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys" /> have been pressed.
            </summary>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.KeyStateChangedEventArgs" />.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys" /> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys" /> have been pressed.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.HasReleased(SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys" /> have been released.
            </summary>
            <param name="newKeys">New <see cref="T:SampSharp.GameMode.Definitions.Keys" />.</param>
            <param name="oldKeys">Old <see cref="T:SampSharp.GameMode.Definitions.Keys" />.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys" /> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys" /> have been released.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.HasReleased(SampSharp.GameMode.Events.KeyStateChangedEventArgs,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys" /> have been released.
            </summary>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.KeyStateChangedEventArgs" />.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys" /> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys" /> have been released.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.IsHolding(SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys" /> are being hold.
            </summary>
            <param name="newKeys">New <see cref="T:SampSharp.GameMode.Definitions.Keys" />.</param>
            <param name="oldKeys">Old <see cref="T:SampSharp.GameMode.Definitions.Keys" />.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys" /> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys" /> are being hold.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.IsHolding(SampSharp.GameMode.Events.KeyStateChangedEventArgs,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys" /> are being hold.
            </summary>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.KeyStateChangedEventArgs" />.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys" /> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys" /> are being hold.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Tools.MapAndreasMode">
            <summary>
                Contains methods of reading SA height map files.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Tools.MapAndreasMode.None">
            <summary>
                Read no file.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Tools.MapAndreasMode.Minimal">
            <summary>
                Read the minimal file.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Tools.MapAndreasMode.Full">
            <summary>
                Read the full file.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Tools.MapAndreasMode.NoBuffer">
            <summary>
                Does not buffer the map data in memory.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Vector2">
            <summary>
                Represents a 2D vector.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.#ctor(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector2" /> struct.
            </summary>
            <param name="x">Value of the x component.</param>
            <param name="y">Value of the y component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector2" /> struct.
            </summary>
            <param name="x">Value of the x component.</param>
            <param name="y">Value of the y component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector2" /> struct with same values for x and y components.
            </summary>
            <param name="xy">Value of x and y components.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.#ctor(System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector2" /> struct with same values for x and y components.
            </summary>
            <param name="xy">Value of x and y components.</param>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.X">
            <summary>
                Gets the X component of this <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.Y">
            <summary>
                Gets the Y component of this <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.Zero">
            <summary>
                Returns an empty <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.One">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector2" /> with each component set to 1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.UnitX">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector2" /> with components 1, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.UnitY">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector2" /> with components 0, 1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.Length">
            <summary>
                Gets the length of this <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.SquaredLength">
            <summary>
                Gets the squared length of this <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector2.IsEmpty">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.Vector2" /> is empty.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.DistanceTo(SampSharp.GameMode.Vector2)">
            <summary>
                Gets the distance to another <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
            <param name="other">The <see cref="T:SampSharp.GameMode.Vector2" /> to calculate the distance to.</param>
            <returns>The distance between the vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Normalized">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> instance with the components normalized to a single unit.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Barycentric(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,System.Single,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains the cartesian coordinates of a vector specified in barycentric
                coordinates and relative to 2d-triangle.
            </summary>
            <param name="value1">The first vector of 2d-triangle.</param>
            <param name="value2">The second vector of 2d-triangle.</param>
            <param name="value3">The third vector of 2d-triangle.</param>
            <param name="amount1">
                Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of
                2d-triangle.
            </param>
            <param name="amount2">
                Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of
                2d-triangle.
            </param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.CatmullRom(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Clamp(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Distance(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.DistanceSquared(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Dot(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Returns a dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Hermite(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Lerp(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Addition(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Adds the left <see cref="T:SampSharp.GameMode.Vector2" />'s components to the right <see cref="T:SampSharp.GameMode.Vector2" />'s components and stores it in
                a
                new <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <returns>A new <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Max(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:SampSharp.GameMode.Vector2" /> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Min(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:SampSharp.GameMode.Vector2" /> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Normalize(SampSharp.GameMode.Vector2)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Reflect(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="normal">Reflection normal.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.SmoothStep(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="value2">Source <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Transform(SampSharp.GameMode.Vector2,SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains a transformation of 2d-vector by the specified
                <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="position">Source <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="matrix">The transformation <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <returns>Transformed <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Transform(SampSharp.GameMode.Vector2,SampSharp.GameMode.Quaternion)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains a transformation of 2d-vector by the specified
                <see cref="T:SampSharp.GameMode.Quaternion" />, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="rotation">The <see cref="T:SampSharp.GameMode.Quaternion" /> which contains rotation transformation.</param>
            <returns>Transformed <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.TransformNormal(SampSharp.GameMode.Vector2,SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector2" /> that contains a transformation of the specified normal by the specified
                <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="normal">Source <see cref="T:SampSharp.GameMode.Vector2" /> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <returns>Transformed normal.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Subtraction(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Subtracts the right <see cref="T:SampSharp.GameMode.Vector2" />'s components from the left <see cref="T:SampSharp.GameMode.Vector2" />'s components and
                stores
                it in a new <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <returns>A new <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_UnaryNegation(SampSharp.GameMode.Vector2)">
            <summary>
                Creates a <see cref="T:SampSharp.GameMode.Vector2" /> with the components set to the negative values of the given
                <paramref name="vector" />'s components.
            </summary>
            <param name="vector">The vector to invert.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Multiply(System.Single,SampSharp.GameMode.Vector2)">
            <summary>
                Multiplies the components <see cref="T:SampSharp.GameMode.Vector2" /> by the given scalar and stores them in a new
                <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="vector">The <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Multiply(SampSharp.GameMode.Vector2,System.Single)">
            <summary>
                Multiplies the components <see cref="T:SampSharp.GameMode.Vector2" /> by the given scalar and stores them in a new
                <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
            <param name="vector">The <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="scalar">The scalar.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Multiply(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Multiplies the components <see cref="T:SampSharp.GameMode.Vector2" /> by the components of the right <see cref="T:SampSharp.GameMode.Vector2" /> and stores
                them in a new <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Division(SampSharp.GameMode.Vector2,System.Single)">
            <summary>
                Divides the components <see cref="T:SampSharp.GameMode.Vector2" /> by the given scalar and stores them in a new <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
            <param name="vector">The <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="scalar">The scalar.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Division(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Divides the components <see cref="T:SampSharp.GameMode.Vector2" /> by the components of the right <see cref="T:SampSharp.GameMode.Vector2" /> and stores them
                in a new <see cref="T:SampSharp.GameMode.Vector2" />.
            </summary>
            <param name="left">The numerator.</param>
            <param name="right">The denominator.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector2" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Equality(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Tests whether all components of both <see cref="T:SampSharp.GameMode.Vector2" /> are equivalent.
            </summary>
            <param name="left">Instance of <see cref="T:SampSharp.GameMode.Vector2" /> to compare.</param>
            <param name="right">Instance of <see cref="T:SampSharp.GameMode.Vector2" /> to compare.</param>
            <returns>true if all components of both <see cref="T:SampSharp.GameMode.Vector2" /> are equivalent; otherwise, false.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.op_Inequality(SampSharp.GameMode.Vector2,SampSharp.GameMode.Vector2)">
            <summary>
                Tests whether any component of both <see cref="T:SampSharp.GameMode.Vector2" /> are not equivalent.
            </summary>
            <param name="left">Instance of <see cref="T:SampSharp.GameMode.Vector2" /> to compare.</param>
            <param name="right">Instance of <see cref="T:SampSharp.GameMode.Vector2" /> to compare.</param>
            <returns>true if any component of both <see cref="T:SampSharp.GameMode.Vector2" /> are not equivalent; otherwise, false.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Equals(SampSharp.GameMode.Vector2)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.Equals(System.Object)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>
                A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector2.ToString">
            <summary>
                Returns the fully qualified type name of this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:SampSharp.GameMode.Vector4">
            <summary>
                Represents a 4D vector.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector4" /> struct.
            </summary>
            <param name="x">Value of the x component.</param>
            <param name="y">Value of the y component.</param>
            <param name="z">Value of the z component.</param>
            <param name="w">Value of the w component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.#ctor(SampSharp.GameMode.Vector2,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector4" /> struct.
            </summary>
            <param name="value">The x and y component.</param>
            <param name="z">Value of the z component.</param>
            <param name="w">Value of the w component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.#ctor(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector4" /> struct.
            </summary>
            <param name="value">The x, y and z component.</param>
            <param name="w">Value of the w component.</param>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.X">
            <summary>
                Gets the X component of this <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.Y">
            <summary>
                Gets the Y component of this <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.Z">
            <summary>
                Gets the Z component of this <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.W">
            <summary>
                Gets the W component of this <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.Zero">
            <summary>
                Returns an empty <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.One">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector4" /> with each component set to 1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.UnitX">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector4" /> with components 1, 0, 0, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.UnitY">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector4" /> with components 0, 1, 0, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.UnitZ">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector4" /> with components 0, 0, 1, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.UnitW">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector4" /> with components 0, 0, 0, 1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.Length">
            <summary>
                Gets the length of this <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.LengthSquared">
            <summary>
                Gets the squared length of this <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector4.IsEmpty">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.Vector4" /> is empty.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.DistanceTo(SampSharp.GameMode.Vector4)">
            <summary>
                Gets the distance to another <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
            <param name="other">The <see cref="T:SampSharp.GameMode.Vector4" /> to calculate the distance to.</param>
            <returns>The distance between the vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Normalized">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> instance with the components normalized to a single unit.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Barycentric(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,System.Single,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains the cartesian coordinates of a vector specified in barycentric
                coordinates and relative to 4d-triangle.
            </summary>
            <param name="value1">The first vector of 4d-triangle.</param>
            <param name="value2">The second vector of 4d-triangle.</param>
            <param name="value3">The third vector of 4d-triangle.</param>
            <param name="amount1">
                Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of
                4d-triangle.
            </param>
            <param name="amount2">
                Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of
                4d-triangle.
            </param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.CatmullRom(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Clamp(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Distance(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Distance(SampSharp.GameMode.Vector4@,SampSharp.GameMode.Vector4@,System.Single@)">
            <summary>
                Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.DistanceSquared(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Dot(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Returns a dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Hermite(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Lerp(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Max(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:SampSharp.GameMode.Vector4" /> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Min(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:SampSharp.GameMode.Vector4" /> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Normalize(SampSharp.GameMode.Vector4)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.SmoothStep(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <param name="value2">Source <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Transform(SampSharp.GameMode.Vector2,SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains a transformation of 2d-vector by the specified
                <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="value">Source <see cref="T:SampSharp.GameMode.Vector2" />.</param>
            <param name="matrix">The transformation <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <returns>Transformed <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Transform(SampSharp.GameMode.Vector3,SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains a transformation of 3d-vector by the specified
                <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="value">Source <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="matrix">The transformation <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <returns>Transformed <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Transform(SampSharp.GameMode.Vector4,SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector4" /> that contains a transformation of 4d-vector by the specified
                <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="value">Source <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <param name="matrix">The transformation <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <returns>Transformed <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_Addition(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Adds the left <see cref="T:SampSharp.GameMode.Vector4" />'s components to the right <see cref="T:SampSharp.GameMode.Vector4" />'s components and stores it in
                a
                new <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <returns>A new <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_Subtraction(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Subtracts the right <see cref="T:SampSharp.GameMode.Vector4" />'s components from the left <see cref="T:SampSharp.GameMode.Vector4" />'s components and
                stores
                it in a new <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <returns>A new <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_UnaryNegation(SampSharp.GameMode.Vector4)">
            <summary>
                Creates a <see cref="T:SampSharp.GameMode.Vector4" /> with the components set to the negative values of the given
                <paramref name="vector" />'s components.
            </summary>
            <param name="vector">The vector to invert.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_Multiply(SampSharp.GameMode.Vector4,System.Single)">
            <summary>
                Multiplies the components <see cref="T:SampSharp.GameMode.Vector4" /> by the given scalar and stores them in a new
                <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
            <param name="vector">The <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <param name="scalar">The scalar.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_Multiply(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Multiplies the components <see cref="T:SampSharp.GameMode.Vector4" /> by the components of the right <see cref="T:SampSharp.GameMode.Vector4" /> and stores
                them in a new <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_Division(SampSharp.GameMode.Vector4,System.Single)">
            <summary>
                Divides the components <see cref="T:SampSharp.GameMode.Vector4" /> by the given scalar and stores them in a new <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
            <param name="vector">The <see cref="T:SampSharp.GameMode.Vector4" />.</param>
            <param name="scalar">The scalar.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_Division(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Divides the components <see cref="T:SampSharp.GameMode.Vector4" /> by the components of the right <see cref="T:SampSharp.GameMode.Vector4" /> and stores them
                in a new <see cref="T:SampSharp.GameMode.Vector4" />.
            </summary>
            <param name="left">The numerator.</param>
            <param name="right">The denominator.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector4" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_Equality(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Tests whether all components of both <see cref="T:SampSharp.GameMode.Vector4" /> are equivalent.
            </summary>
            <param name="left">Instance of <see cref="T:SampSharp.GameMode.Vector4" /> to compare.</param>
            <param name="right">Instance of <see cref="T:SampSharp.GameMode.Vector4" /> to compare.</param>
            <returns>true if all components of both <see cref="T:SampSharp.GameMode.Vector4" /> are equivalent; otherwise, false.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.op_Inequality(SampSharp.GameMode.Vector4,SampSharp.GameMode.Vector4)">
            <summary>
                Tests whether any component of both <see cref="T:SampSharp.GameMode.Vector4" /> are not equivalent.
            </summary>
            <param name="left">Instance of <see cref="T:SampSharp.GameMode.Vector4" /> to compare.</param>
            <param name="right">Instance of <see cref="T:SampSharp.GameMode.Vector4" /> to compare.</param>
            <returns>true if any component of both <see cref="T:SampSharp.GameMode.Vector4" /> are not equivalent; otherwise, false.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>
                A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Equals(SampSharp.GameMode.Vector4)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.Equals(System.Object)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:SampSharp.GameMode.Vector4.ToString">
            <summary>
                Returns the fully qualified type name of this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:SampSharp.GameMode.World.Actor">
            <summary>
                Represents a SA-MP actor.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.Actor.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.Actor.Max">
            <summary>
                Maximum number of actors which can exist.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Actor.FacingAngle">
            <summary>
                Gets the facing angle of this <see cref="T:SampSharp.GameMode.World.Actor" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Actor.Health">
            <summary>
                Gets the health of this <see cref="T:SampSharp.GameMode.World.Actor" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Actor.IsInvulnerable">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:SampSharp.GameMode.World.Actor" /> is invulnerable.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Actor.IsValid">
            <summary>
                Gets a value indicating whether this <see cref="T:SampSharp.GameMode.World.Actor" /> is valid.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Actor.VirtualWorld">
            <summary>
                Gets or sets the virtual world of this <see cref="T:SampSharp.GameMode.World.Actor" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Actor.PoolSize">
            <summary>
                Gets the size of the actors pool.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Actor.Position">
            <summary>
                Gets the position of this <see cref="T:SampSharp.GameMode.World.Actor" />.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.Actor.StreamIn">
            <summary>
                Occurs when this <see cref="T:SampSharp.GameMode.World.Actor" /> is being streamed in for a player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.Actor.StreamOut">
            <summary>
                Occurs when this <see cref="T:SampSharp.GameMode.World.Actor" /> is being streamed out for a player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.Actor.PlayerGiveDamage">
            <summary>
                Occurs when a player harms this <see cref="T:SampSharp.GameMode.World.Actor" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.Actor.Create(System.Int32,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.World.Actor" />.
            </summary>
            <param name="modelid">The modelid.</param>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
            <returns>The instance of the actor.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.Actor.IsStreamedIn(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Determines whether this <see cref="T:SampSharp.GameMode.World.Actor" /> is streamed in for the specified <paramref name="player" />.
            </summary>
            <param name="player">The player.</param>
            <returns>True if streamed in; False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.Actor.ApplyAnimation(System.String,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Applies the specified animation to this <see cref="T:SampSharp.GameMode.World.Actor" />.
            </summary>
            <param name="library">The animation library from which to apply an animation.</param>
            <param name="name">The name of the animation to apply, within the specified library.</param>
            <param name="fDelta">The speed to play the animation.</param>
            <param name="loop">if set to <c>true</c> the animation will loop.</param>
            <param name="lockx">if set to <c>true</c> allow this Actor to move it's x-coordinate.</param>
            <param name="locky">if set to <c>true</c> allow this Actor to move it's y-coordinate.</param>
            <param name="freeze">if set to <c>true</c> freeze this Actor at the end of the animation.</param>
            <param name="time">The amount of time (in milliseconds) to play the animation.</param>
            <exception cref="T:System.ArgumentNullException">
                animlib
                or
                animname
            </exception>
        </member>
        <member name="M:SampSharp.GameMode.World.Actor.ClearAnimations">
            <summary>
                Clear any animations applied to this Actor.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.Actor.OnStreamIn(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:StreamIn" /> event.
            </summary>
            <param name="args">The <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.Actor.OnStreamOut(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:StreamOut" /> event.
            </summary>
            <param name="args">The <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.Actor.OnPlayerGiveDamage(SampSharp.GameMode.Events.DamageEventArgs)">
            <summary>
                Raises the <see cref="E:PlayerGiveDamage" /> event.
            </summary>
            <param name="args">The <see cref="T:SampSharp.GameMode.Events.DamageEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.Actor.Dispose(System.Boolean)">
            <summary>
                Removes this instance from the pool.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.World.GangZone">
            <summary>
                Represents a gang zone.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.GangZone.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.GangZone.Max">
            <summary>
                Maximum number of gang zones which can exist.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.GangZone" /> class.
            </summary>
            <param name="minX">The minimum x.</param>
            <param name="minY">The minimum y.</param>
            <param name="maxX">The maximum x.</param>
            <param name="maxY">The maximum y.</param>
        </member>
        <member name="P:SampSharp.GameMode.World.GangZone.MinX">
            <summary>
                Gets the minimum x value for this <see cref="T:SampSharp.GameMode.World.GangZone" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GangZone.MinY">
            <summary>
                Gets the minimum y value for this <see cref="T:SampSharp.GameMode.World.GangZone" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GangZone.MaxX">
            <summary>
                Gets the maximum x value for this <see cref="T:SampSharp.GameMode.World.GangZone" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GangZone.MaxY">
            <summary>
                Gets the maximum y value for this <see cref="T:SampSharp.GameMode.World.GangZone" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GangZone.Color">
            <summary>
                Gets or sets the color of this <see cref="T:SampSharp.GameMode.World.GangZone" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.Show">
            <summary>
                Shows this <see cref="T:SampSharp.GameMode.World.GangZone" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.Show(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Shows this <see cref="T:SampSharp.GameMode.World.GangZone" /> to the specified <paramref name="player" />.
            </summary>
            <param name="player">The player.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.Hide">
            <summary>
                Hides this <see cref="T:SampSharp.GameMode.World.GangZone" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.Hide(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Hides this <see cref="T:SampSharp.GameMode.World.GangZone" /> for the specified <paramref name="player" />.
            </summary>
            <param name="player">The player.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.Flash(SampSharp.GameMode.SAMP.Color)">
            <summary>
                Flashes this <see cref="T:SampSharp.GameMode.World.GangZone" />.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.Flash(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Flashes this <see cref="T:SampSharp.GameMode.World.GangZone" /> for the specified <paramref name="player" />.
            </summary>
            <param name="player">The player.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.Flash(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Flashes this <see cref="T:SampSharp.GameMode.World.GangZone" /> for the specified <paramref name="player" />.
            </summary>
            <param name="player">The player.</param>
            <param name="color">The color.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.StopFlash">
            <summary>
                Stops this <see cref="T:SampSharp.GameMode.World.GangZone" /> from flash.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GangZone.StopFlash(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Stops this <see cref="T:SampSharp.GameMode.World.GangZone" /> from flash for the specified player.
            </summary>
            <param name="player">The player.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="T:SampSharp.GameMode.World.GlobalObject">
            <summary>
                Represents a global object
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.GlobalObject.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.GlobalObject.Max">
            <summary>
                Maximum number of objects which can exist.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GlobalObject.Rotation">
            <summary>
                Gets the rotation of this IGameObject.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GlobalObject.Position">
            <summary>
                Gets the position of this IWorldObject.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GlobalObject.IsMoving">
            <summary>
                Gets whether this IGameObject is moving.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GlobalObject.IsValid">
            <summary>
                Gets whether this IGameObject is valid.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GlobalObject.ModelId">
            <summary>
                Gets the model of this IGameObject.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GlobalObject.DrawDistance">
            <summary>
                Gets the draw distance of this IGameObject.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GlobalObject.Moved">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.GlobalObject.OnMoved(System.EventArgs)" /> callback is being called.
                This callback is called when an object is moved after <see cref="M:SampSharp.GameMode.World.GlobalObject.Move(SampSharp.GameMode.Vector3,System.Single)" /> (when it stops moving).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GlobalObject.Selected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.GlobalObject.OnSelected(SampSharp.GameMode.Events.SelectGlobalObjectEventArgs)" /> callback is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.World.GlobalObject.Select(SampSharp.GameMode.World.BasePlayer)" /> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GlobalObject.Edited">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.GlobalObject.OnEdited(SampSharp.GameMode.Events.EditGlobalObjectEventArgs)" /> callback is being called.
                This callback is called when a player ends object edition mode.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.GlobalObject" /> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.#ctor(System.Int32,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.GlobalObject" /> class.
            </summary>
            <param name="modelid">The modelid.</param>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
            <param name="drawDistance">The draw distance.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.#ctor(System.Int32,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.GlobalObject" /> class.
            </summary>
            <param name="modelid">The modelid.</param>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.Move(SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Vector3)">
            <summary>
                Moves this IGameObject to the given position and rotation with the given speed.
            </summary>
            <param name="position">The position to which to move this IGameObject.</param>
            <param name="speed">The speed at which to move this IGameObject.</param>
            <param name="rotation">The rotation to which to move this IGameObject.</param>
            <returns>
                The time it will take for the object to move in milliseconds.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.Move(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Moves this IGameObject to the given position with the given speed.
            </summary>
            <param name="position">The position to which to move this IGameObject.</param>
            <param name="speed">The speed at which to move this IGameObject.</param>
            <returns>
                The time it will take for the object to move in milliseconds.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.Stop">
            <summary>
                Stop this IGameObject from moving any further.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.SetMaterial(System.Int32,System.Int32,System.String,System.String,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Sets the material of this IGameObject.
            </summary>
            <param name="materialindex">The material index on the object to change.</param>
            <param name="modelid">
                The modelid on which the replacement texture is located. Use 0 for alpha. Use -1 to change the
                material color without altering the texture.
            </param>
            <param name="txdname">The name of the txd file which contains the replacement texture (use "none" if not required).</param>
            <param name="texturename">The name of the texture to use as the replacement (use "none" if not required).</param>
            <param name="materialcolor">The object color to set (use default(Color) to keep the existing material color).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.SetMaterialText(System.Int32,System.String,SampSharp.GameMode.Definitions.ObjectMaterialSize,System.String,System.Int32,System.Boolean,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Definitions.ObjectMaterialTextAlign)">
            <summary>
                Sets the material text of this IGameObject.
            </summary>
            <param name="materialindex">The material index on the object to change.</param>
            <param name="text">The text to show on the object. (MAX 2048 characters)</param>
            <param name="materialsize">The object's material index to replace with text.</param>
            <param name="fontface">The font to use.</param>
            <param name="fontsize">The size of the text (max 255).</param>
            <param name="bold">Whether to write in bold.</param>
            <param name="foreColor">The color of the text.</param>
            <param name="backColor">The background color of the text.</param>
            <param name="textalignment">The alignment of the text.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.DisableCameraCollisions">
            <summary>
                Disable collisions between players' cameras and this <see cref="T:SampSharp.GameMode.World.GlobalObject" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.ToggleDefaultCameraCollisions(System.Boolean)">
            <summary>
                Toggles the default camera collisions.
            </summary>
            <param name="toggle">If set to <c>true</c> the camera will be able to collide with objects by default.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.AttachTo(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Attaches this <see cref="T:SampSharp.GameMode.World.GlobalObject" /> to the specified <paramref name="player" />.
            </summary>
            <param name="player">The player.</param>
            <param name="offset">The offset.</param>
            <param name="rotation">The rotation.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.AttachTo(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Attaches this <see cref="T:SampSharp.GameMode.World.GlobalObject" /> to the specified <paramref name="vehicle" />.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <param name="offset">The offset.</param>
            <param name="rotation">The rotation.</param>
            <exception cref="T:System.ArgumentNullException">vehicle</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.AttachCameraToObject(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Attaches a player's camera to this GlobalObject.
            </summary>
            <param name="player">The player whose camera to attach to this GlobalObject.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.Remove(SampSharp.GameMode.World.BasePlayer,System.Int32,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Removes the specified object.
            </summary>
            <param name="player">The player.</param>
            <param name="modelid">The modelid.</param>
            <param name="position">The position.</param>
            <param name="radius">The radius.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.AttachTo(SampSharp.GameMode.World.GlobalObject,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Boolean)">
            <summary>
                Attaches this <see cref="T:SampSharp.GameMode.World.GlobalObject" /> to the specified <paramref name="globalObject" />.
            </summary>
            <param name="globalObject">The global object.</param>
            <param name="offset">The offset.</param>
            <param name="rotation">The rotation.</param>
            <param name="syncRotation">if set to <c>true</c> synchronize rotation.</param>
            <exception cref="T:System.ArgumentNullException">globalObject</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.Edit(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Lets the specified <paramref name="player" /> edit this <see cref="T:SampSharp.GameMode.World.PlayerObject" />.
            </summary>
            <param name="player">The player.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.Select(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Lets the specified <paramref name="player" /> select an object.
            </summary>
            <param name="player">The player.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.OnMoved(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GlobalObject.Moved" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.OnSelected(SampSharp.GameMode.Events.SelectGlobalObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GlobalObject.Selected" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.OnEdited(SampSharp.GameMode.Events.EditGlobalObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GlobalObject.Edited" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EditGlobalObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:SampSharp.GameMode.World.BasePlayer">
            <summary>
                Represents a SA-MP player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.BasePlayer.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.BasePlayer.Max">
            <summary>
                Maximum number of players which can exist.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.BasePlayer.MaxAttachedObjects">
            <summary>
                Maximum number of attached objects attached to a player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.BasePlayer.NoTeam">
            <summary>
                Identifier indicating a player is not a member of any team.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.BasePlayer.MaxNameLength">
            <summary>
                Maximum length of a player's name.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.BasePlayer.MaxChatBubbleLength">
            <summary>
                Maximum length of the text in a chat bubble.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.#cctor">
            <summary>
                Initializes the <see cref="T:SampSharp.GameMode.World.BasePlayer" /> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.BasePlayer" /> class.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.DefaultClientMessageColor">
            <summary>
                Gets or sets the default color of a client message.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.PVars">
            <summary>
                Gets a collections of Player Variables of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Key">
            <summary>
                Gets a set of KeyHandlers for different key states.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.PoolSize">
            <summary>
                Gets the size of the players pool.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Name">
            <summary>
                Gets or sets the name of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Angle">
            <summary>
                Gets or sets the facing angle of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Interior">
            <summary>
                Gets or sets the interior of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.VirtualWorld">
            <summary>
                Gets or sets the virtual world of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Health">
            <summary>
                Gets or sets the health of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Armour">
            <summary>
                Gets or sets the armor of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.WeaponAmmo">
            <summary>
                Gets the ammo of the Weapon this Player is currently holding.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.WeaponState">
            <summary>
                Gets the WeaponState of the Weapon this Player is currently holding.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Weapon">
            <summary>
                Gets the Weapon this Player is currently holding.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.TargetPlayer">
            <summary>
                Gets the Player this Player is aiming at.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Team">
            <summary>
                Gets or sets the team this Player is in.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Score">
            <summary>
                Gets or sets the score of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.DrunkLevel">
            <summary>
                Gets or sets the drunkenness level of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Color">
            <summary>
                Gets or sets the Color of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Skin">
            <summary>
                Gets or sets the skin of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Money">
            <summary>
                Gets or sets the money of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.State">
            <summary>
                Gets the state of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.IP">
            <summary>
                Gets the IP of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Ping">
            <summary>
                Gets the ping of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.WantedLevel">
            <summary>
                Gets or sets the wanted level of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.FightStyle">
            <summary>
                Gets or sets the FightStyle of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Velocity">
            <summary>
                Gets or sets the velocity of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.VehicleSeat">
            <summary>
                Gets the vehicle seat this Player sits on.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.AnimationIndex">
            <summary>
                Gets the index of the animation this Player is playing.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.SpecialAction">
            <summary>
                Gets or sets the SpecialAction of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.CameraPosition">
            <summary>
                Gets or sets the position of the camera of this Players.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.CameraFrontVector">
            <summary>
                Gets the front Vector3 of this Player's camera.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.CameraMode">
            <summary>
                Gets the mode of this Player's camera.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.TargetActor">
            <summary>
                Gets the Actor this Player is aiming at.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.CameraTargetObject">
            <summary>
                Gets the GlobalObject the camera of this player is pointing at.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.CameraTargetVehicle">
            <summary>
                Gets the GtaVehicle the camera of this player is pointing at.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.CameraTargetPlayer">
            <summary>
                Gets the GtaPlayer the camera of this player is pointing at.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.CameraTargetActor">
            <summary>
                Gets the GtaPlayer the camera of this player is pointing at.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.InAnyVehicle">
            <summary>
                Gets whether this Player is currently in any vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.InCheckpoint">
            <summary>
                Gets whether this Player is in his checkpoint.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.InRaceCheckpoint">
            <summary>
                Gets whether this Player is in his race-checkpoint.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.SurfingVehicle">
            <summary>
                Gets the Vehicle that this Player is surfing.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.SurfingObject">
            <summary>
                Gets the <see cref="T:SampSharp.GameMode.World.GlobalObject" /> that this Player is surfing.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Vehicle">
            <summary>
                Gets the Vehicle this Player is currently in.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.IsConnected">
            <summary>
                Gets whether this Player is connected to the server.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Rotation">
            <summary>
                Gets or sets the rotation of this Player.
            </summary>
            <remarks>
                Only the Z angle can be set!
            </remarks>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Position">
            <summary>
                Gets or sets the position of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.IsNPC">
            <summary>
                Gets whether this Player is an actual player or an NPC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.IsAdmin">
            <summary>
                Gets whether this Player is logged into RCON.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.IsAlive">
            <summary>
                Gets whether this Player is alive;
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.NetworkStats">
            <summary>
                Gets this Player's network stats and saves them into a string.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.Version">
            <summary>
                Gets this Player's game version.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.GPCI">
            <summary>
                Gets this Player's GPCI string.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BasePlayer.IsSelectingTextDraw">
            <summary>
                Gets a value indicating whether this player is selecting a textdraw.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.Connected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnConnected(System.EventArgs)" /> is being called.
                This callback is called when a player connects to the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.Disconnected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnDisconnected(SampSharp.GameMode.Events.DisconnectEventArgs)" /> is being called.
                This callback is called when a player disconnects from the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.Cleanup">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnCleanup(SampSharp.GameMode.Events.DisconnectEventArgs)" /> is being called.
                This callback is called after a player disconnects from the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.Spawned">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnSpawned(SampSharp.GameMode.Events.SpawnEventArgs)" /> is being called.
                This callback is called when a player spawns.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.Died">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnDeath(SampSharp.GameMode.Events.DeathEventArgs)" /> is being called.
                This callback is triggered when the gamemode starts.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.Text">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnText(SampSharp.GameMode.Events.TextEventArgs)" /> is being called.
                Called when a player sends a chat message.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.CommandText">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnCommandText(SampSharp.GameMode.Events.CommandTextEventArgs)" /> is being called.
                This callback is called when a player enters a command into the client chat window, e.g. /help.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.RequestClass">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnRequestClass(SampSharp.GameMode.Events.RequestClassEventArgs)" /> is being called.
                Called when a player changes class at class selection (and when class selection first appears).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.EnterVehicle">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnEnterVehicle(SampSharp.GameMode.Events.EnterVehicleEventArgs)" /> is being called.
                This callback is called when a player starts to enter a vehicle, meaning the player is not in vehicle yet at the
                time this callback is called.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.ExitVehicle">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnExitVehicle(SampSharp.GameMode.Events.PlayerVehicleEventArgs)" /> is being called.
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as setting
                <see cref="P:SampSharp.GameMode.World.BasePlayer.Position" />.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.StateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnStateChanged(SampSharp.GameMode.Events.StateEventArgs)" /> is being called.
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as setting
                <see cref="P:SampSharp.GameMode.World.BasePlayer.Position" />.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.EnterCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnEnterCheckpoint(System.EventArgs)" /> is being called.
                This callback is called when a player enters the checkpoint set for that player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.LeaveCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnLeaveCheckpoint(System.EventArgs)" /> is being called.
                This callback is called when a player leaves the checkpoint set for that player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.EnterRaceCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnEnterRaceCheckpoint(System.EventArgs)" /> is being called.
                This callback is called when a player enters a race checkpoint.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.LeaveRaceCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnLeaveRaceCheckpoint(System.EventArgs)" /> is being called.
                This callback is called when a player leaves the race checkpoint.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.RequestSpawn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnRequestSpawn(SampSharp.GameMode.Events.RequestSpawnEventArgs)" /> is being called.
                Called when a player attempts to spawn via class selection.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.EnterExitModShop">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnEnterExitModShop(SampSharp.GameMode.Events.EnterModShopEventArgs)" /> is being called.
                This callback is called when a player enters or exits a mod shop.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.SelectedMenuRow">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnSelectedMenuRow(SampSharp.GameMode.Events.MenuRowEventArgs)" /> is being called.
                This callback is called when a player selects an item from a menu.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.ExitedMenu">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnExitedMenu(System.EventArgs)" /> is being called.
                Called when a player exits a menu.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.InteriorChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnInteriorChanged(SampSharp.GameMode.Events.InteriorChangedEventArgs)" /> is being called.
                Called when a player changes interior.
            </summary>
            <remarks>
                This is also called when <see cref="P:SampSharp.GameMode.World.BasePlayer.Interior" /> is set.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.KeyStateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnKeyStateChanged(SampSharp.GameMode.Events.KeyStateChangedEventArgs)" /> is being called.
                This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not
                trigger this callback.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.Update">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnUpdate(SampSharp.GameMode.Events.PlayerUpdateEventArgs)" /> is being called.
                This callback is called everytime a client/player updates the server with their status.
            </summary>
            <remarks>
                This callback is called very frequently per second per player, only use it when you know what it's meant for.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.StreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnStreamIn(SampSharp.GameMode.Events.PlayerEventArgs)" /> is being called.
                This callback is called when a player is streamed by some other player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.StreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnStreamOut(SampSharp.GameMode.Events.PlayerEventArgs)" /> is being called.
                This callback is called when a player is streamed out from some other player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.DialogResponse">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnDialogResponse(SampSharp.GameMode.Events.DialogResponseEventArgs)" /> is being called.
                This callback is called when a player responds to a dialog shown using <see cref="T:SampSharp.GameMode.Display.Dialog" /> by
                either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style dialog).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.TakeDamage">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnTakeDamage(SampSharp.GameMode.Events.DamageEventArgs)" /> is being called.
                This callback is called when a player takes damage.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.GiveDamage">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnGiveDamage(SampSharp.GameMode.Events.DamageEventArgs)" /> is being called.
                This callback is called when a player gives damage to another player.
            </summary>
            <remarks>
                One thing you can do with GiveDamage is detect when other players report that they have damaged a certain player,
                and that player hasn't taken any health loss. You can flag those players as suspicious.
                You can also set all players to the same team (so they don't take damage from other players) and process all health
                loss from other players manually.
                You might have a server where players get a wanted level if they attack Cop players (or some specific class). In
                that case you might trust GiveDamage over TakeDamage.
                There should be a lot you can do with it. You just have to keep in mind the levels of trust between clients. In
                most cases it's better to trust the client who is being damaged to report their health/armour (TakeDamage). SA-MP
                normally does this. GiveDamage provides some extra information which may be useful when you require a different
                level of trust.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.ClickMap">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnClickMap(SampSharp.GameMode.Events.PositionEventArgs)" /> is being called.
                This callback is called when a player places a target/waypoint on the pause menu map (by right-clicking).
            </summary>
            <remarks>
                The Z value provided is only an estimate; you may find it useful to use a plugin like the MapAndreas plugin to get
                a more accurate Z coordinate (or for teleportation; use <see cref="M:SampSharp.GameMode.World.BasePlayer.SetPositionFindZ(SampSharp.GameMode.Vector3)" />).
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.ClickTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnClickTextDraw(SampSharp.GameMode.Events.ClickTextDrawEventArgs)" /> is being called.
                This callback is called when a player clicks on a textdraw.
            </summary>
            <remarks>
                The clickable area is defined by <see cref="P:SampSharp.GameMode.Display.TextDraw.Width" /> and <see cref="P:SampSharp.GameMode.Display.TextDraw.Width" />. The x and y
                parameters passed to that
                function must not be zero or negative.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.CancelClickTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnCancelClickTextDraw(System.EventArgs)" /> is being called.
                This callback is called when a player cancels the textdraw select mode(ESC).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.ClickPlayerTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnClickPlayerTextDraw(SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs)" /> is being called.
                This callback is called when a player clicks on a player-textdraw. It is not called when player cancels the select
                mode (ESC) - however, <see cref="M:SampSharp.GameMode.World.BasePlayer.OnClickTextDraw(SampSharp.GameMode.Events.ClickTextDrawEventArgs)" /> is.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.ClickPlayer">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnClickPlayer(SampSharp.GameMode.Events.ClickPlayerEventArgs)" /> is being called.
                Called when a player double-clicks on a player on the scoreboard.
            </summary>
            <remarks>
                There is currently only one 'source' (<see cref="F:SampSharp.GameMode.Definitions.PlayerClickSource.Scoreboard" />). The existence of this argument
                suggests that more sources may be supported in the future.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.EditGlobalObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnEditGlobalObject(SampSharp.GameMode.Events.EditGlobalObjectEventArgs)" /> is being called.
                This callback is called when a player ends object edition mode.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.EditPlayerObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnEditPlayerObject(SampSharp.GameMode.Events.EditPlayerObjectEventArgs)" /> is being called.
                This callback is called when a player ends object edition mode.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.EditAttachedObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnEditAttachedObject(SampSharp.GameMode.Events.EditAttachedObjectEventArgs)" /> is being called.
                This callback is called when a player ends attached object edition mode.
            </summary>
            <remarks>
                Editions should be discarded if response was '0' (cancelled). This must be done by storing the offsets etc. in an
                array BEFORE using EditAttachedObject.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.SelectGlobalObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnSelectGlobalObject(SampSharp.GameMode.Events.SelectGlobalObjectEventArgs)" /> is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.World.GlobalObject.Select(SampSharp.GameMode.World.BasePlayer)" /> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.SelectPlayerObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnSelectPlayerObject(SampSharp.GameMode.Events.SelectPlayerObjectEventArgs)" /> is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.World.PlayerObject.Select(SampSharp.GameMode.World.BasePlayer)" /> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BasePlayer.WeaponShot">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BasePlayer.OnWeaponShot(SampSharp.GameMode.Events.WeaponShotEventArgs)" /> is being called.
                This callback is called when a player fires a shot from a weapon.
            </summary>
            <remarks>
                <see cref="F:SampSharp.GameMode.Definitions.BulletHitType.None" />: the fX, fY and fZ parameters are normal coordinates;
                Others: the fX, fY and fZ are offsets from the center of hitid.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetSpawnInfo(System.Int32,System.Int32,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                This function can be used to change the spawn information of a specific player. It allows you to automatically set
                someone's spawn weapons, their team, skin and spawn position, normally used in case of mini games or
                automatic-spawn systems.
            </summary>
            <param name="team">The Team-ID of the chosen player.</param>
            <param name="skin">The skin which the player will spawn with.</param>
            <param name="position">The player's spawn position.</param>
            <param name="rotation">The direction in which the player needs to be facing after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.Spawn">
            <summary>
                (Re)Spawns a player.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.PutCameraBehindPlayer">
            <summary>
                Restore the camera to a place behind the player, after using a function like <see cref="P:SampSharp.GameMode.World.BasePlayer.CameraPosition" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetPositionFindZ(SampSharp.GameMode.Vector3)">
            <summary>
                This sets this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s position then adjusts the Player's z-coordinate to the nearest solid
                ground under the
                position.
            </summary>
            <param name="position">The position to move this Player to.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.IsInRangeOfPoint(System.Single,SampSharp.GameMode.Vector3)">
            <summary>
                Check if this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> is in range of a point.
            </summary>
            <param name="range">The furthest distance the player can be from the point to be in range.</param>
            <param name="point">The point to check the range to.</param>
            <returns>True if this Player is in range of the point, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GetDistanceFromPoint(SampSharp.GameMode.Vector3)">
            <summary>
                Calculate the distance between this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> and a map coordinate.
            </summary>
            <param name="point">The point to calculate the distance from.</param>
            <returns>The distance between the player and the point as a float.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.IsPlayerStreamedIn(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Checks if a <see cref="T:SampSharp.GameMode.World.BasePlayer" /> is streamed in this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s client.
            </summary>
            <remarks>
                Players aren't streamed in on their own client, so if this Player is the same as the other Player, it will return
                false!
            </remarks>
            <remarks>
                Players stream out if they are more than 150 meters away (see server.cfg - stream_distance)
            </remarks>
            <param name="other">The Player to check is streamed in.</param>
            <returns>True if the other Player is streamed in for this Player, False if not.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetAmmo(SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Set the ammo of this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s weapon.
            </summary>
            <param name="weapon">The weapon to set the ammo of.</param>
            <param name="ammo">The amount of ammo to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GiveWeapon(SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Give this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> a <see cref="P:SampSharp.GameMode.World.BasePlayer.Weapon" /> with a specified amount of ammo.
            </summary>
            <param name="weapon">The Weapon to give to this Player.</param>
            <param name="ammo">The amount of ammo to give to this Player.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ResetWeapons">
            <summary>
                Removes all weapons from this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetArmedWeapon(SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Sets the armed weapon of this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="weapon">The weapon that the player should be armed with.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GetWeaponData(System.Int32,SampSharp.GameMode.Definitions.Weapon@,System.Int32@)">
            <summary>
                Get the <see cref="P:SampSharp.GameMode.World.BasePlayer.Weapon" /> and ammo in this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s weapon slot.
            </summary>
            <param name="slot">The weapon slot to get data for (0-12).</param>
            <param name="weapon">The variable in which to store the weapon, passed by reference.</param>
            <param name="ammo">The variable in which to store the ammo, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GiveMoney(System.Int32)">
            <summary>
                Give money to this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="money">The amount of money to give this <see cref="T:SampSharp.GameMode.World.BasePlayer" />. Use a minus value to take money.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ResetMoney">
            <summary>
                Reset this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s money to $0.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GetKeys(SampSharp.GameMode.Definitions.Keys@,System.Int32@,System.Int32@)">
            <summary>
                Check which keys this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> is pressing.
            </summary>
            <remarks>
                Only the FUNCTION of keys can be detected; not actual keys. You can not detect if the player presses space, but you
                can detect if they press sprint (which can be mapped (assigned) to ANY key, but is space by default)).
            </remarks>
            <param name="keys">A set of bits containing this Player's key states</param>
            <param name="updown">Up or Down value, passed by reference.</param>
            <param name="leftright">Left or Right value, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetTime(System.Int32,System.Int32)">
            <summary>
                Sets the clock of this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> to a specific value. This also changes the daytime. (night/day
                etc.)
            </summary>
            <param name="hour">Hour to set (0-23).</param>
            <param name="minutes">Minutes to set (0-59).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GetTime(System.Int32@,System.Int32@)">
            <summary>
                Get this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s current game time. Set by <see cref="M:SampSharp.GameMode.SAMP.Server.SetWorldTime(System.Int32)" />,
                <see cref="M:SampSharp.GameMode.SAMP.Server.SetWorldTime(System.Int32)" />,
                or by <see cref="M:SampSharp.GameMode.World.BasePlayer.ToggleClock(System.Boolean)" />.
            </summary>
            <param name="hour">The variable to store the hour in, passed by reference.</param>
            <param name="minutes">The variable to store the minutes in, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ToggleClock(System.Boolean)">
            <summary>
                Show/Hide the in-game clock (top right corner) for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <remarks>
                Time is not synced with other players!
            </remarks>
            <param name="toggle">True to show, False to hide.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetWeather(System.Int32)">
            <summary>
                Set this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s weather. If <see cref="M:SampSharp.GameMode.World.BasePlayer.ToggleClock(System.Boolean)" /> has been used to enable the clock,
                weather changes will
                interpolate (gradually change), otherwise will change instantly.
            </summary>
            <param name="weather">The weather to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ForceClassSelection">
            <summary>
                Forces this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> to go back to class selection.
            </summary>
            <remarks>
                The player will not return to class selection until they re-spawn. This can be achieved with
                <see cref="M:SampSharp.GameMode.World.BasePlayer.ToggleSpectating(System.Boolean)" />
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SelectTextDraw(SampSharp.GameMode.SAMP.Color)">
            <summary>
                Display the cursor and allow this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> to select a text draw.
            </summary>
            <param name="hoverColor">The color of the text draw when hovering over with mouse.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.CancelSelectTextDraw">
            <summary>
                Cancel text draw selection with the mouse for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.PlayCrimeReport(SampSharp.GameMode.World.BasePlayer,System.Int32)">
            <summary>
                This function plays a crime report for this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> - just like in single-player when CJ commits
                a
                crime.
            </summary>
            <param name="suspect">The suspect player which will be described in the crime report.</param>
            <param name="crime">The crime ID, which will be reported as a 10-code (i.e. 10-16 if 16 was passed as the crimeid).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.PlayAudioStream(System.String,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Play an 'audio stream' for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />. Normal audio files also work (e.g. MP3).
            </summary>
            <param name="url">
                The url to play. Valid formats are mp3 and ogg/vorbis. A link to a .pls (playlist) file will play
                that playlist.
            </param>
            <param name="position">The position at which to play the audio. Has no effect unless usepos is set to True.</param>
            <param name="distance">The distance over which the audio will be heard. Has no effect unless usepos is set to True.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.PlayAudioStream(System.String)">
            <summary>
                Play an 'audio stream' for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />. Normal audio files also work (e.g. MP3).
            </summary>
            <param name="url">
                The url to play. Valid formats are mp3 and ogg/vorbis. A link to a .pls (playlist) file will play
                that playlist.
            </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.DisableRemoteVehicleCollisions(System.Boolean)">
            <summary>
                Allows you to disable collisions between vehicles for a player.
            </summary>
            <param name="disable">if set to <c>true</c> disables the collision between vehicles.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.EnablePlayerCameraTarget(System.Boolean)">
            <summary>
                Toggles camera targeting functions for a player.
            </summary>
            <param name="enable">if set to <c>true</c> the functionality is enabled.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.StopAudioStream">
            <summary>
                Stops the current audio stream for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetShopName(System.String)">
            <summary>
                Loads or unloads an interior script for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />. (for example the ammunation menu)
            </summary>
            <param name="shopname">The name of the shop.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetSkillLevel(SampSharp.GameMode.Definitions.WeaponSkill,System.Int32)">
            <summary>
                Set the skill level of a certain weapon type for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <remarks>
                The skill parameter is NOT the weapon ID, it is the skill type.
            </remarks>
            <param name="skill">The <see cref="T:SampSharp.GameMode.Definitions.WeaponSkill" /> you want to set the skill of.</param>
            <param name="level">
                The skill level to set for that weapon, ranging from 0 to 999. (A level out of range will max it
                out)
            </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetAttachedObject(System.Int32,System.Int32,SampSharp.GameMode.Definitions.Bone,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Attach an object to a specific bone on this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="index">The index (slot) to assign the object to (0-9).</param>
            <param name="modelid">The model to attach.</param>
            <param name="bone">The bone to attach the object to.</param>
            <param name="offset">offset for the object position.</param>
            <param name="rotation">rotation of the object.</param>
            <param name="scale">scale of the object.</param>
            <param name="materialcolor1">The first object color to set.</param>
            <param name="materialcolor2">The second object color to set.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.RemoveAttachedObject(System.Int32)">
            <summary>
                Remove an attached object from this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="index">The index of the object to remove (set with <see cref="M:SampSharp.GameMode.World.BasePlayer.SetAttachedObject(System.Int32,System.Int32,SampSharp.GameMode.Definitions.Bone,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color)" />).</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.IsAttachedObjectSlotUsed(System.Int32)">
            <summary>
                Check if this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> has an object attached in the specified index (slot).
            </summary>
            <param name="index">The index (slot) to check.</param>
            <returns>True if the slot is used, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.DoEditAttachedObject(System.Int32)">
            <summary>
                Enter edition mode for an attached object.
            </summary>
            <param name="index">The index (slot) of the attached object to edit.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetChatBubble(System.String,SampSharp.GameMode.SAMP.Color,System.Single,System.Int32)">
            <summary>
                Creates a chat bubble above this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s name tag.
            </summary>
            <param name="text">The text to display.</param>
            <param name="color">The text color.</param>
            <param name="drawdistance">The distance from where players are able to see the chat bubble.</param>
            <param name="expiretime">The time in miliseconds the bubble should be displayed for.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.PutInVehicle(SampSharp.GameMode.World.BaseVehicle,System.Int32)">
            <summary>
                Puts this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> in a <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
            <param name="vehicle">The vehicle for the player to be put in.</param>
            <param name="seatid">The ID of the seat to put the player in.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.PutInVehicle(SampSharp.GameMode.World.BaseVehicle)">
            <summary>
                Puts this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> in a vehicle as driver.
            </summary>
            <param name="vehicle">The vehicle for the player to be put in.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.RemoveFromVehicle">
            <summary>
                Removes/ejects this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> from his vehicle.
            </summary>
            <remarks>
                The exiting animation is not synced for other players.
                This function will not work when used in <see cref="M:SampSharp.GameMode.World.BasePlayer.OnEnterVehicle(SampSharp.GameMode.Events.EnterVehicleEventArgs)" />, because the
                player isn't in
                the vehicle when the callback is called. Use <see cref="M:SampSharp.GameMode.World.BasePlayer.OnStateChanged(SampSharp.GameMode.Events.StateEventArgs)" /> instead.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ToggleControllable(System.Boolean)">
            <summary>
                Toggles whether this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> can control themselves, basically freezes them.
            </summary>
            <param name="toggle">False to freeze the player or True to unfreeze them.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.PlaySound(System.Int32,SampSharp.GameMode.Vector3)">
            <summary>
                Plays the specified sound for this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> at a specific point.
            </summary>
            <param name="soundid">The sound to play.</param>
            <param name="point">Point for the sound to play at.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.PlaySound(System.Int32)">
            <summary>
                Plays the specified sound for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="soundid">The sound to play.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ApplyAnimation(System.String,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Apply an animation to this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <remarks>
                The <paramref name="forcesync" /> parameter, in most cases is not needed since players sync animations themselves.
                The <paramref name="forcesync" /> parameter can force all players who can see this Player to play the animation
                regardless of whether the player is performing that animation. This is useful in circumstances where the player
                can't sync the animation themselves. For example, they may be paused.
            </remarks>
            <param name="animlib">The name of the animation library in which the animation to apply is in.</param>
            <param name="animname">The name of the animation, within the library specified.</param>
            <param name="fDelta">The speed to play the animation (use 4.1).</param>
            <param name="loop">Set to True for looping otherwise set to False for playing animation sequence only once.</param>
            <param name="lockx">
                Set to False to return player to original x position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="locky">
                Set to False to return player to original y position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="freeze">Will freeze the player in position after the animation finishes.</param>
            <param name="time">Timer in milliseconds. For a never ending loop it should be 0.</param>
            <param name="forcesync">Set to True to force playerid to sync animation with other players in all instances</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ApplyAnimation(System.String,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Apply an animation to this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="animlib">The name of the animation library in which the animation to apply is in.</param>
            <param name="animname">The name of the animation, within the library specified.</param>
            <param name="fDelta">The speed to play the animation (use 4.1).</param>
            <param name="loop">Set to True for looping otherwise set to False for playing animation sequence only once.</param>
            <param name="lockx">
                Set to False to return player to original x position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="locky">
                Set to False to return player to original y position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="freeze">Will freeze the player in position after the animation finishes.</param>
            <param name="time">Timer in milliseconds. For a never ending loop it should be 0.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ClearAnimations(System.Boolean)">
            <summary>
                Clears all animations for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="forcesync">Specifies whether the animation should be shown to streamed in players.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ClearAnimations">
            <summary>
                Clears all animations for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GetAnimationName(System.String@,System.String@)">
            <summary>
                Get the animation library/name this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> is playing.
            </summary>
            <param name="animlib">String variable that stores the animation library.</param>
            <param name="animname">String variable that stores the animation name.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetCheckpoint(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Sets a checkpoint (red circle) for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />. Also shows a red blip on the radar.
            </summary>
            <remarks>
                Checkpoints created on server-created objects will appear down on the 'real' ground, but will still function
                correctly.
                There is no fix available for this issue. A pickup can be used instead.
            </remarks>
            <param name="point">The point to set the checkpoint at.</param>
            <param name="size">The size of the checkpoint.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.DisableCheckpoint">
            <summary>
                Disable any initialized checkpoints for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetRaceCheckpoint(SampSharp.GameMode.Definitions.CheckpointType,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Creates a race checkpoint. When this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> enters it, the <see cref="E:SampSharp.GameMode.World.BasePlayer.EnterRaceCheckpoint" />
                callback is called.
            </summary>
            <param name="type">Type of checkpoint.</param>
            <param name="point">The point to set the checkpoint at.</param>
            <param name="nextPosition">Coordinates of the next point, for the arrow facing direction.</param>
            <param name="size">Length (diameter) of the checkpoint</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.DisableRaceCheckpoint">
            <summary>
                Disable any initialized race checkpoints for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetWorldBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Set the world boundaries for this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> - players can not go out of the boundaries.
            </summary>
            <remarks>
                You can reset the player world bounds by setting the parameters to 20000.0000, -20000.0000, 20000.0000,
                -20000.0000.
            </remarks>
            <param name="xMax">The maximum X coordinate the player can go to.</param>
            <param name="xMin">The minimum X coordinate the player can go to.</param>
            <param name="yMax">The maximum Y coordinate the player can go to.</param>
            <param name="yMin">The minimum Y coordinate the player can go to.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetPlayerMarker(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Change the color of this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s name tag and radar blip for another Player.
            </summary>
            <param name="player">The player whose color will be changed.</param>
            <param name="color">New color.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ShowNameTagForPlayer(SampSharp.GameMode.World.BasePlayer,System.Boolean)">
            <summary>
                This functions allows you to toggle the drawing of player name tags, health bars and armor bars which display above
                their head. For use of a similar function like this on a global level, <see cref="M:SampSharp.GameMode.BaseMode.ShowNameTags(System.Boolean)" />
                function.
            </summary>
            <remarks>
                <see cref="M:SampSharp.GameMode.BaseMode.ShowNameTags(System.Boolean)" /> must be set to <c>true</c> to be able to show name tags with
                <see cref="M:SampSharp.GameMode.World.BasePlayer.ShowNameTagForPlayer(SampSharp.GameMode.World.BasePlayer,System.Boolean)" />.
            </remarks>
            <param name="player">The <see cref="T:SampSharp.GameMode.World.BasePlayer" /> whose name tag will be shown or hidden.</param>
            <param name="show">True to show name tag, False to hide name tag.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetMapIcon(System.Int32,SampSharp.GameMode.Vector3,SampSharp.GameMode.Definitions.PlayerMarkersMode,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Definitions.MapIconType)">
            <summary>
                This function allows you to place your own icons on the map, enabling you to emphasize the locations of banks,
                airports or whatever else you want. A total of 63 icons are available in GTA: San Andreas, all of which can be used
                using this function. You can also specify the color of the icon, which allows you to change the square icon (ID:
                0).
            </summary>
            <param name="iconid">The player's icon ID, ranging from 0 to 99, to be used in <see cref="M:SampSharp.GameMode.World.BasePlayer.RemoveMapIcon(System.Int32)" />.</param>
            <param name="position">The coordinates of the place where you want the icon to be.</param>
            <param name="markertype">The icon to set.</param>
            <param name="color">The color of the icon, this should only be used with the square icon (ID: 0).</param>
            <param name="style">The style of icon.</param>
            <returns>True if it was successful, False otherwise (e.g. the player isn't connected).</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.RemoveMapIcon(System.Int32)">
            <summary>
                Removes a map icon that was set earlier for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="iconid">The ID of the icon to remove. This is the second parameter of <see cref="M:SampSharp.GameMode.World.BasePlayer.SetMapIcon(System.Int32,SampSharp.GameMode.Vector3,SampSharp.GameMode.Definitions.PlayerMarkersMode,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Definitions.MapIconType)" />.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetCameraLookAt(SampSharp.GameMode.Vector3,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Set the direction this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s camera looks at. To be used in combination with
                <see cref="P:SampSharp.GameMode.World.BasePlayer.CameraPosition" />.
            </summary>
            <param name="point">The coordinates for this Player's camera to look at.</param>
            <param name="cut">The style the camera-position changes.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SetCameraLookAt(SampSharp.GameMode.Vector3)">
            <summary>
                Set the direction this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s camera looks at. To be used in combination with
                <see cref="P:SampSharp.GameMode.World.BasePlayer.CameraPosition" />.
            </summary>
            <param name="point">The coordinates for this Player's camera to look at.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.InterpolateCameraPosition(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Int32,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Move this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s camera from one position to another, within the set time.
            </summary>
            <param name="from">The position the camera should start to move from.</param>
            <param name="to">The position the camera should move to.</param>
            <param name="time">Time in milliseconds.</param>
            <param name="cut">The jump cut to use. Defaults to CameraCut.Cut. Set to CameraCut. Move for a smooth movement.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.InterpolateCameraLookAt(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Int32,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Interpolate this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s camera's 'look at' point between two coordinates with a set speed.
            </summary>
            <param name="from">The position the camera should start to move from.</param>
            <param name="to">The position the camera should move to.</param>
            <param name="time">Time in milliseconds to complete interpolation.</param>
            <param name="cut">The jump cut to use. Defaults to CameraCut.Cut (pointless). Set to CameraCut.Move for interpolation.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.IsInVehicle(SampSharp.GameMode.World.BaseVehicle)">
            <summary>
                Checks if this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> is in a specific <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <returns>True if player is in the vehicle; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.EnableStuntBonus(System.Boolean)">
            <summary>
                Toggle stunt bonuses for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="enable">True to enable stunt bonuses, False to disable them.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.ToggleSpectating(System.Boolean)">
            <summary>
                Toggle this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s spectate mode.
            </summary>
            <remarks>
                When the spectating is turned off, OnPlayerSpawn will automatically be called.
            </remarks>
            <param name="toggle">True to enable spectating and False to disable.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SpectatePlayer(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Definitions.SpectateMode)">
            <summary>
                Makes this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> spectate (watch) another player.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.World.BasePlayer.ToggleSpectating(System.Boolean)" /> before
                <see cref="M:SampSharp.GameMode.World.BasePlayer.SpectatePlayer(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Definitions.SpectateMode)" />.
            </remarks>
            <param name="targetPlayer">The Player that should be spectated.</param>
            <param name="mode">The mode to spectate with.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SpectatePlayer(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Makes this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> spectate (watch) another player.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.World.BasePlayer.ToggleSpectating(System.Boolean)" /> before
                <see cref="M:SampSharp.GameMode.World.BasePlayer.SpectatePlayer(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Definitions.SpectateMode)" />.
            </remarks>
            <param name="targetPlayer">The Player that should be spectated.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SpectateVehicle(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Definitions.SpectateMode)">
            <summary>
                Sets this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> to spectate another vehicle, i.e. see what its driver sees.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.World.BasePlayer.ToggleSpectating(System.Boolean)" /> before
                <see cref="M:SampSharp.GameMode.World.BasePlayer.SpectateVehicle(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Definitions.SpectateMode)" />.
            </remarks>
            <param name="targetVehicle">The vehicle to spectate.</param>
            <param name="mode">Spectate mode.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SpectateVehicle(SampSharp.GameMode.World.BaseVehicle)">
            <summary>
                Sets this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> to spectate another vehicle, i.e. see what its driver sees.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.World.BasePlayer.ToggleSpectating(System.Boolean)" /> before
                <see cref="M:SampSharp.GameMode.World.BasePlayer.SpectateVehicle(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Definitions.SpectateMode)" />.
            </remarks>
            <param name="targetVehicle">The vehicle to spectate.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.StartRecordingPlayerData(SampSharp.GameMode.Definitions.PlayerRecordingType,System.String)">
            <summary>
                Starts recording this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s movements to a file, which can then be reproduced by an NPC.
            </summary>
            <param name="recordtype">The type of recording.</param>
            <param name="recordname">
                Name of the file which will hold the recorded data. It will be saved in scriptfiles, with an
                automatically added .rec extension.
            </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.StopRecordingPlayerData">
            <summary>
                Stops all the recordings that had been started with <see cref="M:SampSharp.GameMode.World.BasePlayer.StartRecordingPlayerData(SampSharp.GameMode.Definitions.PlayerRecordingType,System.String)" /> for this
                <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GetLastShot(SampSharp.GameMode.Vector3@,SampSharp.GameMode.Vector3@)">
            <summary>
                Retrieves the start and end (hit) position of the last bullet a player fired.
            </summary>
            <param name="origin">The origin.</param>
            <param name="hitPosition">The hit position.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendClientMessage(SampSharp.GameMode.SAMP.Color,System.String)">
            <summary>
                This function sends a message to this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> with a chosen color in the chat. The whole line in
                the chat box will be
                in the set color unless colour embedding is used.
            </summary>
            <param name="color">The color of the message.</param>
            <param name="message">The text that will be displayed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.Kick">
            <summary>
                Kicks this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> from the server. They will have to quit the game and re-connect if they wish
                to
                continue playing.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.Ban">
            <summary>
                Ban this <see cref="T:SampSharp.GameMode.World.BasePlayer" />. The ban will be IP-based, and be saved in the samp.ban file in the
                server's root directory. <see cref="M:SampSharp.GameMode.World.BasePlayer.Ban(System.String)" /> allows you to ban with a reason, while you can ban and unban
                IPs
                using the RCON banip and unbanip commands.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.Ban(System.String)">
            <summary>
                Ban this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> with a reason.
            </summary>
            <param name="reason">The reason for the ban.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendClientMessage(SampSharp.GameMode.SAMP.Color,System.String,System.Object[])">
            <summary>
                This function sends a message to this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> with a chosen color in the chat. The whole line in
                the chatbox will be
                in the set color unless color embedding is used.
            </summary>
            <param name="color">The color of the message.</param>
            <param name="messageFormat">The composite format string of the text that will be displayed (max 144 characters).</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendClientMessage(System.String)">
            <summary>
                This function sends a message to this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> in white in the chat. The whole line in the chat
                box
                will be
                in the set color unless color embedding is used.
            </summary>
            <param name="message">The text that will be displayed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendClientMessage(System.String,System.Object[])">
            <summary>
                This function sends a message to this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> in white in the chat. The whole line in the chat
                box
                will be
                in the set color unless color embedding is used.
            </summary>
            <param name="messageFormat">The composite format string of the text that will be displayed (max 144 characters).</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendClientMessageToAll(SampSharp.GameMode.SAMP.Color,System.String)">
            <summary>
                Displays a message in chat to all players.
            </summary>
            <param name="color">The color of the message.</param>
            <param name="message">The message to show (max 144 characters).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendClientMessageToAll(SampSharp.GameMode.SAMP.Color,System.String,System.Object[])">
            <summary>
                Displays a message in chat to all players.
            </summary>
            <param name="color">The color of the message.</param>
            <param name="messageFormat">The composite format string of the text that will be displayed.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendClientMessageToAll(System.String)">
            <summary>
                Displays a message in white in chat to all players.
            </summary>
            <param name="message">The message to show.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendClientMessageToAll(System.String,System.Object[])">
            <summary>
                Displays a message in white in chat to all players.
            </summary>
            <param name="messageFormat">The composite format string of the text that will be displayed.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendPlayerMessageToPlayer(SampSharp.GameMode.World.BasePlayer,System.String)">
            <summary>
                Sends a message in the name this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> to another player on the server. The message will appear
                in the chat box
                but can only be seen by <paramref name="receiver" />. The line will start with the this Player's name in his color,
                followed by the <paramref name="message" /> in white.
            </summary>
            <param name="receiver">The <see cref="T:SampSharp.GameMode.World.BasePlayer" /> who will recieve the message</param>
            <param name="message">The message that will be sent.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendPlayerMessageToAll(System.String)">
            <summary>
                Sends a message in the name of this <see cref="T:SampSharp.GameMode.World.BasePlayer" /> to all other players on the server. The line will
                start with the this
                <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s name in their color, followed by the <paramref name="message" /> in white.
            </summary>
            <param name="message">The message that will be sent.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GameTextForAll(System.String,System.Int32,System.Int32)">
            <summary>
                Shows 'game text' (on-screen text) for a certain length of time for all players.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="time">The duration of the text being shown in milliseconds.</param>
            <param name="style">The style of text to be displayed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.GameText(System.String,System.Int32,System.Int32)">
            <summary>
                Shows 'game text' (on-screen text) for a certain length of time for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="time">The duration of the text being shown in milliseconds.</param>
            <param name="style">The style of text to be displayed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.CreateExplosionForAll(SampSharp.GameMode.Vector3,System.Int32,System.Single)">
            <summary>
                Create an explosion at the specified coordinates.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The explosion radius.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.CreateExplosionForAll(SampSharp.GameMode.Vector3,System.Int32,System.Single,System.Int32)">
            <summary>
                Create an explosion at the specified coordinates.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The explosion radius.</param>
            <param name="interior">The interior of the explosion.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.CreateExplosionForAll(SampSharp.GameMode.Vector3,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
                Create an explosion at the specified coordinates.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The explosion radius.</param>
            <param name="interior">The interior of the explosion.</param>
            <param name="virtualworld">The virtualworld of the explosion.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.CreateExplosion(SampSharp.GameMode.Vector3,System.Int32,System.Single)">
            <summary>
                Creates an explosion for a <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
                Only the specific player will see explosion and feel its effects.
                This is useful when you want to isolate explosions from other players or to make them only appear in specific
                virtual worlds.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The explosion type.</param>
            <param name="radius">The radius of the explosion.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendDeathMessage(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Adds a death to the kill feed on the right-hand side of the screen of this <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="killer">The <see cref="T:SampSharp.GameMode.World.BasePlayer" /> that killer the <paramref name="killee" />.</param>
            <param name="killee">The <see cref="T:SampSharp.GameMode.World.BasePlayer" /> that has been killed.</param>
            <param name="weapon">The reason for this <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s death.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.SendDeathMessageToAll(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Adds a death to the kill feed on the right-hand side of the screen.
            </summary>
            <param name="killer">The Player that killer the <paramref name="killee" />.</param>
            <param name="killee">The player that has been killed.</param>
            <param name="weapon">The reason for this Player's death.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnConnected(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.Connected" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnDisconnected(SampSharp.GameMode.Events.DisconnectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.Disconnected" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DisconnectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnCleanup(SampSharp.GameMode.Events.DisconnectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.Cleanup" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DisconnectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnSpawned(SampSharp.GameMode.Events.SpawnEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.Spawned" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.SpawnEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnDeath(SampSharp.GameMode.Events.DeathEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.Died" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DeathEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnText(SampSharp.GameMode.Events.TextEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.Text" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.TextEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnCommandText(SampSharp.GameMode.Events.CommandTextEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.CommandText" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.TextEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnRequestClass(SampSharp.GameMode.Events.RequestClassEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.RequestClass" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.RequestClassEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnEnterVehicle(SampSharp.GameMode.Events.EnterVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.EnterVehicle" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EnterVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnExitVehicle(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.ExitVehicle" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnStateChanged(SampSharp.GameMode.Events.StateEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.StateChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.StateEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnEnterCheckpoint(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.EnterCheckpoint" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnLeaveCheckpoint(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.LeaveCheckpoint" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnEnterRaceCheckpoint(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.EnterRaceCheckpoint" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnLeaveRaceCheckpoint(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.LeaveRaceCheckpoint" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnRequestSpawn(SampSharp.GameMode.Events.RequestSpawnEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.RequestSpawn" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnEnterExitModShop(SampSharp.GameMode.Events.EnterModShopEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.EnterExitModShop" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EnterModShopEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnSelectedMenuRow(SampSharp.GameMode.Events.MenuRowEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.SelectedMenuRow" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.MenuRowEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnExitedMenu(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.ExitedMenu" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnInteriorChanged(SampSharp.GameMode.Events.InteriorChangedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.InteriorChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.InteriorChangedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnKeyStateChanged(SampSharp.GameMode.Events.KeyStateChangedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.KeyStateChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.KeyStateChangedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnUpdate(SampSharp.GameMode.Events.PlayerUpdateEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.Update" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnStreamIn(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.StreamIn" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnStreamOut(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.StreamOut" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnDialogResponse(SampSharp.GameMode.Events.DialogResponseEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.DialogResponse" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DialogResponseEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnTakeDamage(SampSharp.GameMode.Events.DamageEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.TakeDamage" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DamageEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnGiveDamage(SampSharp.GameMode.Events.DamageEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.GiveDamage" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DamageEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnClickMap(SampSharp.GameMode.Events.PositionEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.ClickMap" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PositionEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnClickTextDraw(SampSharp.GameMode.Events.ClickTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.ClickTextDraw" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ClickTextDrawEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnCancelClickTextDraw(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.CancelClickTextDraw" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnClickPlayerTextDraw(SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.ClickPlayerTextDraw" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ClickPlayerTextDrawEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnClickPlayer(SampSharp.GameMode.Events.ClickPlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.ClickPlayer" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ClickPlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnEditGlobalObject(SampSharp.GameMode.Events.EditGlobalObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.EditGlobalObject" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EditGlobalObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnEditPlayerObject(SampSharp.GameMode.Events.EditPlayerObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.EditPlayerObject" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EditPlayerObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnEditAttachedObject(SampSharp.GameMode.Events.EditAttachedObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.EditAttachedObject" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EditAttachedObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnSelectGlobalObject(SampSharp.GameMode.Events.SelectGlobalObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.SelectGlobalObject" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnSelectPlayerObject(SampSharp.GameMode.Events.SelectPlayerObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.SelectPlayerObject" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.SelectPlayerObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BasePlayer.OnWeaponShot(SampSharp.GameMode.Events.WeaponShotEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BasePlayer.WeaponShot" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.WeaponShotEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:SampSharp.GameMode.World.BaseVehicle">
            <summary>
                Represents a SA-MP vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.BaseVehicle.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.BaseVehicle.Max">
            <summary>
                Maximum number of vehicles which can exist.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.ModelInfo">
            <summary>
                Gets an instance of <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" /> about this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Driver">
            <summary>
                Gets the driver of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Passengers">
            <summary>
                Gets the passengers of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />. (not the driver)
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.PoolSize">
            <summary>
                Gets the size of the vehicles pool.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsValid">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> has been created and still is alive.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Angle">
            <summary>
                Gets or sets the Z angle of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Model">
            <summary>
                Gets the model ID of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.HasTrailer">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> has a trailer attached to it.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Trailer">
            <summary>
                Gets or sets the the trailer attached to this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
            <returns>The trailer attached.</returns>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Velocity">
            <summary>
                Gets or sets the velocity at which this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> is moving.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.VirtualWorld">
            <summary>
                Gets or sets the virtual world of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Engine">
            <summary>
                Gets or sets this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s engine status. If True, the engine is running.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Lights">
            <summary>
                Gets or sets this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s lights' state. If True the lights are on.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Alarm">
            <summary>
                Gets or sets this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s alarm state. If True the alarm is (or was) sounding.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Doors">
            <summary>
                Gets or sets the lock status of the doors of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />. If True the doors are locked.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Bonnet">
            <summary>
                Gets or sets the bonnet/hood status of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />. If True, it's open.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Boot">
            <summary>
                Gets or sets the boot/trunk status of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />. True means it is open.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Objective">
            <summary>
                Gets or sets the objective status of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />. True means the objective is on.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsDriverDoorOpen">
            <summary>
                Gets or sets a value indicating whether the driver door is open.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsPassengerDoorOpen">
            <summary>
                Gets or sets a value indicating whether the passenger door is open.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsBackLeftDoorOpen">
            <summary>
                Gets or sets a value indicating whether the driver door is open.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsBackRightDoorOpen">
            <summary>
                Gets or sets a value indicating whether the driver door is open.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsDriverWindowClosed">
            <summary>
                Gets or sets a value indicating whether the driver window is closed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsPassengerWindowClosed">
            <summary>
                Gets or sets a value indicating whether the passenger window is closed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsBackLeftWindowClosed">
            <summary>
                Gets or sets a value indicating whether the driver window is closed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsBackRightWindowClosed">
            <summary>
                Gets or sets a value indicating whether the driver window is closed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.IsSirenOn">
            <summary>
                Gets a value indicating whether this Vehicle's siren is on.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Rotation">
            <summary>
                Gets or sets the rotation of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
            <remarks>
                Only the Z angle can be set!
            </remarks>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Health">
            <summary>
                Gets or sets the health of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.BaseVehicle.Position">
            <summary>
                Gets or sets the position of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.Spawn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnSpawn(System.EventArgs)" /> is being called.
                This callback is called when <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> spawns.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.Died">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnDeath(SampSharp.GameMode.Events.PlayerEventArgs)" /> is being called.
                This callback is called when this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> is destroyed - either by exploding or becoming
                submerged in water.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.PlayerEnter">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnPlayerEnter(SampSharp.GameMode.Events.EnterVehicleEventArgs)" /> is being called.
                This callback is called when a <see cref="T:SampSharp.GameMode.World.BasePlayer" /> starts to enter this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />,
                meaning the player is not in vehicle yet at the time this callback is called.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.PlayerExit">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnPlayerExit(SampSharp.GameMode.Events.PlayerVehicleEventArgs)" /> is being called.
                This callback is called when a <see cref="T:SampSharp.GameMode.World.BasePlayer" /> exits a <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.Mod">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnMod(SampSharp.GameMode.Events.VehicleModEventArgs)" /> is being called.
                This callback is called when this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> is modded.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.PaintjobApplied">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnPaintjobApplied(SampSharp.GameMode.Events.VehiclePaintjobEventArgs)" /> is being called.
                Called when a <see cref="T:SampSharp.GameMode.World.BasePlayer" /> changes the paintjob of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> (in a modshop).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.Resprayed">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnResprayed(SampSharp.GameMode.Events.VehicleResprayedEventArgs)" /> is being called.
                The callback name is deceptive, this callback is called when a <see cref="T:SampSharp.GameMode.World.BasePlayer" /> exits a mod shop with this
                <see cref="T:SampSharp.GameMode.World.BaseVehicle" />,
                regardless of whether the vehicle's colors were changed, and is NEVER called for pay 'n' spray garages.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.DamageStatusUpdated">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnDamageStatusUpdated(SampSharp.GameMode.Events.PlayerEventArgs)" /> is being called.
                This callback is called when a element of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> such as doors, tires, panels, or lights
                get damaged.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.UnoccupiedUpdate">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnUnoccupiedUpdate(SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs)" /> is being called.
                This callback is called everytime this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> updates the server with their status while it is
                unoccupied.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.StreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnStreamIn(SampSharp.GameMode.Events.PlayerEventArgs)" /> is being called.
                Called when a <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> is streamed to a <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.StreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnStreamOut(SampSharp.GameMode.Events.PlayerEventArgs)" /> is being called.
                This callback is called when a <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> is streamed out from some <see cref="T:SampSharp.GameMode.World.BasePlayer" />'s
                client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.TrailerUpdate">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnTrailerUpdate(SampSharp.GameMode.Events.TrailerEventArgs)" /> is being called.
                This callback is called when a <see cref="T:SampSharp.GameMode.World.BasePlayer" /> sent a trailer update about this
                <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.BaseVehicle.SirenStateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.BaseVehicle.OnSirenStateChanged(SampSharp.GameMode.Events.SirenStateEventArgs)" /> is being called.
                This callback is called when this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s siren is toggled.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetDistanceFromPoint(SampSharp.GameMode.Vector3)">
            <summary>
                This function can be used to calculate the distance (as a float) between this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> and
                another
                map coordinate.
                This can be useful to detect how far a vehicle away is from a location.
            </summary>
            <param name="point">The point.</param>
            <returns>A float containing the distance from the point specified in the coordinates.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.Create(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <param name="addAlarm">If true, enables the vehicle to have a siren, providing the vehicle has a horn.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.CreateStatic(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a static <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicleType">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <param name="addAlarm">If true, enables the vehicle to have a siren, providing the vehicle has a horn.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.CreateStatic(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Int32)">
            <summary>
                Creates a static <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in the world.
            </summary>
            <param name="vehicleType">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <returns> The <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.IsStreamedIn(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Checks if this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> is streamed in for a <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="forPlayer">The Player to check.</param>
            <returns>True if this vehicle is streamed in for the specified vehicle; False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetRotationQuat(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
                Returns this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s rotation on all axis as a quaternion.
            </summary>
            <param name="w">A float variable in which to store the first quaternion angle, passed by reference.</param>
            <param name="x">A float variable in which to store the second quaternion angle, passed by reference.</param>
            <param name="y">A float variable in which to store the third quaternion angle, passed by reference.</param>
            <param name="z">A float variable in which to store the fourth quaternion angle, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetRotationQuat">
            <summary>
                Returns this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s rotation on all axis as a quaternion.
            </summary>
            <returns>The rotation in a <see cref="T:SampSharp.GameMode.Quaternion"/> structure.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetParametersForPlayer(SampSharp.GameMode.World.BasePlayer,System.Boolean,System.Boolean)">
            <summary>
                Set the parameters of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> for a <see cref="T:SampSharp.GameMode.World.BasePlayer" />.
            </summary>
            <param name="player">The <see cref="T:SampSharp.GameMode.World.BasePlayer" /> to set this vehicles's parameters for.</param>
            <param name="objective">False to disable the objective or True to show it.</param>
            <param name="doorslocked">False to unlock the doors or True to lock them.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetParameters(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Sets this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s parameters for all players.
            </summary>
            <param name="engine">Toggle the engine status on or off.</param>
            <param name="lights">Toggle the lights on or off.</param>
            <param name="alarm">Toggle the vehicle alarm on or off.</param>
            <param name="doors">Toggle the lock status of the doors.</param>
            <param name="bonnet">Toggle the bonnet to be open or closed.</param>
            <param name="boot">Toggle the boot to be open or closed.</param>
            <param name="objective">Toggle the objective status for the vehicle on or off.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetParameters(SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue)">
            <summary>
                Sets this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s parameters for all players.
            </summary>
            <param name="engine">Toggle the engine status on or off.</param>
            <param name="lights">Toggle the lights on or off.</param>
            <param name="alarm">Toggle the vehicle alarm on or off.</param>
            <param name="doors">Toggle the lock status of the doors.</param>
            <param name="bonnet">Toggle the bonnet to be open or closed.</param>
            <param name="boot">Toggle the boot to be open or closed.</param>
            <param name="objective">Toggle the objective status for the vehicle on or off.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetParameters(SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@)">
            <summary>
                Gets this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s parameters.
            </summary>
            <param name="engine">Get the engine status. If on the engine is running.</param>
            <param name="lights">Get the vehicle's lights' state. If on the lights are on.</param>
            <param name="alarm">Get the vehicle's alarm state. If on the alarm is (or was) sounding.</param>
            <param name="doors">Get the lock status of the doors. If on the doors are locked.</param>
            <param name="bonnet">Get the bonnet/hood status. If on it is open.</param>
            <param name="boot">Get the boot/trunk status. If on it is open.</param>
            <param name="objective">Get the objective status. If on the objective is on.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetParameters(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Gets this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s parameters.
            </summary>
            <param name="engine">Get the engine status. If true the engine is running.</param>
            <param name="lights">Get the vehicle's lights' state. If true the lights are on.</param>
            <param name="alarm">Get the vehicle's alarm state. If true the alarm is (or was) sounding.</param>
            <param name="doors">Get the lock status of the doors. If true the doors are locked.</param>
            <param name="bonnet">Get the bonnet/hood status. If true it is open.</param>
            <param name="boot">Get the boot/trunk status. If true it is open.</param>
            <param name="objective">Get the objective status. If true the objective is on.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetDoorsParameters(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Sets the doors parameters.
            </summary>
            <param name="driver">if set to <c>true</c> the driver side door is open.</param>
            <param name="passenger">if set to <c>true</c> the passenger side door is open.</param>
            <param name="backleft">if set to <c>true</c> the backleft door is open.</param>
            <param name="backright">if set to <c>true</c> the backright door is open.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetDoorsParameters(SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue)">
            <summary>
                Sets the doors parameters.
            </summary>
            <param name="driver">if on the driver side door is open.</param>
            <param name="passenger">if on the passenger side door is open.</param>
            <param name="backleft">if on the backleft door is open.</param>
            <param name="backright">if on the backright door is open.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetDoorsParameters(SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@)">
            <summary>
                Gets the doors parameters.
            </summary>
            <param name="driver">if on the driver side door is open.</param>
            <param name="passenger">if on the passenger side door is open.</param>
            <param name="backleft">if on the backleft door is open.</param>
            <param name="backright">if on the backright door is open.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetDoorsParameters(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Gets the doors parameters.
            </summary>
            <param name="driver">if true the driver side door is open.</param>
            <param name="passenger">if true the passenger side door is open.</param>
            <param name="backleft">if true the backleft door is open.</param>
            <param name="backright">if true the backright door is open.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetWindowsParameters(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Sets the windows parameters.
            </summary>
            <param name="driver">if set to <c>true</c> the driver side window is closed.</param>
            <param name="passenger">if set to <c>true</c> the passenger side window is closed.</param>
            <param name="backleft">if set to <c>true</c> the backleft window is closed.</param>
            <param name="backright">if set to <c>true</c> the backright window is closed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetWindowsParameters(SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue,SampSharp.GameMode.Definitions.VehicleParameterValue)">
            <summary>
                Sets the windows parameters.
            </summary>
            <param name="driver">if on the driver side window is closed.</param>
            <param name="passenger">if on the passenger side window is closed.</param>
            <param name="backleft">if on the backleft window is closed.</param>
            <param name="backright">if on the backright window is closed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetWindowsParameters(SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@,SampSharp.GameMode.Definitions.VehicleParameterValue@)">
            <summary>
                Gets the windows parameters.
            </summary>
            <param name="driver">if on the driver side window is closed.</param>
            <param name="passenger">if on the passenger side window is closed.</param>
            <param name="backleft">if on the backleft window is closed.</param>
            <param name="backright">if on the backright window is closed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetWindowsParameters(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Gets the windows parameters.
            </summary>
            <param name="driver">if true the driver side window is closed.</param>
            <param name="passenger">if true the passenger side window is closed.</param>
            <param name="backleft">if true the backleft window is closed.</param>
            <param name="backright">if true the backright window is closed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.Respawn">
            <summary>
                Sets this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> back to the position at where it was created.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.LinkToInterior(System.Int32)">
            <summary>
                Links this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> to the interior. This can be used for example for an arena/stadium.
            </summary>
            <param name="interiorid">Interior ID.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.AddComponent(System.Int32)">
            <summary>
                Adds a 'component' (often referred to as a 'mod' (modification)) to this Vehicle.
            </summary>
            <param name="componentid">The ID of the component to add to the vehicle.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.RemoveComponent(System.Int32)">
            <summary>
                Remove a component from the <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
            <param name="componentid">ID of the component to remove.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.ChangeColor(System.Int32,System.Int32)">
            <summary>
                Change this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s primary and secondary colors.
            </summary>
            <param name="color1">The new vehicle's primary Color ID.</param>
            <param name="color2">The new vehicle's secondary Color ID.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.ChangePaintjob(System.Int32)">
            <summary>
                Change this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s paintjob (for plain colors see <see cref="M:SampSharp.GameMode.World.BaseVehicle.ChangeColor(System.Int32,System.Int32)" />).
            </summary>
            <param name="paintjobid">The ID of the Paintjob to apply. Use 3 to remove a paintjob.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetNumberPlate(System.String)">
            <summary>
                Set this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />'s numberplate, which supports olor embedding.
            </summary>
            <param name="numberplate">The text that should be displayed on the numberplate. Color Embedding> is supported.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetComponentInSlot(SampSharp.GameMode.Definitions.CarModType)">
            <summary>
                Retrieves the installed component ID from this <see cref="T:SampSharp.GameMode.World.BaseVehicle" /> in a specific slot.
            </summary>
            <param name="slot">The component slot to check for components.</param>
            <returns>The ID of the component installed in the specified slot.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetComponentType(System.Int32)">
            <summary>
                Find out what type of component a certain ID is.
            </summary>
            <param name="componentid">The component ID to check.</param>
            <returns>The component slot ID of the specified component.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.Repair">
            <summary>
                Fully repairs this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />, including visual damage (bumps, dents, scratches, popped tires
                etc.).
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.SetAngularVelocity(SampSharp.GameMode.Vector3)">
            <summary>
                Sets the angular velocity of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
            <param name="velocity">The amount of velocity in the angular directions.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetDamageStatus(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Retrieve the damage statuses of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />.
            </summary>
            <param name="panels">A variable to store the panel damage data in, passed by reference.</param>
            <param name="doors">A variable to store the door damage data in, passed by reference.</param>
            <param name="lights">A variable to store the light damage data in, passed by reference.</param>
            <param name="tires">A variable to store the tire damage data in, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.UpdateDamageStatus(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the various visual damage statuses of this <see cref="T:SampSharp.GameMode.World.BaseVehicle" />, such as popped tires, broken lights and
                damaged panels.
            </summary>
            <param name="panels">A set of bits containing the panel damage status.</param>
            <param name="doors">A set of bits containing the door damage status.</param>
            <param name="lights">A set of bits containing the light damage status.</param>
            <param name="tires">A set of bits containing the tire damage status.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.GetModelInfo(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Definitions.VehicleModelInfoType)">
            <summary>
                Retrieve information about a specific vehicle model such as the size or position of seats.
            </summary>
            <param name="model">The vehicle model to get info of.</param>
            <param name="infotype">The type of information to retrieve.</param>
            <returns>The offset vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.Dispose(System.Boolean)">
            <summary>
                Removes this instance from the pool.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnSpawn(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.Spawn" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnDeath(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.Died" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnPlayerEnter(SampSharp.GameMode.Events.EnterVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.PlayerEnter" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EnterVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnPlayerExit(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.PlayerExit" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnMod(SampSharp.GameMode.Events.VehicleModEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.Mod" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleModEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnPaintjobApplied(SampSharp.GameMode.Events.VehiclePaintjobEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.PaintjobApplied" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehiclePaintjobEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnResprayed(SampSharp.GameMode.Events.VehicleResprayedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.Resprayed" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleResprayedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnDamageStatusUpdated(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.DamageStatusUpdated" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnUnoccupiedUpdate(SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.UnoccupiedUpdate" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnStreamIn(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.StreamIn" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnStreamOut(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.StreamOut" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnTrailerUpdate(SampSharp.GameMode.Events.TrailerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.TrailerUpdate" /> event.
            </summary>
            <param name="args">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.BaseVehicle.OnSirenStateChanged(SampSharp.GameMode.Events.SirenStateEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.BaseVehicle.SirenStateChanged" /> event.
            </summary>
            <param name="args">The <see cref="T:SampSharp.GameMode.Events.SirenStateEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SampSharp.GameMode.World.Pickup">
            <summary>
                Represents a SA-MP pickup.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.Pickup.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.Pickup.Max">
            <summary>
                Maximum number of pickups which can exist.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.Pickup.PickUp">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.Pickup.OnPickUp(SampSharp.GameMode.Events.PlayerEventArgs)" /> is being called.
                Called when a player picks up a pickup created with <see cref="M:SampSharp.GameMode.World.Pickup.Create(System.Int32,System.Int32,SampSharp.GameMode.Vector3,System.Int32)" />
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.Pickup.Create(System.Int32,System.Int32,SampSharp.GameMode.Vector3,System.Int32)">
            <summary>
                Creates a <see cref="T:SampSharp.GameMode.World.Pickup" />.
            </summary>
            <param name="model">The model of the pickup.</param>
            <param name="type">The pickup spawn type.</param>
            <param name="position">The position where the pickup should be spawned.</param>
            <param name="virtualWorld">The virtual world ID of the pickup. Use -1 for all worlds.</param>
            <returns>The created pickup or null if it cannot be created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.Pickup.CreateStatic(System.Int32,System.Int32,SampSharp.GameMode.Vector3,System.Int32)">
            <summary>
                Creates a static <see cref="T:SampSharp.GameMode.World.Pickup" /> in the game.
            </summary>
            <param name="model">The model of the pickup.</param>
            <param name="type">The pickup spawn type.</param>
            <param name="position">The position where the pickup should be spawned.</param>
            <param name="virtualWorld">The virtual world ID of the pickup. Use -1 for all worlds.</param>
            <returns>True if the pickup has been created, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.Pickup.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.Pickup.OnPickUp(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.Pickup.PickUp" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.Pickup.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.VirtualWorld">
            <summary>
                Gets the virtual world assigned to this <see cref="T:SampSharp.GameMode.World.Pickup" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.Model">
            <summary>
                Gets the model of this <see cref="T:SampSharp.GameMode.World.Pickup" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.SpawnType">
            <summary>
                Gets the type of this <see cref="T:SampSharp.GameMode.World.Pickup" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.Position">
            <summary>
                Gets the position of this <see cref="T:SampSharp.GameMode.World.Pickup" />.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.World.PlayerObject">
            <summary>
                Represents a player-object.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.PlayerObject.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.PlayerObject.Max">
            <summary>
                Maximum number of objects which can exist.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerObject.Rotation">
            <summary>
                Gets the rotation of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerObject.Position">
            <summary>
                Gets the position of this <see cref="T:SampSharp.GameMode.World.IWorldObject" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerObject.IsMoving">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.World.IGameObject" /> is moving.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerObject.IsValid">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.World.IGameObject" /> is valid.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerObject.ModelId">
            <summary>
                Gets the model of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerObject.DrawDistance">
            <summary>
                Gets the draw distance of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.PlayerObject.Moved">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.PlayerObject.OnMoved(System.EventArgs)" /> callback is being called.
                This callback is called when an object is moved after <see cref="M:SampSharp.GameMode.World.PlayerObject.Move(SampSharp.GameMode.Vector3,System.Single)" /> (when it stops moving).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.PlayerObject.Selected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.PlayerObject.OnSelected(SampSharp.GameMode.Events.SelectPlayerObjectEventArgs)" /> callback is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.World.PlayerObject.Select(SampSharp.GameMode.World.BasePlayer)" /> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.PlayerObject.Edited">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.World.PlayerObject.OnEdited(SampSharp.GameMode.Events.EditPlayerObjectEventArgs)" /> callback is being called.
                This callback is called when a player ends object edition mode.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerObject" /> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.#ctor(SampSharp.GameMode.World.BasePlayer,System.Int32,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerObject" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="modelid">The modelid.</param>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.#ctor(SampSharp.GameMode.World.BasePlayer,System.Int32,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerObject" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="modelid">The modelid.</param>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
            <param name="drawDistance">The draw distance.</param>
            <exception cref="T:System.ArgumentNullException">owner</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.Move(SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Vector3)">
            <summary>
                Moves this <see cref="T:SampSharp.GameMode.World.IGameObject" /> to the given position and rotation with the given speed.
            </summary>
            <param name="position">The position to which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <param name="speed">The speed at which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <param name="rotation">The rotation to which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <returns>
                The time it will take for the object to move in milliseconds.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.Move(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Moves this <see cref="T:SampSharp.GameMode.World.IGameObject" /> to the given position with the given speed.
            </summary>
            <param name="position">The position to which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <param name="speed">The speed at which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <returns>
                The time it will take for the object to move in milliseconds.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.Stop">
            <summary>
                Stop this <see cref="T:SampSharp.GameMode.World.IGameObject" /> from moving any further.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.SetMaterial(System.Int32,System.Int32,System.String,System.String,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Sets the material of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
            <param name="materialindex">The material index on the object to change.</param>
            <param name="modelid">
                The modelid on which the replacement texture is located. Use 0 for alpha. Use -1 to change the
                material color without altering the texture.
            </param>
            <param name="txdname">The name of the txd file which contains the replacement texture (use "none" if not required).</param>
            <param name="texturename">The name of the texture to use as the replacement (use "none" if not required).</param>
            <param name="materialcolor">The object color to set (use default(Color) to keep the existing material color).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.SetMaterialText(System.Int32,System.String,SampSharp.GameMode.Definitions.ObjectMaterialSize,System.String,System.Int32,System.Boolean,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Definitions.ObjectMaterialTextAlign)">
            <summary>
                Sets the material text of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
            <param name="materialindex">The material index on the object to change.</param>
            <param name="text">The text to show on the object. (MAX 2048 characters)</param>
            <param name="materialsize">The object's material index to replace with text.</param>
            <param name="fontface">The font to use.</param>
            <param name="fontsize">The size of the text (max 255).</param>
            <param name="bold">Whether to write in bold.</param>
            <param name="foreColor">The color of the text.</param>
            <param name="backColor">The background color of the text.</param>
            <param name="textalignment">The alignment of the text.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.DisableCameraCollisions">
            <summary>
                Disable collisions between players' cameras and this <see cref="T:SampSharp.GameMode.World.PlayerObject" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.AttachTo(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Attaches this <see cref="T:SampSharp.GameMode.World.PlayerObject" /> to the specified <paramref name="player" />.
            </summary>
            <param name="player">The player.</param>
            <param name="offset">The offset.</param>
            <param name="rotation">The rotation.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.AttachTo(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Attaches this <see cref="T:SampSharp.GameMode.World.PlayerObject" /> to the specified <paramref name="vehicle" />.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <param name="offset">The offset.</param>
            <param name="rotation">The rotation.</param>
            <exception cref="T:System.ArgumentNullException">vehicle</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.AttachCameraToObject">
            <summary>
                Attaches the player's camera to this <see cref="T:SampSharp.GameMode.World.PlayerObject" />.
            </summary>
            <remarks>
                This will attach the camera of the player whose object this is to this object.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.Edit">
            <summary>
                Lets the <see cref="P:SampSharp.GameMode.Pools.IdentifiedOwnedPool`2.Owner" /> of this <see cref="T:SampSharp.GameMode.World.PlayerObject" /> edit this
                object.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.Select(SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Lets the specified <paramref name="player" /> select an object.
            </summary>
            <param name="player">The player.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.OnMoved(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.PlayerObject.Moved" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.OnSelected(SampSharp.GameMode.Events.SelectPlayerObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.PlayerObject.Selected" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.SelectGlobalObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.OnEdited(SampSharp.GameMode.Events.EditPlayerObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.PlayerObject.Edited" /> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.EditPlayerObjectEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:SampSharp.GameMode.World.PlayerTextLabel">
            <summary>
                Represents a player text label.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.PlayerTextLabel.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.PlayerTextLabel.Max">
            <summary>
                Maximum number of per-player text labels which can exist.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerTextLabel.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerTextLabel.Color">
            <summary>
                Gets or sets the color of this <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerTextLabel.Text">
            <summary>
                Gets or sets the text of this <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerTextLabel.Position">
            <summary>
                Gets or sets the position of this <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerTextLabel.DrawDistance">
            <summary>
                Gets or sets the draw distance.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerTextLabel.TestLOS">
            <summary>
                Gets or sets a value indicating whether to test the line of sight.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerTextLabel.AttachedPlayer">
            <summary>
                Gets or sets the attached player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.PlayerTextLabel.AttachedVehicle">
            <summary>
                Gets or sets the attached vehicle.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerTextLabel.#ctor(SampSharp.GameMode.World.BasePlayer,System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
            <param name="testLOS">if set to <c>true</c> [test los].</param>
            <exception cref="T:System.ArgumentNullException">owner</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerTextLabel.#ctor(SampSharp.GameMode.World.BasePlayer,System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerTextLabel.#ctor(SampSharp.GameMode.World.BasePlayer,System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single,System.Boolean,SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
            <param name="testLOS">if set to <c>true</c> [test los].</param>
            <param name="attachedPlayer">The attached player.</param>
            <exception cref="T:System.ArgumentNullException">
                owner
                or
                attachedPlayer
            </exception>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerTextLabel.#ctor(SampSharp.GameMode.World.BasePlayer,System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.World.BasePlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
            <param name="attachedPlayer">The attached player.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerTextLabel.#ctor(SampSharp.GameMode.World.BasePlayer,System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single,System.Boolean,SampSharp.GameMode.World.BaseVehicle)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
            <param name="testLOS">if set to <c>true</c> [test los].</param>
            <param name="attachedVehicle">The attached vehicle.</param>
            <exception cref="T:System.ArgumentNullException">
                owner
                or
                attachedVehicle
            </exception>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerTextLabel.#ctor(SampSharp.GameMode.World.BasePlayer,System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.World.BaseVehicle)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.PlayerTextLabel" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
            <param name="attachedVehicle">The attached vehicle.</param>
        </member>
        <member name="T:SampSharp.GameMode.World.TextLabel">
            <summary>
                Represents a 3d text label.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.TextLabel.InvalidId">
            <summary>
                Identifier indicating the handle is invalid.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.TextLabel.Max">
            <summary>
                Maximum number of per-player text labels which can exist.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.TextLabel.Color">
            <summary>
                Gets or sets the color of this <see cref="T:SampSharp.GameMode.World.TextLabel" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.TextLabel.Text">
            <summary>
                Gets or sets the text of this <see cref="T:SampSharp.GameMode.World.TextLabel" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.TextLabel.Position">
            <summary>
                Gets or sets the position of this <see cref="T:SampSharp.GameMode.World.TextLabel" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.TextLabel.DrawDistance">
            <summary>
                Gets or sets the draw distance of this <see cref="T:SampSharp.GameMode.World.TextLabel" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.TextLabel.VirtualWorld">
            <summary>
                Gets or sets the virtual world of this <see cref="T:SampSharp.GameMode.World.TextLabel" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.TextLabel.TestLOS">
            <summary>
                Gets or sets a value indicating whether the line of sight should be tested before drawing this
                <see cref="T:SampSharp.GameMode.World.TextLabel" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.TextLabel.#ctor(System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single,System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.TextLabel" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
            <param name="virtualWorld">The virtual world.</param>
            <param name="testLOS">if set to <c>true</c> the line of sight should be tested before drawing.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.TextLabel.#ctor(System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.TextLabel" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
            <param name="virtualWorld">The virtual world.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.TextLabel.#ctor(System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.TextLabel" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="position">The position.</param>
            <param name="drawDistance">The draw distance.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.TextLabel.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.TextLabel.AttachTo(SampSharp.GameMode.World.BasePlayer,SampSharp.GameMode.Vector3)">
            <summary>
                Attaches this <see cref="T:SampSharp.GameMode.World.TextLabel" /> to the specified <paramref name="player" />.
            </summary>
            <param name="player">The player.</param>
            <param name="offset">The offset.</param>
            <exception cref="T:System.ArgumentNullException">player</exception>
        </member>
        <member name="M:SampSharp.GameMode.World.TextLabel.AttachTo(SampSharp.GameMode.World.BaseVehicle,SampSharp.GameMode.Vector3)">
            <summary>
                Attaches this <see cref="T:SampSharp.GameMode.World.TextLabel" /> to the specified <paramref name="vehicle" />.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <param name="offset">The offset.</param>
            <exception cref="T:System.ArgumentNullException">vehicle</exception>
        </member>
        <member name="T:SampSharp.GameMode.World.VehicleModelInfo">
            <summary>
                Contains vehicle category infos.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.VehicleModelInfo.#ctor(System.Int32,System.String,SampSharp.GameMode.Definitions.VehicleCategory)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" /> class.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.VehicleModelInfo.Type">
            <summary>
                Gets the type of this <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.VehicleModelInfo.Name">
            <summary>
                Gets the name of this <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.VehicleModelInfo.Category">
            <summary>
                Gets the category of this <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.VehicleModelInfo.Item(SampSharp.GameMode.Definitions.VehicleModelInfoType)">
            <summary>
                Gets model information of the given type.
            </summary>
            <param name="infotype">The type of information to retrieve.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.VehicleModelInfo.ForVehicle(SampSharp.GameMode.World.BaseVehicle)">
            <summary>
                Returns an instance of <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" /> containing information about the specified vehicle.
            </summary>
            <param name="vehicle">The vehicle to find information about.</param>
            <returns>An instance of <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" /> containing information about the specified vehicle.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.VehicleModelInfo.ForVehicle(SampSharp.GameMode.Definitions.VehicleModelType)">
            <summary>
                Returns an instance of <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" /> containing information about the given
                <see cref="T:SampSharp.GameMode.Definitions.VehicleModelType" />.
            </summary>
            <param name="model">The <see cref="T:SampSharp.GameMode.Definitions.VehicleModelType" /> to find information about.</param>
            <returns>An instance of <see cref="T:SampSharp.GameMode.World.VehicleModelInfo" /> containing information about the given VehicleModelType.</returns>
        </member>
        <member name="T:SampSharp.GameMode.World.IGameObject">
            <summary>
                Contains methods and properties for accessing a SA-MP object of any type.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IGameObject.IsMoving">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.World.IGameObject" /> is moving.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IGameObject.IsValid">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.World.IGameObject" /> is valid.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IGameObject.ModelId">
            <summary>
                Gets the model of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IGameObject.DrawDistance">
            <summary>
                Gets the draw distance of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IGameObject.Rotation">
            <summary>
                Gets the rotation of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.IGameObject.Move(SampSharp.GameMode.Vector3,System.Single,SampSharp.GameMode.Vector3)">
            <summary>
                Moves this <see cref="T:SampSharp.GameMode.World.IGameObject" /> to the given position and rotation with the given speed.
            </summary>
            <param name="position">The position to which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <param name="speed">The speed at which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <param name="rotation">The rotation to which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <returns>The time it will take for the object to move in milliseconds.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.IGameObject.Move(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Moves this <see cref="T:SampSharp.GameMode.World.IGameObject" /> to the given position with the given speed.
            </summary>
            <param name="position">The position to which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <param name="speed">The speed at which to move this <see cref="T:SampSharp.GameMode.World.IGameObject" />.</param>
            <returns>The time it will take for the object to move in milliseconds.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.IGameObject.Stop">
            <summary>
                Stop this <see cref="T:SampSharp.GameMode.World.IGameObject" /> from moving any further.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.IGameObject.SetMaterial(System.Int32,System.Int32,System.String,System.String,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Sets the material of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
            <param name="materialindex">The material index on the object to change.</param>
            <param name="modelid">
                The modelid on which the replacement texture is located. Use 0 for alpha. Use -1 to change the
                material color without altering the texture.
            </param>
            <param name="txdname">The name of the txd file which contains the replacement texture (use "none" if not required).</param>
            <param name="texturename">The name of the texture to use as the replacement (use "none" if not required).</param>
            <param name="materialcolor">The object color to set (use default(Color) to keep the existing material color).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.IGameObject.SetMaterialText(System.Int32,System.String,SampSharp.GameMode.Definitions.ObjectMaterialSize,System.String,System.Int32,System.Boolean,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Definitions.ObjectMaterialTextAlign)">
            <summary>
                Sets the material text of this <see cref="T:SampSharp.GameMode.World.IGameObject" />.
            </summary>
            <param name="materialindex">The material index on the object to change.</param>
            <param name="text">The text to show on the object. (MAX 2048 characters)</param>
            <param name="materialsize">The object's material index to replace with text.</param>
            <param name="fontface">The font to use.</param>
            <param name="fontsize">The size of the text (max 255).</param>
            <param name="bold">Whether to write in bold.</param>
            <param name="foreColor">The color of the text.</param>
            <param name="backColor">The background color of the text.</param>
            <param name="textalignment">The alignment of the text.</param>
        </member>
        <member name="T:SampSharp.GameMode.World.IIdentifiable">
            <summary>
                Contains an Identity property.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IIdentifiable.Id">
            <summary>
                Gets the identifier of this instance.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.World.IOwnable`1">
            <summary>
                Contains an Owner property.
            </summary>
            <typeparam name="T">The type of the owner</typeparam>
        </member>
        <member name="P:SampSharp.GameMode.World.IOwnable`1.Owner">
            <summary>
                Gets the owner of this <see cref="T:SampSharp.GameMode.World.IOwnable`1" />.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.World.IWorldObject">
            <summary>
                Defines an object that is placed in the world.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IWorldObject.Position">
            <summary>
                Gets the position of this IWorldObject.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.ServerLogWriter">
            <summary>
                A TextWriter that writes all input to the server log.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.ServerLogWriter.Encoding">
            <summary>
                When overridden in a derived class, returns the character encoding in which the output is written.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Char)">
            <summary>
                Writes a character followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.String)">
            <summary>
                Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value" /> is null, only the line terminator is written.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine">
            <summary>
                Writes a line terminator to the text string or stream.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.String,System.Object)">
            <summary>
                Writes a formatted string and a new line to the text string or stream, using the same semantics as the
                <see cref="M:System.String.Format(System.String,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The object to format and write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
                Writes a formatted string and a new line to the text string or stream, using the same semantics as the
                <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
                Writes out a formatted string and a new line, using the same semantics as
                <see cref="M:System.String.Format(System.String,System.Object)" />.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
            <param name="arg2">The third object to format and write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.String,System.Object[])">
            <summary>
                Writes out a formatted string and a new line, using the same semantics as
                <see cref="M:System.String.Format(System.String,System.Object)" />.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg">An object array that contains zero or more objects to format and write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Boolean)">
            <summary>
                Writes the text representation of a Boolean value followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The Boolean value to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Char[])">
            <summary>
                Writes an array of characters followed by a line terminator to the text string or stream.
            </summary>
            <param name="buffer">The character array from which data is read.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
                Writes a subarray of characters followed by a line terminator to the text string or stream.
            </summary>
            <param name="buffer">The character array from which data is read.</param>
            <param name="index">The character position in <paramref name="buffer" /> at which to start reading data.</param>
            <param name="count">The maximum number of characters to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Decimal)">
            <summary>
                Writes the text representation of a decimal value followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The decimal value to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Double)">
            <summary>
                Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or
                stream.
            </summary>
            <param name="value">The 8-byte floating-point value to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Single)">
            <summary>
                Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or
                stream.
            </summary>
            <param name="value">The 4-byte floating-point value to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Int32)">
            <summary>
                Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or
                stream.
            </summary>
            <param name="value">The 4-byte signed integer to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Int64)">
            <summary>
                Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or
                stream.
            </summary>
            <param name="value">The 8-byte signed integer to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.Object)">
            <summary>
                Writes the text representation of an object by calling the ToString method on that object, followed by a line
                terminator to the text string or stream.
            </summary>
            <param name="value">The object to write. If <paramref name="value" /> is null, only the line terminator is written.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.UInt32)">
            <summary>
                Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or
                stream.
            </summary>
            <param name="value">The 4-byte unsigned integer to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLine(System.UInt64)">
            <summary>
                Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or
                stream.
            </summary>
            <param name="value">The 8-byte unsigned integer to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Char)">
            <summary>
                Writes a character to the text string or stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.String)">
            <summary>
                Writes a string to the text string or stream.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Boolean)">
            <summary>
                Writes the text representation of a Boolean value to the text string or stream.
            </summary>
            <param name="value">The Boolean value to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.String,System.Object)">
            <summary>
                Writes a formatted string to the text string or stream, using the same semantics as the
                <see cref="M:System.String.Format(System.String,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The object to format and write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.String,System.Object,System.Object)">
            <summary>
                Writes a formatted string to the text string or stream, using the same semantics as the
                <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
                Writes a formatted string to the text string or stream, using the same semantics as the
                <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
            <param name="arg2">The third object to format and write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.String,System.Object[])">
            <summary>
                Writes a formatted string to the text string or stream, using the same semantics as the
                <see cref="M:System.String.Format(System.String,System.Object[])" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg">An object array that contains zero or more objects to format and write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Char[])">
            <summary>
                Writes a character array to the text string or stream.
            </summary>
            <param name="buffer">The character array to write to the text stream.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
                Writes a subarray of characters to the text string or stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">The character position in the buffer at which to start retrieving data.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Decimal)">
            <summary>
                Writes the text representation of a decimal value to the text string or stream.
            </summary>
            <param name="value">The decimal value to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Double)">
            <summary>
                Writes the text representation of an 8-byte floating-point value to the text string or stream.
            </summary>
            <param name="value">The 8-byte floating-point value to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Single)">
            <summary>
                Writes the text representation of a 4-byte floating-point value to the text string or stream.
            </summary>
            <param name="value">The 4-byte floating-point value to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Int32)">
            <summary>
                Writes the text representation of a 4-byte signed integer to the text string or stream.
            </summary>
            <param name="value">The 4-byte signed integer to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Int64)">
            <summary>
                Writes the text representation of an 8-byte signed integer to the text string or stream.
            </summary>
            <param name="value">The 8-byte signed integer to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.Object)">
            <summary>
                Writes the text representation of an object to the text string or stream by calling the ToString method on that
                object.
            </summary>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.UInt32)">
            <summary>
                Writes the text representation of a 4-byte unsigned integer to the text string or stream.
            </summary>
            <param name="value">The 4-byte unsigned integer to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.Write(System.UInt64)">
            <summary>
                Writes the text representation of an 8-byte unsigned integer to the text string or stream.
            </summary>
            <param name="value">The 8-byte unsigned integer to write.</param>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteAsync(System.Char)">
            <summary>
                Writes a character to the text string or stream asynchronously.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <returns>
                A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
            <summary>
                Writes a subarray of characters to the text string or stream asynchronously.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">The character position in the buffer at which to start retrieving data.</param>
            <param name="count">The number of characters to write.</param>
            <returns>
                A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteAsync(System.String)">
            <summary>
                Writes a string to the text string or stream asynchronously.
            </summary>
            <param name="value">The string to write. If <paramref name="value" /> is null, nothing is written to the text stream.</param>
            <returns>
                A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLineAsync">
            <summary>
                Writes a line terminator asynchronously to the text string or stream.
            </summary>
            <returns>
                A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLineAsync(System.Char)">
            <summary>
                Writes a character followed by a line terminator asynchronously to the text string or stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <returns>
                A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
            <summary>
                Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">The character position in the buffer at which to start retrieving data.</param>
            <param name="count">The number of characters to write.</param>
            <returns>
                A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.ServerLogWriter.WriteLineAsync(System.String)">
            <summary>
                Writes a string followed by a line terminator asynchronously to the text string or stream.
            </summary>
            <param name="value">The string to write. If the value is null, only a line terminator is written.</param>
            <returns>
                A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="T:SampSharp.GameMode.Vector3">
            <summary>
                Represents a 3D vector.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector3" /> struct.
            </summary>
            <param name="x">Value of the x component.</param>
            <param name="y">Value of the y component.</param>
            <param name="z">Value of the z component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector3" /> struct.
            </summary>
            <param name="x">Value of the x component.</param>
            <param name="y">Value of the y component.</param>
            <param name="z">Value of the z component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.#ctor(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector3" /> struct with the z component set to 0.
            </summary>
            <param name="x">Value of the x component.</param>
            <param name="y">Value of the y component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector3" /> struct with the z component set to 0.
            </summary>
            <param name="x">Value of the x component.</param>
            <param name="y">Value of the y component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.#ctor(SampSharp.GameMode.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector3" /> struct.
            </summary>
            <param name="xy">Values of the x and y components.</param>
            <param name="z">Value of the z component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.#ctor(SampSharp.GameMode.Vector2,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector3" /> struct.
            </summary>
            <param name="xy">Values of the x and y components.</param>
            <param name="z">Value of the z component.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector3" /> struct with same values for x, y and z components.
            </summary>
            <param name="xyz">Value of x, y and z components.</param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.#ctor(System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Vector3" /> struct with same values for x, y and z components.
            </summary>
            <param name="xyz">Value of x, y and z components.</param>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.X">
            <summary>
                Gets the X component of this <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Y">
            <summary>
                Gets the Y component of this <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Z">
            <summary>
                Gets the Z component of this <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Zero">
            <summary>
                Returns an empty <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.One">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with each component set to 1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.UnitX">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components 1, 0, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.UnitY">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components 0, 1, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.UnitZ">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components 0, 0, 1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Up">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components 0, 0, 1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Down">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components 0, 0, -1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Left">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components -1, 0, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Right">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components 1, 0, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Forward">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components 0, 1, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Backward">
            <summary>
                Returns a <see cref="T:SampSharp.GameMode.Vector3" /> with components 0, -1, 0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.Length">
            <summary>
                Gets the length of this <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.LengthSquared">
            <summary>
                Gets the squared length of this <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Vector3.IsEmpty">
            <summary>
                Gets whether this <see cref="T:SampSharp.GameMode.Vector3" /> is empty.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.DistanceTo(SampSharp.GameMode.Vector3)">
            <summary>
                Gets the distance to another <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
            <param name="other">The <see cref="T:SampSharp.GameMode.Vector3" /> to calculate the distance to.</param>
            <returns>The distance between the vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Normalized">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> instance with the components normalized to a single unit.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Barycentric(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Single,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains the cartesian coordinates of a vector specified in barycentric
                coordinates and relative to 3d-triangle.
            </summary>
            <param name="value1">The first vector of 3d-triangle.</param>
            <param name="value2">The second vector of 3d-triangle.</param>
            <param name="value3">The third vector of 3d-triangle.</param>
            <param name="amount1">
                Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of
                3d-triangle.
            </param>
            <param name="amount2">
                Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of
                3d-triangle.
            </param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.CatmullRom(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Clamp(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Cross(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Computes the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product of two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Distance(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.DistanceSquared(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Dot(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Returns a dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Hermite(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Lerp(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Max(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:SampSharp.GameMode.Vector3" /> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Min(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:SampSharp.GameMode.Vector3" /> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Normalize(SampSharp.GameMode.Vector3)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Reflect(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="normal">Reflection normal.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.SmoothStep(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="value2">Source <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Transform(SampSharp.GameMode.Vector3,SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains a transformation of 3d-vector by the specified
                <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="position">Source <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="matrix">The transformation <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <returns>Transformed <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Transform(SampSharp.GameMode.Vector3,SampSharp.GameMode.Quaternion)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains a transformation of 3d-vector by the specified
                <see cref="T:SampSharp.GameMode.Quaternion" />, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="rotation">The <see cref="T:SampSharp.GameMode.Quaternion" /> which contains rotation transformation.</param>
            <returns>Transformed <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.TransformNormal(SampSharp.GameMode.Vector3,SampSharp.GameMode.Matrix)">
            <summary>
                Creates a new <see cref="T:SampSharp.GameMode.Vector3" /> that contains a transformation of the specified normal by the specified
                <see cref="T:SampSharp.GameMode.Matrix" />.
            </summary>
            <param name="normal">Source <see cref="T:SampSharp.GameMode.Vector3" /> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:SampSharp.GameMode.Matrix" />.</param>
            <returns>Transformed normal.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_Addition(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Adds the left <see cref="T:SampSharp.GameMode.Vector3" />'s components to the right <see cref="T:SampSharp.GameMode.Vector3" />'s components and stores it in
                a
                new <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <returns>A new <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_Subtraction(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Subtracts the right <see cref="T:SampSharp.GameMode.Vector3" />'s components from the left <see cref="T:SampSharp.GameMode.Vector3" />'s components and
                stores
                it in a new <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <returns>A new <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_UnaryNegation(SampSharp.GameMode.Vector3)">
            <summary>
                Creates a <see cref="T:SampSharp.GameMode.Vector3" /> with the components set to the negative values of the given
                <paramref name="vector" />'s components.
            </summary>
            <param name="vector">The vector to invert.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_Multiply(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Multiplies the components <see cref="T:SampSharp.GameMode.Vector3" /> by the given scalar and stores them in a new
                <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
            <param name="vector">The <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="scalar">The scalar.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_Multiply(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Multiplies the components <see cref="T:SampSharp.GameMode.Vector3" /> by the components of the right <see cref="T:SampSharp.GameMode.Vector3" /> and stores
                them in a new <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
            <param name="left">A <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="right">A <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_Division(SampSharp.GameMode.Vector3,System.Single)">
            <summary>
                Divides the components <see cref="T:SampSharp.GameMode.Vector3" /> by the given scalar and stores them in a new <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
            <param name="vector">The <see cref="T:SampSharp.GameMode.Vector3" />.</param>
            <param name="scalar">The scalar.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_Division(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Divides the components <see cref="T:SampSharp.GameMode.Vector3" /> by the components of the right <see cref="T:SampSharp.GameMode.Vector3" /> and stores them
                in a new <see cref="T:SampSharp.GameMode.Vector3" />.
            </summary>
            <param name="left">The numerator.</param>
            <param name="right">The denominator.</param>
            <returns>The new <see cref="T:SampSharp.GameMode.Vector3" />.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_Equality(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Tests whether all components of both <see cref="T:SampSharp.GameMode.Vector3" /> are equivalent.
            </summary>
            <param name="left">Instance of <see cref="T:SampSharp.GameMode.Vector3" /> to compare.</param>
            <param name="right">Instance of <see cref="T:SampSharp.GameMode.Vector3" /> to compare.</param>
            <returns>true if all components of both <see cref="T:SampSharp.GameMode.Vector3" /> are equivalent; otherwise, false.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.op_Inequality(SampSharp.GameMode.Vector3,SampSharp.GameMode.Vector3)">
            <summary>
                Tests whether any component of both <see cref="T:SampSharp.GameMode.Vector3" /> are not equivalent.
            </summary>
            <param name="left">Instance of <see cref="T:SampSharp.GameMode.Vector3" /> to compare.</param>
            <param name="right">Instance of <see cref="T:SampSharp.GameMode.Vector3" /> to compare.</param>
            <returns>true if any component of both <see cref="T:SampSharp.GameMode.Vector3" /> are not equivalent; otherwise, false.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>
                A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Equals(SampSharp.GameMode.Vector3)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.Equals(System.Object)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:SampSharp.GameMode.Vector3.ToString">
            <summary>
                Returns the fully qualified type name of this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
    </members>
</doc>
